<!-- setup basic html template with metadata etc: -->
<html>
<head>
    <title>Image History | JSCammie.com</title>
    <meta name="description" content="View your generated images and their details.">
    <meta name="keywords" content="AI, Image, Generator, History, Details">
    <meta name="author" content="JSCammie">
    <meta name="viewport" content="height=device-height, width=device-width, initial-scale=1.0">
    <link rel='stylesheet' href='/style.css'/>
    
    <%- include('../partials/_headerAll') %>
    
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-K3KJJKS1R4"></script>
    <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'G-K3KJJKS1R4');
    </script>
    
</head>
<body>

    <!-- get partials/_navigation: -->
    <%- include('../partials/_navigation') %>

    <div class="center-fully-no-flex" style="margin-bottom: 3rem;">
        <%- include('../partials/_bannerAdvert') %>
    </div>

    <div id="loadingTimeDiv" style="position: fixed; top: 0; right: 0; padding: 10px; background-color: #00000015; border-radius: 0 0 0 10px; z-index: 1000;">
        <p id="loadingTime">Loading...</p>
    </div>

    <script>
        // remove the loading screen when the page is fully loaded:
        window.addEventListener('load', function() {
            // get the loading screen element:
            const loadingTimeDiv = document.getElementById('loadingTimeDiv');
            // fade out the loading screen:
            loadingTimeDiv.style.opacity = 100;

            // make it so they can click through the loading screen to the content below it:
            loadingTimeDiv.style.pointerEvents = 'none';

            // get the load time element:
            const loadingTime = document.getElementById('loadingTime');
            // get the time it took to load the page:
            const loadingTimeMS = new Date().getTime() - window.performance.timing.navigationStart;
            // set the load time text to the time it took to load the page in seconds (3.54s for example):
            loadingTime.innerText = `Loaded in ${loadingTimeMS / 1000}s`;

            // remove the loading screen after 3 second:
            setTimeout(() => {

                setTimeout(() => {
                    loadingTime.remove();
                    document.getElementById('loadingTimeDiv').remove();
                }, 5000);
            }, 5000);
        });
    </script>

    <div class="overlay" id="overlay"></div>
    <div class="booruPopupContent" id="booruPopupContent">
        <button class="closeButton" onclick="closeBooruPopup()">×</button>
        <!-- The content of the popup will be inserted here by JavaScript -->
    </div>
    <div class="generationPopupContent" id="generationPopupContent">
        <button class="closeButton" onclick="closeGenerationPopup()">×</button>
        <!-- The content of the popup will be inserted here by JavaScript -->
    </div>
    
    <div class="container round-frosted page-content mw75-dynamic" style="padding: 40px; justify-content: center;">
        <h1>Image History</h1>
    
        <script>  

            function openInGenerator(image_id) {
                // `https://jscammie.com/?prompt=${booruImage.prompt}&negativeprompt=${booruImage.negative_prompt}&aspectRatio=${booruImage.aspect_ratio}&model=${booruImage.model}&steps=${booruImage.steps}&cfguidance=${booruImage.cfg}&seed=${booruImage.seed}&loras=[${booruImage.loras}]&lora_strengths=[${booruImage.lora_strengths}]`

                // get the imageData from the masterImageData object:
                const imageData = masterImageData[image_id];

                let url = `https://jscammie.com/?prompt=${encodeURIComponent(imageData.prompt)}&negativeprompt=${imageData.negative_prompt}&aspectRatio=${imageData.aspect_ratio}&model=${imageData.model}&steps=${imageData.steps}&cfguidance=${imageData.cfg}&seed=${imageData.seed}&loras=[${imageData.loras}]&lora_strengths=[${imageData.lora_strengths}]&`;

                window.open(url, '_blank')
            }

            async function uploadToBooru(image_id) {

                console.log(`Uploading image ${image_id} to booru`);

                // get the imageData from the masterImageData object:
                const imageData = masterImageData[image_id];

                let booruData = {
                    prompt: `${imageData.prompt}`,
                    negative_prompt: `${imageData.negative_prompt}`,
                    aspect_ratio: `${imageData.aspect_ratio}`,
                    model: `${imageData.model}`,
                    loras: `${imageData.loras}`,
                    lora_strengths: `${imageData.lora_strengths}`,
                    steps: `${imageData.steps}`,
                    cfg: `${imageData.cfg}`,
                    seed: `${imageData.seed}`,
                    image_url: `${imageData.image_url}`
                }

                // post req to create-booru-image:

                fetch('/create-booru-image', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(booruData)
                })
                .then(response => response.json())
                .then(async data => {
                    console.log(data);

                    let options = {
                        message: data.message,
                        question: false,
                    }

                    let userResponse = await globalAlert(options)

                    if (data.status == 'success') {
                        // close the image and booru popup:
                        closeGenerationPopup();
                        closeBooruPopup();
                    } else {
                        // close the popup:
                        closeGenerationPopup();
                        closeBooruPopup();
                    }
                    
                })

            }

            // show fullscreen popup to confirm upload to booru, showing rules etc:
            function showBooruPopup(image_id) {
                // get the imageData from the masterImageData object:
                const imageData = masterImageData[image_id];
    
                const booruPopupContent = document.getElementById('booruPopupContent');
                const overlay = document.getElementById('overlay');

                // if they click off the popup, close it:
                overlay.onclick = function() {
                    closeGenerationPopup();
                    closeBooruPopup();
                }

                // 4a. While "Aged Up" content is allowed it needs to be clear from just looking at the image that they are over 18 with their proportions, outfit & general looks, they also MUST be 100% fictional and not based on anyone from real-life.
    
                booruPopupContent.innerHTML = `
                    <button class="closeButton" onclick="closeBooruPopup()">×</button>
                    <h1>Upload to Booru</h1>
                    <p>By uploading to the booru you agree to the following:</p>
                    <ul>
                        <li>Child/Cub/Loli NSFW content are NOT ALLOWED!!!</li>
                        <br>
                        <li>Aged-Up Characters that look over the age of 18 are allowed, if they do not look over 18, the post will be removed!</li>
                        <br>
                        <li>By default all content is hidden until a moderator approves it and gives it a safety rating (sfw, suggestive, nsfw).</li>
                        <br>
                        <li>ALL SETTINGS used to create an image are visible, if your content shows a word like "loli", even if its sfw, it will be removed!</li>
                        <br>
                        <li>Quality Generations are prefered! (Don't upload a billion variations ^-^;)
                    </ul>
                    <p>If you agree to these rules/terms then feel free to click below</p>
                    <button id="uploadToBooruButton" onclick="uploadToBooru('${image_id}')">Upload to Booru</button>
                `;

                document.getElementById('overlay').style.display = 'block';
                document.getElementById('booruPopupContent').style.display = 'block';
    
                // Listen for the ESC key to close the popup
                document.addEventListener('keydown', escCloseBooruPopup);
            }

            // Function to show the popup
            function showGenerationPopup(image_id) {
                // get the imageData from the masterImageData object:
                const imageData = masterImageData[image_id];
    
                const generationPopupContent = document.getElementById('generationPopupContent');
                const overlay = document.getElementById('overlay');

                // if they click off the popup, close it:
                overlay.onclick = function() {
                    closeGenerationPopup();
                }

                uploadToBooruButtonHTML = ``;

                // <button id="uploadToBooruButton" onclick="showBooruPopup('${image_id}')">Upload to Booru</button>
                //     <br>

                // add the above only if the image has not been uploaded to the booru yet:
                if (imageData.uploadedToBooru == false) {
                    uploadToBooruButtonHTML = `<button id="uploadToBooruButton" onclick="showBooruPopup('${image_id}')">Upload to Booru</button><br><br>`;
                }
    
                generationPopupContent.innerHTML = `
                    <button class="closeButton" onclick="closeGenerationPopup()">×</button>
                    <img class="popupGeneratedImage" src="${imageData.image_url}"></img>
                    
                    <br>
                    <br>
                    <button id="exportAIDataButton" onclick="exportAIData('${image_id}')">Export AI Data</button>
                    <br>
                    <br>
                    ${uploadToBooruButtonHTML}

                    <a>Prompt: </a>
                    <a id="prompt">${imageData.prompt}</a><br>

                    <a>Negative Prompt: </a>
                    <a id="negative_prompt">${imageData.negative_prompt}</a><br>

                    <a>Model: </a>
                    <a id="model">${imageData.model}</a><br>

                    <a>Aspect Ratio: </a>
                    <a id="aspect_ratio">${imageData.aspect_ratio}</a><br>

                    <a>LORAs: </a>
                    <a id="loras">${imageData.loras}</a><br>

                    <a>LORA Strengths: </a>
                    <a id="lora_strengths">${imageData.lora_strengths}</a><br>

                    <a>Steps: </a>
                    <a id="steps">${imageData.steps}</a><br>

                    <a>CFG: </a>
                    <a id="cfg">${imageData.cfg}</a><br>

                    <a>Seed: </a>
                    <a id="seed">${imageData.seed}</a><br>

                `;

                document.getElementById('overlay').style.display = 'block';
                document.getElementById('generationPopupContent').style.display = 'block';
    
                // Listen for the ESC key to close the popup
                document.addEventListener('keydown', escClosePopup);
            }

            // close booru popup:
            function closeBooruPopup() {
                const booruPopupContent = document.getElementById('booruPopupContent');
                const overlay = document.getElementById('overlay');
    
                booruPopupContent.style.display = 'none';
                overlay.style.display = 'none';
    
                // Remove the ESC key event listener
                document.removeEventListener('keydown', escCloseBooruPopup);
            }
    
            // Function to close the popup
            function closeGenerationPopup() {
                const generationPopupContent = document.getElementById('generationPopupContent');
                const overlay = document.getElementById('overlay');
    
                generationPopupContent.style.display = 'none';
                overlay.style.display = 'none';

                // Remove the ESC key event listener
                document.removeEventListener('keydown', escClosePopup);
            }
    
            // Function to close the popup with the ESC key

            function escCloseBooruPopup(event) {
                if (event.key === 'Escape') {
                    closeBooruPopup();
                }
            }

            function escClosePopup(event) {
                if (event.key === 'Escape') {
                    closeGenerationPopup();
                }
            }


            function exportAIData(image_id) {

                // get the imageData from the masterImageData object:
                const imageData = masterImageData[image_id];

                // Get the AI data from the form
                let aiData = {
                    prompt: imageData.prompt,
                    negativeprompt: imageData.negative_prompt,
                    aspectRatio: imageData.aspect_ratio,
                    model: imageData.model,
                    loras: imageData.loras,
                    lora_strengths: imageData.lora_strengths,
                    steps: imageData.steps,
                    quantity: 2,
                    cfg: imageData.cfg,
                    seed: imageData.seed,
                }

                // save it to a file and download it without jsyaml:
                let yamlString = `${aiData.prompt}<SPLIT>${aiData.negativeprompt}<SPLIT>${aiData.aspectRatio}<SPLIT>${aiData.model}<SPLIT>${aiData.loras}<SPLIT>${aiData.lora_strengths}<SPLIT>${aiData.steps}<SPLIT>${aiData.quantity}<SPLIT>${aiData.cfg}<SPLIT>${aiData.seed}`

                let blob = new Blob([yamlString], {type: 'text/yaml'});
                let url = URL.createObjectURL(blob);
                let a = document.createElement('a');
                a.href = url;
                a.download = `${aiData.model}.aidata`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
            }

        </script>
    
        <script>
            var masterImageData = {} 

            <% userHistory.forEach(imageData => { %>
                masterImageData["<%=imageData.image_id%><%=imageData.account_id%>"] = {
                    prompt: `<%=imageData.prompt%>`,
                    negative_prompt: `<%=imageData.negative_prompt%>`,
                    model: "<%=imageData.model%>",
                    aspect_ratio: "<%=imageData.aspect_ratio%>",
                    loras: "<%=imageData.loras%>",
                    lora_strengths: "<%=imageData.lora_strengths%>",
                    steps: "<%=imageData.steps%>",
                    cfg: "<%=imageData.cfg%>",
                    seed: "<%=imageData.seed%>",
                    image_url: "<%=imageData.image_url%>",
                    image_id: "<%=imageData.image_id%>",
                    uploadedToBooru: <%=imageData.uploadedToBooru%>,
                    thumbnailMade: <%=imageData.thumbnailMade%>,
                };
            <% }); %>
        </script>

        <script>

            async function deleteImage(div_id) {

                let options = {
                    message: 'Are you sure you want to delete this image?',
                    question: true,
                    options: {
                        yes: function() {
                            console.log("Yes clicked");
                        },
                        no: function() {
                            console.log("No clicked");
                        }
                    }
                }

                let alertResponse = await globalAlert(options);

                if (alertResponse == 'no') {
                    return;
                }

                // get the image_id and account_id from the image_id:
                let image_id_split = div_id.split('-');
                let image_id = image_id_split[0];
                let account_id = image_id_split[1];

                // get the image div:
                let imageDiv = document.getElementById(image_id + account_id);

                // send a request to the server to delete the image from the database:
                fetch('/image-history/delete-image', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        image_id: image_id,
                    })
                })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    // animate the image div disappearing:
                    imageDiv.style.transition = 'opacity 0.5s';
                    imageDiv.style.opacity = 0;
                    setTimeout(() => {
                        imageDiv.style.display = 'none';
                    }, 500);
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
            }

        </script>

    <style>

        .closeButton {
            display: none;
        }

        .generationsGrid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            justify-content: center;
            width: 100%;
            margin: 20px auto;
            box-sizing: border-box;
        }

        .generationDiv {
            min-height: 300px;
            min-width: 300px;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s, box-shadow 0.3s;
            border: 4px solid #ddd;
            cursor: pointer;
            position: relative;
            background-color: #f9f9f9;
        }


        .generationDiv:hover {
            transform: scale(1.03);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
        }

        .generatedImage {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 10px;
        }

        .dropdownToggle {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0, 0, 0, 0.5);
            border: none;
            font-size: 24px;
            color: #fff;
            cursor: pointer;
            z-index: 1000;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .dropdownToggle:hover {
            background-color: rgba(0, 0, 0, 0.8);
        }

        .dropdown {
            position: absolute;
            top: 50px;
            right: 10px;
            display: none;
            background-color: #333;
            border: 1px solid #444;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            padding: 5px;
            width: 150px;
            text-align: left;
        }

        .dropdown button {
            background: none;
            color: #fff;
            border: none;
            padding: 10px;
            text-align: left;
            width: 100%;
            cursor: pointer;
            font-size: 14px;
            transition: background 0.2s;
        }

        .dropdown button:hover {
            background-color: #555;
        }

        .generationPopupContent {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgb(0, 0, 0);
            background-image: linear-gradient(315deg, #006de2 0%, #000000 74%);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
            z-index: 2000;
            max-width: 90%;
            max-height: 90%;
            overflow-y: auto;
            display: none;
        }

        .generatedImage {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 10px;
            cursor: pointer;
        }

        .popupGeneratedImage {
            width: auto;
            height: 70vh;
            object-fit: cover;
            border-radius: 10px;
            cursor: pointer;
            margin: 0 auto;
            /* center it: */
            display: block;
        }

    </style>

    <script>
        function toggleDropdown(id) {
            const dropdown = document.getElementById(`dropdown-${id}`);
            dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
        }
    </script>

    <!-- Search Box -->
    <details open>
        <summary style="font-size: xx-large;">Search for images by prompt or model</summary>
        <br>
        <input type="text" id="searchInputPrompt" placeholder="Search for prompts.." value="<%= search %>" 
            onkeydown="if (event.keyCode == 13) { search() }" />
        <br><br>
        <select id="searchInputModel" name="model">
            <option value="all" <%= model === 'all' ? 'selected' : '' %>>All Models</option>
            <option value="fluffysonic" <%= model === 'fluffysonic' ? 'selected' : '' %>>(SD 1.5) FluffySonic (Sonic the Hedgehog by kitsune_sage)</option>
            <option value="realisticVision" <%= model === 'realisticVision' ? 'selected' : '' %>>(SD 1.5) realisticVision (Realstic)</option>    
            <option value="furryblend" <%= model === 'furryblend' ? 'selected' : '' %>>(SD 1.5) FurryBlend (Furry/Anime)</option>
            <option value="sdxl-autismmix" <%= model === 'sdxl-autismmix' ? 'selected' : '' %>>(SDXL) Autism Mix ("Better" PonyXL, uses PonyXL Prompting)</option>
            <option value="sdxl-sonichasautismmix" <%= model === 'sdxl-sonichasautismmix' ? 'selected' : '' %>>(SDXL) SonicHasAutismMix (SonicDiffusionXL & AutismMix merge, uses PonyXL Prompting)</option>
            <option value="sdxl-ponyrealism" <%= model === 'sdxl-ponyrealism' ? 'selected' : '' %>>(SDXL) Pony Realism (Realistic, uses PonyXL Prompting)</option>
            <option value="flux-unchained" <%= model === 'flux-unchained' ? 'selected' : '' %>>(FLUX) Unchained (Everything, natural language prompting)</option>
        </select>
        <br><br>
        <button onclick="search()">Search</button>
    </details>

    <!-- if the totalUserImages is more than 15000 display a message that future generated images wont be saved: -->

    <% if (totalUserImages >= 15000) { %>
        <h2>You have <%= totalUserImages %> / 15000</h2>
        <p>Future generated images will not be saved to your history, please delete some images to make room for more.</p>
    <% } else { %>
        <h2>You have <%= totalUserImages %> / 15000</h2>
        <p>Once you reach 15000 images, future generated images will not be saved to your history.</p>
    <% } %>

    <div class="generationsGrid">
        <% userHistory.forEach((imageData, index) => { %>
            <div id="<%= imageData.image_id %><%= imageData.account_id %>" class="generationDiv">
                <% const thumbImage = imageData.thumbnailMade 
                    ? imageData.image_url.replace('.png', '-thumb.png') 
                    : imageData.image_url; %>
                <img class="generatedImage" loading="lazy" src="<%= thumbImage %>" 
                    onclick="showGenerationPopup('<%= imageData.image_id %><%= imageData.account_id %>')" />

                <!-- Dropdown toggle button -->
                <button class="dropdownToggle" onclick="toggleDropdown('<%= imageData.image_id %><%= imageData.account_id %>')">⋮</button>

                <!-- Dropdown menu -->
                <div id="dropdown-<%= imageData.image_id %><%= imageData.account_id %>" class="dropdown">
                    <button onclick="deleteImage('<%= imageData.image_id %>-<%= imageData.account_id %>')">Delete</button>
                    <a href="<%= imageData.image_url %>" download>
                        <button>Download</button>
                    </a>
                    <button onclick="openInGenerator('<%= imageData.image_id %><%= imageData.account_id %>')">Open In Generator</button>
                    <button onclick="exportAIData('<%= imageData.image_id %><%= imageData.account_id %>')">Export .aidata</button>
                </div>
            </div>
        <% }); %>
    </div>

    <style>
    
        .pagination {
            text-align: center;
            margin-top: 20px;
        }

        .pagination a, .pagination span {
            display: inline-block;
            background-color: #f1f1f11f;
            color: #fff;
            border: 1px solid #ddd;
            padding: 8px 16px;
            margin: 0 5px;
            text-decoration: none;
            font-size: 16px;
            border-radius: 5px;
            transition: background-color 0.3s, color 0.3s;
        }

        .pagination a:hover {
            background-color: #0084ff;
        }

        .pagination a.active, .pagination span.active {
            background-color: #fff;
            color: #000;
        }

        .pagination .disabled {
            cursor: not-allowed;
            opacity: 0.5;
        }

    
    </style>

    <div class="pagination">
        <!-- Button to go to the first page -->
        <% if (page > 1) { %>
            <a href="?page=1&search=<%= encodeURIComponent(search) %>&model=<%= model %>">&laquo; First</a>
        <% } %>

        <!-- Button to skip 15 pages backward -->
        <% if (page > 15) { %>
            <a href="?page=<%= Math.max(page - 15, 1) %>&search=<%= encodeURIComponent(search) %>&model=<%= model %>"><%= page - 15 %></a>
        <% } %>

        <!-- Render pagination numbers -->
        <% for (let i = Math.max(1, page - 5); i <= Math.min(totalPages, page + 5); i++) { %>
            <a href="?page=<%= i %>&search=<%= encodeURIComponent(search) %>&model=<%= model %>" 
            class="<%= i === page ? 'active' : '' %>">
                <%= i %>
            </a>
        <% } %>

        <!-- Button to skip 15 pages forward -->
        <% if (page + 15 <= totalPages) { %>
            <a href="?page=<%= Math.min(page + 15, totalPages) %>&search=<%= encodeURIComponent(search) %>&model=<%= model %>"><%= page + 15 %></a>
        <% } %>

        <!-- Button to go to the last page -->
        <% if (page < totalPages) { %>
            <a href="?page=<%= totalPages %>&search=<%= encodeURIComponent(search) %>&model=<%= model %>">Last &raquo;</a>
        <% } %>
    </div>


    <style>
    
        .deleteAllImagesButton {
            background-color: #ff0000;
            color: #fff;
            border: none;
            padding: 10px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .deleteAllImagesButton:hover {
            background-color: #ff3333;
        }
    
    </style>

    <div>
    
        <!-- app.post('/image-history/delete-all-images -->

        <button class="deleteAllImagesButton" onclick="deleteAllImages()">Delete All Images</button>

        <button class="deleteCurrentPageButton" onclick="deleteCurrentPage()">Delete Current Page</button>
    
    </div>

    <script>

        async function deleteCurrentPage() {

            // ask if they are sure they want to delete the current page:
            let options = {
                message: 'Are you sure you want to delete all images on this page?',
                question: true,
                options: {
                    yes: function() {
                        console.log("Yes clicked");
                    },
                    no: function() {
                        console.log("No clicked");
                    }
                }
            }

            let alertResponse = await globalAlert(options);

            if (alertResponse == 'no') {
                return;
            }

            // use masterImageData to get all the image ids on the current page:
            // <% userHistory.forEach(imageData => { %>
            //     masterImageData["<%=imageData.image_id%><%=imageData.account_id%>"] = {
            //         prompt: `<%=imageData.prompt%>`,
            //         negative_prompt: `<%=imageData.negative_prompt%>`,
            //         model: "<%=imageData.model%>",
            //         aspect_ratio: "<%=imageData.aspect_ratio%>",
            //         loras: "<%=imageData.loras%>",
            //         lora_strengths: "<%=imageData.lora_strengths%>",
            //         steps: "<%=imageData.steps%>",
            //         cfg: "<%=imageData.cfg%>",
            //         seed: "<%=imageData.seed%>",
            //         image_url: "<%=imageData.image_url%>",
            //         image_id: "<%=imageData.image_id%>",
            //         uploadedToBooru: <%=imageData.uploadedToBooru%>,
            //         thumbnailMade: <%=imageData.thumbnailMade%>,
            //     };
            // <% }); %>

            // send several requests to the server to delete each image from the database:
            
            let promises = [];

            // loop through all the images on the current page and delete them:
            for (let image_id in masterImageData) {
                let imageData = masterImageData[image_id];
                let imageDiv = document.getElementById(image_id);
                if (imageDiv) {
                    // animate the image div disappearing:
                    imageDiv.style.transition = 'opacity 0.5s';
                    imageDiv.style.opacity = 0;
                    setTimeout(() => {
                        imageDiv.style.display = 'none';
                    }, 500);
                }
                // add the promise to the promises array:
                promises.push(fetch('/image-history/delete-image', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        image_id: imageData.image_id,
                    })
                }));
            }
            
            // wait for all the promises to resolve and then refresh the page after 1 second:
            Promise.all(promises)
            .then(() => {
                window.location.reload();
            })

        }

        async function deleteAllImages() {
    
            // ask 3 times if they are sure they want to delete all images:
            let options1 = {
                message: 'Are you sure you want to delete all images?',
                question: true,
                options: {
                    yes: function() {
                        console.log("Yes clicked");
                    },
                    no: function() {
                        console.log("No clicked");
                    }
                }
            }

            let alertResponse1 = await globalAlert(options1);

            if (alertResponse1 == 'no') {
                return;
            }

            let options2 = {
                message: 'Are you REALLY sure you want to delete all images?',
                question: true,
                options: {
                    yes: function() {
                        console.log("Yes clicked");
                    },
                    no: function() {
                        console.log("No clicked");
                    }
                }
            }

            let alertResponse2 = await globalAlert(options2);

            if (alertResponse2 == 'no') {
                return;
            }

            let options3 = {
                message: 'Are you REALLY REALLY sure you want to delete ALL IMAGES? YOU CANNOT GO BACK FROM THIS!',
                question: true,
                options: {
                    yes: function() {
                        console.log("Yes clicked");
                    },
                    no: function() {
                        console.log("No clicked");
                    }
                }
            }

            let alertResponse3 = await globalAlert(options3);

            if (alertResponse3 == 'no') {
                return;
            }

            // send a request to the server to delete all images from the database:
            fetch('/image-history/delete-all-images', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({})
            }).then(response => response.json())
            .then(data => {
                console.log(data);
                // animate the image div disappearing:
                let generationDivs = document.querySelectorAll('.generationDiv');
                generationDivs.forEach((generationDiv) => {
                    generationDiv.style.transition = 'opacity 0.5s';
                    generationDiv.style.opacity = 0;
                    setTimeout(() => {
                        generationDiv.style.display = 'none';
                    }, 500);
                });
                // after 1 second, reload the page:
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            })

        }
    
    </script>



    <script>
        function search() {
            const prompt = document.getElementById('searchInputPrompt').value;
            const model = document.getElementById('searchInputModel').value;
            const query = new URLSearchParams({
                search: prompt,
                model,
                page: 1, // Always reset to the first page
            });
            window.location.href = `/image-history?${query.toString()}`;
        }
    </script>


    
    <div class="generationsControls" id="generationsControls"></div>

    <!-- get partials/_footer: -->
    <%- include('../partials/_footer') %>
    
</body>
</html>