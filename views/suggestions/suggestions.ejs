<!-- setup basic html template with metadata etc: -->
<html>
<head>
    <title>Suggestions | JSCammie.com</title>
    <link rel='stylesheet' href='/style.css'/>
    
    <meta name="description" content="Suggest features or loras to be added to the site!">
    <meta name="keywords" content="loras, features, jscammie suggestions, suggestion, upvote, downvote">
    <meta name="author" content="JSCammie">
    
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-K3KJJKS1R4"></script>
    <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'G-K3KJJKS1R4');
    </script>
    
</head>
<body>

    <!-- get partials/_navigation: -->
    <%- include('../../partials/_navigation') %>

    <div class="center-fully-no-flex" style="margin-bottom: 3rem;">
        <%- include('../../partials/_bannerAdvert') %>
    </div>

    <style>
        .suggestionTopBar {
            display: inline;
            justify-content: space-between;
            font-size: 24px;
        }

        .votingButton {
            /* remove border, background colour */
            background-color: rgba(0, 0, 0, 0) !important;
            /* make the cursor a pointer */
            cursor: pointer;
        }

        .suggestionDiv {
            border: 3px solid rgb(255, 150, 253);
            padding: 10px;
            margin: 10px;
            border-radius: 10px;
        }
    </style>

    <div class="container round-frosted page-content mw75-dynamic" style="margin-bottom: 12rem; padding: 24px">
        <a class="submitSuggestionHyperlink" href="/submit-suggestion">Submit a Suggestion</a>
        <h1 style="text-align: center;">Suggestions</h1>


        <style>
            .pendingSuggestion p {
                color: yellow;
            }
            .pendingSuggestion div {
                background-color: rgba(255, 255, 0, 0.5) !important;
            }

            .addedSuggestion p {
                color: rgb(119, 200, 255);
            }
            .addedSuggestion div {
                background-color: rgba(119, 200, 255, 0.5) !important;
            }

            .rejectedSuggestion p {
                color: red;
            }
            .rejectedSuggestion div {
                background-color: rgba(255, 0, 0, 0.5) !important;
            }
        </style>

        <script>
            var masterSuggestionData = {}

            <% suggestions.forEach(suggestion => { %>
                masterSuggestionData[<%=suggestion.suggestionId%>] = {
                    suggestionId: <%=suggestion.suggestionId%>,
                    safety: '<%=suggestion.safety%>',
                    type: '<%=suggestion.type%>',
                    title: `<%=suggestion.title%>`,
                    upvotes: [<%=suggestion.upvotes%>],
                    downvotes: [<%=suggestion.downvotes%>],
                    text: `<%=suggestion.text%>`,
                    accountId: `<%=suggestion.accountId%>`,
                    status: `<%=suggestion.status%>`
                }
            <% }) %>

            var userProfile = {
                accountId: '<%=userProfile.accountId? userProfile.accountId : ''%>',
                badges: {
                    owner: <%=userProfile.badges?.owner? userProfile.badges.owner : false%>
                }
            }



        </script>

        <div id="suggestionsFilters">
            <select id="suggestionsTypeSearch">
                <option value="all">All</option>
                <option value="lora">Lora</option>
                <option value="feature">Feature</option>
                <option value="bug">Bug</option>
            </select>
            <br>
            <select id="suggestionsSafetySearch">
                <option value="sfw">SFW</option>
                <option value="nsfw">NSFW</option>
                <option value="all">All</option>
            </select>
            <br>
            <select id="suggestionsStatusSearch">
                <option value="pending">Pending</option>
                <option value="added">Added</option>
                <option value="rejected">Rejected</option>
            </select>
            <br>
            <select id="suggestionsSortOrder">
                <option value="newest">Newest</option>
                <option value="oldest">Oldest</option>
                <option value="votesAggregated">Votes</option>
            </select>

        </div>

        <div id="suggestionsContainer">
        </div>
    </div>

    <script>
        // make any links in the text clickable:
        document.querySelectorAll('a').forEach(a => {
            a.innerHTML = a.innerHTML.replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank">$1</a>');
        });
    </script>

    <script>
        // search logic:
        function searchSuggestions() {
            const type = document.getElementById('suggestionsTypeSearch').value;
            const safety = document.getElementById('suggestionsSafetySearch').value;
            const status = document.getElementById('suggestionsStatusSearch').value;
            const sortOrder = document.getElementById('suggestionsSortOrder').value;

            let suggestions = Object.values(masterSuggestionData);

            // Filter based on the selected filters
            if (type !== 'all') {
                suggestions = suggestions.filter(suggestion => suggestion.type === type);
            }

            if (safety !== 'all') {
                suggestions = suggestions.filter(suggestion => suggestion.safety === safety);
            }

            if (status !== 'all') {
                suggestions = suggestions.filter(suggestion => suggestion.status.toLowerCase() === status);
            }

            // Sort based on the selected sort order
            if (sortOrder === 'newest') {
                suggestions.sort((a, b) => b.suggestionId - a.suggestionId);
            } else if (sortOrder === 'oldest') {
                suggestions.sort((a, b) => a.suggestionId - b.suggestionId);
            } else if (sortOrder === 'votesAggregated') {
                suggestions.sort((a, b) => {
                    const votesA = a.upvotes.length - a.downvotes.length;
                    const votesB = b.upvotes.length - b.downvotes.length;
                    return votesB - votesA;
                });
            }

            console.log(suggestions); // Check the filtered and sorted suggestions
            console.log(userProfile); // Check the userProfile object
            console.log(masterSuggestionData)

            // update the suggestions container:
            const suggestionsContainer = document.getElementById('suggestionsContainer');
            suggestionsContainer.innerHTML = '';
            suggestions.forEach(suggestion => {
                const suggestionDiv = document.createElement('div');
                suggestionDiv.classList.add('suggestionDiv', `${suggestion.status}Suggestion`);

                suggestionDiv.innerHTML = `
                    <span hidden id="suggestionId">${suggestion.suggestionId}</span>
                    <p id="${suggestion.suggestionId}-safety">${suggestion.safety === 'nsfw' ? 'NSFW' : 'SFW'}</p>
                    <a class="suggestionTopBar">${suggestion.type === 'lora' ? 'üíúLora' : suggestion.type === 'feature' ? 'üíöFeature' : '‚ù§Ô∏èBug'} | ${suggestion.title} | </a>
                    <a class="suggestionTopBar">
                        <button class="votingButton" id="upvote">Upvotes: ${suggestion.upvotes.length}</button>
                        <button class="votingButton" id="downvote">Downvotes: ${suggestion.downvotes.length}</button>
                    </a><br>
                    <a>${suggestion.text}</a>
                    <br>
                    <a>
                        ${userProfile.accountId === suggestion.accountId || userProfile.badges?.owner ? '<button id="removeSuggestion">Remove</button>' : ''}
                        ${userProfile.badges?.owner ? '<button id="addSuggestion">Add</button>' : ''}
                        ${userProfile.badges?.owner ? '<button id="rejectSuggestion">Reject</button>' : ''}
                        ${userProfile.accountId === suggestion.accountId || userProfile.badges?.owner ? '<button id="toggleSuggestionSafety">NSFW/SFW</button>' : ''}
                    </a>
                    <p id="${suggestion.suggestionId}-response"></p>
                `;
                suggestionsContainer.appendChild(suggestionDiv);
            });


            // make any links in the text clickable:
            document.querySelectorAll('a').forEach(a => {
                a.innerHTML = a.innerHTML.replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank">$1</a>');
            });

            // apply the voting logic to the new suggestions:
            document.querySelectorAll('.votingButton').forEach(button => {
                button.addEventListener('click', async (e) => {
                    const suggestionId = e.target.parentElement.parentElement.querySelector('#suggestionId').innerText;
                    const vote = e.target.id;

                    // set request body:
                    let requestBody = {
                        suggestionId: suggestionId,
                        vote: vote
                    };

                    console.log(requestBody);
                    // send the vote to the server:

                    const response = await fetch(`/vote-suggestion`, {
                        method: 'POST',
                        body: JSON.stringify(requestBody),
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    const data = await response.json();
                    console.log(data);

                    // update the upvotes and downvotes on the page for the suggestion:
                    e.target.parentElement.querySelector('#upvote').innerText = `Upvotes: ${data.votes.upvotes}`;
                    e.target.parentElement.querySelector('#downvote').innerText = `Downvotes: ${data.votes.downvotes}`;

                    // update the response message:
                    responseElement = document.getElementById(`${suggestionId}-response`);
                    responseElement.innerText = data.message;
                });
            });

            // apply the remove suggestion logic to the new suggestions:
            document.querySelectorAll('#removeSuggestion').forEach(button => {
                button.addEventListener('click', async (e) => {
                    const suggestionId = e.target.parentElement.parentElement.querySelector('#suggestionId').innerText;

                    // set request body:
                    let requestBody = {
                        suggestionId: suggestionId
                    };

                    // send the remove request to the server:
                    const response = await fetch(`/remove-suggestion`, {
                        method: 'POST',
                        body: JSON.stringify(requestBody),
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    const data = await response.json();
                    console.log(data);

                    // update the response message:
                    responseElement = document.getElementById(`${suggestionId}-response`);
                    responseElement.innerText = data.message;
                });
            });

            // apply the add suggestion logic to the new suggestions:
            document.querySelectorAll('#addSuggestion').forEach(button => {
                button.addEventListener('click', async (e) => {
                    const suggestionId = e.target.parentElement.parentElement.querySelector('#suggestionId').innerText;

                    // set request body:
                    let requestBody = {
                        suggestionId: suggestionId,
                        status: 'added'
                    };

                    // send the update request to the server:
                    const response = await fetch(`/update-suggestion-status`, {
                        method: 'POST',
                        body: JSON.stringify(requestBody),
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    const data = await response.json();
                    console.log(data);

                    // set the class of the suggestion div to added:
                    suggestionDiv = e.target.parentElement.parentElement;
                    suggestionDiv.classList.remove('pendingSuggestion');
                    suggestionDiv.classList.remove('rejectedSuggestion');
                    suggestionDiv.classList.add('addedSuggestion');

                    // update the response message:
                    responseElement = document.getElementById(`${suggestionId}-response`);
                    responseElement.innerText = data.message;
                });
            });

            // apply the reject suggestion logic to the new suggestions:
            document.querySelectorAll('#rejectSuggestion').forEach(button => {
                button.addEventListener('click', async (e) => {
                    const suggestionId = e.target.parentElement.parentElement.querySelector('#suggestionId').innerText;

                    // set request body:
                    let requestBody = {
                        suggestionId: suggestionId,
                        status: 'rejected'
                    };

                    // send the update request to the server:
                    const response = await fetch(`/update-suggestion-status`, {
                        method: 'POST',
                        body: JSON.stringify(requestBody),
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    const data = await response.json();
                    console.log(data);

                    // set the class of the suggestion div to rejected:
                    suggestionDiv = e.target.parentElement.parentElement;
                    suggestionDiv.classList.remove('addedSuggestion');
                    suggestionDiv.classList.remove('pendingSuggestion');
                    suggestionDiv.classList.add('rejectedSuggestion');

                    // update the response message:
                    responseElement = document.getElementById(`${suggestionId}-response`);
                    responseElement.innerText = data.message;
                });
            });
        };

        window.onload = function() {
            document.getElementById('suggestionsTypeSearch').addEventListener('change', searchSuggestions);
            document.getElementById('suggestionsSafetySearch').addEventListener('change', searchSuggestions);
            document.getElementById('suggestionsStatusSearch').addEventListener('change', searchSuggestions);
            document.getElementById('suggestionsSortOrder').addEventListener('change', searchSuggestions);
            searchSuggestions();
        }

    </script>

    <!-- get partials/_footer: -->
    <%- include('../../partials/_footer') %>
    
</body>
</html>