<!DOCTYPE html>
<html>
<head>
    <title>Creator Statistics - Booru</title>
    <link rel="stylesheet" href="/style.css">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    
    <%- include('../../partials/_headerAll') %>
    <style>
        .stat-description {
            font-size: 14px;
            color: #aaa;
            margin-top: 5px;
            margin-bottom: 15px;
            font-style: italic;
        }
        
        .stats-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            margin-bottom: 30px;
        }
        
        .stat-card {
            padding: 15px;
            min-width: 200px;
            margin: 10px;
            flex: 1 1 calc(50% - 20px);
            transition: transform 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        
        .top-posts-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
            gap: 15px;
        }
        
        .top-post-card {
            width: 200px;
            border-radius: 10px;
            overflow: hidden;
            transition: transform 0.3s ease;
            margin-bottom: 15px;
        }
        
        .top-post-card:hover {
            transform: translateY(-5px);
        }
        
        .top-post-image {
            width: 100%;
            height: 150px;
            object-fit: cover;
            border-radius: 10px 10px 0 0;
        }
        
        .top-post-info {
            padding: 10px;
        }
        
        .top-post-stats {
            display: flex;
            justify-content: space-between;
            margin-top: 5px;
        }
        
        .top-post-title {
            font-weight: bold;
            margin-bottom: 5px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .chart-controls {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .chart-control-btn {
            padding: 8px 15px;
            background-color: rgba(0, 0, 0, 0.2);
            border: 1px solid var(--highlight-colour);
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .chart-control-btn:hover {
            background-color: rgba(0, 0, 0, 0.4);
        }
        
        .chart-control-btn.active {
            background-color: var(--highlight-colour);
            font-weight: bold;
        }
        
        .chart-container {
            position: relative;
            height: 400px;
            margin-bottom: 20px;
        }
        
        .chart-wrapper {
            display: none;
            height: 100%;
        }
        
        .chart-wrapper.active {
            display: block;
        }
        
        .stat-period {
            margin-bottom: 15px;
        }
        
        .stat-value {
            font-size: 24px;
            font-weight: bold;
        }
        
        .stat-change {
            font-size: 14px;
            margin-left: 8px;
        }
        
        .stat-label {
            margin-top: 5px;
        }
        
        /* Responsive layout for desktop */
        @media (min-width: 992px) {
            .desktop-layout {
                display: grid;
                grid-template-columns: 2fr 1fr;
                gap: 20px;
            }
            
            .stat-card {
                flex: 1 1 calc(25% - 20px);
            }
            
            .charts-section {
                grid-column: 1;
                grid-row: 1;
                margin-top: 0;
            }
            
            .stats-container {
                grid-column: 2;
                display: grid;
                grid-template-columns: 1fr;
                gap: 15px;
                margin-top: 0;
            }
            
            .top-posts-section {
                grid-column: 1 / span 2;
                grid-row: 2;
            }
        }
    </style>
</head>
<body>
    <%- include('../../partials/_navigation') %>

    <div class="center-fully-no-flex" style="margin-bottom: 1rem;">
        <%- include('../../partials/_bannerAdvert') %>
    </div>

    <div class="page-content">
        <div class="round-frosted mw75-dynamic" style="padding: 20px; margin-bottom: 20px;">
            <h1 class="center-fully-no-flex">Creator Statistics</h1>
            
            <% if (!userStats || !session.accountId) { %>
                <p class="center-fully-no-flex">Please log in to view your statistics.</p>
            <% } else { %>
                <div class="desktop-layout">
                    <!-- Stats Cards Section -->
                    <div class="stats-container" id="statsContainer">
                        <!-- Stats cards will be generated by JavaScript -->
                    </div>
                    
                    <!-- Unified Charts Section -->
                    <div class="round-frosted charts-section" style="padding: 20px; margin-bottom: 20px;">
                        <h3 class="center-fully-no-flex">Statistics Over Time</h3>
                        <p class="stat-description center-fully-no-flex">View your performance metrics over different time periods</p>
                        
                        <div class="chart-controls">
                            <div>
                                <span>Metric:</span>
                                <button class="chart-control-btn active" data-metric="upvotes">Upvotes</button>
                                <button class="chart-control-btn" data-metric="comments">Comments</button>
                                <button class="chart-control-btn" data-metric="posts">Posts</button>
                                <button class="chart-control-btn" data-metric="engagement">Engagement</button>
                                <button class="chart-control-btn" data-metric="booruScore">Booru Score</button>
                            </div>
                            <div>
                                <span>Time Period:</span>
                                <button class="chart-control-btn active" data-period="28">28 Days</button>
                                <button class="chart-control-btn" data-period="7">7 Days</button>
                                <button class="chart-control-btn" data-period="1">24 Hours</button>
                            </div>
                        </div>
                        
                        <div class="chart-container">
                            <canvas id="unifiedChart"></canvas>
                        </div>
                    </div>
                    
                    <!-- Top Posts Section -->
                    <% if (userStats.topPosts && userStats.topPosts.length > 0) { %>
                    <div class="round-frosted top-posts-section" style="padding: 20px; margin-bottom: 20px;">
                        <h3 class="center-fully-no-flex">Your Top Posts (Last 28 Days)</h3>
                        <p class="stat-description center-fully-no-flex">These are your most engaging posts based on upvotes and comments</p>
                        
                        <div class="top-posts-container">
                            <% userStats.topPosts.forEach((post, index) => { %>
                                <div class="round-frosted top-post-card">
                                    <a href="/booru/post/<%= post.booru_id %>">
                                        <img src="<%= post.content_url %>" alt="<%= post.title || 'Booru Post' %>" class="top-post-image">
                                    </a>
                                    <div class="top-post-info">
                                        <div class="top-post-title"><%= post.title || `Post #${index+1}` %></div>
                                        <div class="top-post-stats">
                                            <span><i class="fas fa-arrow-up"></i> <%= post.upvotes.length %></span>
                                            <span><i class="fas fa-comment"></i> <%= post.comments.length %></span>
                                            <span><i class="fas fa-calendar"></i> <%= new Date(Number(post.timestamp)).toLocaleDateString() %></span>
                                        </div>
                                    </div>
                                </div>
                            <% }) %>
                        </div>
                    </div>
                    <% } %>
                </div>
            <% } %>
        </div>
    </div>

    <% if (userStats && session.accountId) { %>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Stats data from server
            const statsData = <%- JSON.stringify(userStats) %>;
            
            // Helper functions for generating UI elements
            function getChangeColor(change) {
                return change > 0 ? 'lightgreen' : change < 0 ? 'salmon' : 'gray';
            }
            
            function getChangeArrow(change) {
                return change > 0 ? '↑' : change < 0 ? '↓' : '→';
            }
            
            function formatStatValue(value, isRate = false) {
                return isRate ? value.toFixed(2) : value.toString();
            }
            
            function createStatPeriod(value, change, label, isRate = false) {
                const color = getChangeColor(change);
                const arrow = getChangeArrow(change);
                const formattedValue = formatStatValue(value, isRate);
                
                return `
                    <div class="stat-period">
                        <div class="stat-value">
                            ${formattedValue}
                            <span class="stat-change" style="color: ${color};">
                                ${arrow} ${Math.abs(change)}%
                            </span>
                        </div>
                        <div class="stat-label">${label}</div>
                    </div>
                `;
            }
            
            function createStatCard(title, description, periods, isRate = false) {
                const periodsHtml = periods.map(period => 
                    createStatPeriod(period.value, period.change, period.label, isRate)
                ).join('');
                
                return `
                    <div class="round-frosted stat-card">
                        <h3>${title}</h3>
                        <p class="stat-description">${description}</p>
                        ${periodsHtml}
                    </div>
                `;
            }
            
            function createBooruScoreCard() {
                const { totalStats, followerCount } = statsData;
                return `
                    <div class="round-frosted stat-card">
                        <h3>Booru Score</h3>
                        <p class="stat-description">Your overall content score based on upvotes and comments</p>
                        <div class="stat-period">
                            <div class="stat-value">${totalStats.booruScore.toFixed(2)}</div>
                            <div style="font-size: 14px; color: #aaa; margin-top: 5px;">
                                Raw score: ${totalStats.rawBooruScore.toFixed(2)} × ${totalStats.followerBoost.toFixed(2)} (follower boost)
                            </div>
                            <div class="stat-label">All-time score</div>
                        </div>
                        <div style="margin-top: 15px;">
                            <div style="font-size: 16px; margin-bottom: 5px;">
                                <i class="fas fa-arrow-up"></i> ${totalStats.upvotes} upvotes
                            </div>
                            <div style="font-size: 16px; margin-bottom: 5px;">
                                <i class="fas fa-comment"></i> ${totalStats.comments} comments
                            </div>
                            <div style="font-size: 16px; margin-bottom: 5px;">
                                <i class="fas fa-image"></i> ${totalStats.posts} posts
                            </div>
                            <div style="font-size: 14px; color: #aaa;">
                                ${followerCount} follower${followerCount !== 1 ? 's' : ''}
                            </div>
                        </div>
                    </div>
                `;
            }
            
            // Generate stats cards
            function generateStatsCards() {
                const cardConfigs = [
                    {
                        title: 'Upvotes',
                        description: 'Total number of upvotes received on your posts',
                        periods: [
                            { value: statsData.last24Hours.upvotes, change: statsData.last24Hours.upvotesChange, label: 'Last 24 hours' },
                            { value: statsData.last7Days.upvotes, change: statsData.last7Days.upvotesChange, label: 'Last 7 days' },
                            { value: statsData.last28Days.upvotes, change: statsData.last28Days.upvotesChange, label: 'Last 28 days' }
                        ]
                    },
                    {
                        title: 'Comments',
                        description: 'Number of comments received on your posts',
                        periods: [
                            { value: statsData.last24Hours.comments, change: statsData.last24Hours.commentsChange, label: 'Last 24 hours' },
                            { value: statsData.last7Days.comments, change: statsData.last7Days.commentsChange, label: 'Last 7 days' },
                            { value: statsData.last28Days.comments, change: statsData.last28Days.commentsChange, label: 'Last 28 days' }
                        ]
                    },
                    {
                        title: 'Posts',
                        description: 'Number of booru posts you\'ve created',
                        periods: [
                            { value: statsData.last24Hours.posts, change: statsData.last24Hours.postsChange, label: 'Last 24 hours' },
                            { value: statsData.last7Days.posts, change: statsData.last7Days.postsChange, label: 'Last 7 days' },
                            { value: statsData.last28Days.posts, change: statsData.last28Days.postsChange, label: 'Last 28 days' }
                        ]
                    },
                    {
                        title: 'Engagement Rate',
                        description: 'Average upvotes received per post — higher is better!',
                        periods: [
                            { value: statsData.last24Hours.engagementRate, change: statsData.last24Hours.engagementRateChange, label: 'Last 24 hours' },
                            { value: statsData.last7Days.engagementRate, change: statsData.last7Days.engagementRateChange, label: 'Last 7 days' },
                            { value: statsData.last28Days.engagementRate, change: statsData.last28Days.engagementRateChange, label: 'Last 28 days' }
                        ],
                        isRate: true
                    }
                ];
                
                const statsContainer = document.getElementById('statsContainer');
                
                // Generate regular stat cards
                cardConfigs.forEach(config => {
                    statsContainer.innerHTML += createStatCard(
                        config.title, 
                        config.description, 
                        config.periods, 
                        config.isRate
                    );
                });
                
                // Add the special Booru Score card
                statsContainer.innerHTML += createBooruScoreCard();
            }
            
            // Initialize stats cards
            generateStatsCards();
            
            // Chart data and functionality
            const chartData = {
                labels: <%- JSON.stringify(userStats.dailyLabels) %>,
                upvotes: <%- JSON.stringify(userStats.dailyUpvotes) %>,
                comments: <%- JSON.stringify(userStats.dailyComments) %>,
                posts: <%- JSON.stringify(userStats.dailyPosts) %>,
                engagement: <%- JSON.stringify(userStats.dailyEngagement) %>,
                booruScore: <%- JSON.stringify(userStats.dailyBooruScores || []) %>
            };
            
            // Chart functionality
            function initializeChart() {
                // Use real hourly data from backend instead of fake distribution
                const hourlyLabels = <%- JSON.stringify(userStats.hourlyLabels || []) %>;
                const hourlyData = {
                    upvotes: <%- JSON.stringify(userStats.hourlyUpvotes || []) %>,
                    comments: <%- JSON.stringify(userStats.hourlyComments || []) %>,
                    posts: <%- JSON.stringify(userStats.hourlyPosts || []) %>,
                    engagement: <%- JSON.stringify(userStats.hourlyEngagement || []) %>,
                    booruScore: <%- JSON.stringify(userStats.hourlyBooruScores || []) %>
                };
                
                const metricConfig = {
                    upvotes: { color: 'rgba(75, 192, 192, 0.8)', label: 'Upvotes' },
                    comments: { color: 'rgba(255, 159, 64, 0.8)', label: 'Comments' },
                    posts: { color: 'rgba(54, 162, 235, 0.8)', label: 'Posts' },
                    engagement: { color: 'rgba(153, 102, 255, 0.8)', label: 'Engagement Rate' },
                    booruScore: { color: 'rgba(255, 99, 132, 0.8)', label: 'Booru Score' }
                };
                
                const ctx = document.getElementById('unifiedChart').getContext('2d');
                let currentMetric = 'upvotes';
                let currentPeriod = 28;
                let chart;
                
                function updateChart() {
                    let labels, data;
                    
                    if (currentPeriod === 1) {
                        // Use real hourly data for 24-hour view
                        labels = hourlyLabels;
                        data = hourlyData[currentMetric];
                    } else {
                        // Use daily data for longer periods
                        const daysToUse = Math.min(currentPeriod, chartData.labels.length);
                        const startIdx = Math.max(0, chartData.labels.length - daysToUse);
                        labels = chartData.labels.slice(startIdx);
                        data = chartData[currentMetric].slice(startIdx);
                    }
                    
                    if (chart) chart.destroy();
                    
                    chart = new Chart(ctx, {
                        type: currentMetric === 'posts' ? 'bar' : 'line',
                        data: {
                            labels,
                            datasets: [{
                                label: metricConfig[currentMetric].label,
                                data,
                                backgroundColor: metricConfig[currentMetric].color,
                                borderColor: metricConfig[currentMetric].color,
                                borderWidth: 1,
                                tension: 0.3,
                                fill: true
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: { 
                                    beginAtZero: true, 
                                    title: { display: true, text: metricConfig[currentMetric].label },
                                    ticks: {
                                        callback: function(value) {
                                            // Format decimal values for engagement and booru score
                                            if (currentMetric === 'engagement' || currentMetric === 'booruScore') {
                                                return value.toFixed(2);
                                            }
                                            return value;
                                        }
                                    }
                                },
                                x: { title: { display: true, text: currentPeriod === 1 ? 'Hour' : 'Date' } }
                            },
                            plugins: { 
                                legend: { display: true, position: 'top' },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            const label = context.dataset.label || '';
                                            const value = context.parsed.y;
                                            
                                            // Format decimal values for engagement and booru score
                                            if (currentMetric === 'engagement' || currentMetric === 'booruScore') {
                                                return `${label}: ${value.toFixed(2)}`;
                                            }
                                            return `${label}: ${value}`;
                                        }
                                    }
                                }
                            },
                            animation: { duration: 500 }
                        }
                    });
                }
                
                // Event listeners for chart controls
                document.querySelectorAll('.chart-control-btn[data-metric]').forEach(button => {
                    button.addEventListener('click', function() {
                        document.querySelectorAll('.chart-control-btn[data-metric]').forEach(btn => btn.classList.remove('active'));
                        this.classList.add('active');
                        currentMetric = this.getAttribute('data-metric');
                        updateChart();
                    });
                });
                
                document.querySelectorAll('.chart-control-btn[data-period]').forEach(button => {
                    button.addEventListener('click', function() {
                        document.querySelectorAll('.chart-control-btn[data-period]').forEach(btn => btn.classList.remove('active'));
                        this.classList.add('active');
                        currentPeriod = parseInt(this.getAttribute('data-period'));
                        updateChart();
                    });
                });
                
                updateChart();
            }
            
            // Initialize chart
            initializeChart();
        });
    </script>
    <% } %>

    <%- include('../../partials/_footer') %>
</body>
</html> 