<!-- setup basic html template with metadata etc: -->
<html>
<head>
    <title>Booru | JSCammie.com</title>
    <!-- metadata: -->
    <meta name="description" content="SFW/NSFW Image Booru for JSCammie.com"/>
    <meta name="keywords" content="ai booru, booru, images, ai generated, sfw, nsfw, extreme, fetish, score, sdxl, sd 1.5, flux, suggestive, ai image board"/>
    <meta name="author" content="JSCammie"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>


    <link rel='stylesheet' href='/style.css'/>
    
    <%- include('../../partials/_headerAll') %>
    
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-K3KJJKS1R4"></script>
    <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'G-K3KJJKS1R4');
    </script>

    <!-- load booruStyle.css -->
    <link rel='stylesheet' href='/booruStyle.css'/>
    
</head>
<body>

    <!-- get partials/_navigation: -->
    <%- include('../../partials/_navigation') %>

    <div class="center-fully-no-flex" style="margin-bottom: 1rem;">
        <%- include('../../partials/_bannerAdvert') %>
    </div>

    <div class="round-frosted page-content" style="padding: 40px; justify-content: center;">

        <div class="searchDiv">
            <div id="searchResultsDiv"></div>
            <input id="searchInput" type="text" placeholder="Search..." style="width: 100%; padding: 10px; border-radius: 10px; margin-bottom: 20px;" />
            <br>
            <select id="searchSorting">
                <option value="trending">üî• Trending</option>
                <option value="votes">‚¨ÜÔ∏è Votes</option>
                <option value="recent">‚è±Ô∏è Recent</option>
            </select>
            <br>
            <div id="safetyCheckboxes">
                <!-- the user may not have a profile to check against: -->
                <% if (userProfile?.badges?.moderator) { %>
                    <label for="naCheckbox">N/A</label>
                    <input type="checkbox" id="naCheckbox" name="naCheckbox" value="na">
                    <label for="sfwCheckbox">SFW</label>
                    <input type="checkbox" id="sfwCheckbox" name="sfwCheckbox" value="sfw">
                    <br>
                    <label for="suggestiveCheckbox">Suggestive</label>
                    <input type="checkbox" id="suggestiveCheckbox" name="suggestiveCheckbox" value="suggestive">
                    <label for="nsfwCheckbox">NSFW</label>
                    <input type="checkbox" id="nsfwCheckbox" name="nsfwCheckbox" value="nsfw">
                    <label for="extremeCheckbox">EXTREME</label>
                    <input type="checkbox" id="extremeCheckbox" name="extremeCheckbox" value="extreme">
                <% } else { %>
                    <!-- na hidden -->
                    <input type="hidden" id="naCheckbox" name="naCheckbox" value="na">
                    <label for="sfwCheckbox">SFW</label>
                    <input type="checkbox" id="sfwCheckbox" name="sfwCheckbox" value="sfw">
                    <br>
                    <label for="suggestiveCheckbox">Suggestive</label>
                    <input type="checkbox" id="suggestiveCheckbox" name="suggestiveCheckbox" value="suggestive">
                    <label for="nsfwCheckbox">NSFW</label>
                    <input type="checkbox" id="nsfwCheckbox" name="nsfwCheckbox" value="nsfw">
                    <label for="extremeCheckbox">EXTREME</label>
                    <input type="checkbox" id="extremeCheckbox" name="extremeCheckbox" value="extreme">
                <% } %>
            </div>
            <br>
            <button id="searchButton" style="padding: 10px; border-radius: 10px; margin-bottom: 20px;">Search</button>
        </div>

        <script>
            <%- booruSearchScript %>

            booruSearchInitialize()
        </script>

        <style>
            
            /* styling to make the moreInfoDropdown more visually appealing and to give the user(s) feedback */
            .moreInfoDropdown {
                padding: 10px;
                border-radius: 10px;
                margin-bottom: 20px;
                border: 1px solid rgba(100, 100, 255, 0.3);
            }

            .moreInfoDropdown summary {
                cursor: pointer;
                background-color: rgba(100, 100, 255, 0.3);
                border-radius: 10px;
                padding: 4px
            }

            .moreInfoDropdown p {
                margin-top: 10px;
            }

            .moreInfoDropdown:hover {
                background-color: rgba(100, 100, 255, 0.3);
            }
            

        </style>
        
        <h2>User Booru!</h2>
        <details class="moreInfoDropdown">
            <summary>What is this?</summary>
            <p>
                Here you can view all the images that have been uploaded to the booru!
                <br>
                Images are sorted and filtered by the options above!
                <br>
                Click on an image to view it in full size!
                <br>
                You can upload generated images once you are logged in either on the <a href="/" target="_blank">AI Generator itself</a>, or in the <a href="/image-history">Image History</a> page!
                <% if (userProfile?.accountId) { %>
                    <br>
                    Click the ‚¨ÜÔ∏è and ‚¨áÔ∏è buttons to upvote and downvote images!
                    <br>
                    Click <a href="/profile/<%=userProfile.accountId%>">here</a> to view your profile!
                <% } %>
            </p>
        </details>
        <br>
        
        <div id="booruPosts" class="booruPostsGrid"></div>
        <div id="pageControls" class="pageControls"></div>

        <br>

        <!-- Add a modal for banning the user -->
        <div id="banModal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="closeBanModal()">&times;</span>
                <h3>Ban User from Booru</h3>
                <label for="banReason">Reason for ban:</label>
                <textarea id="banReason" rows="4" cols="50" placeholder="Enter the reason..."></textarea>
                <br>
                <button onclick="banUser()">Ban</button>
                <button onclick="closeBanModal()">Cancel</button>
            </div>
        </div>

        <style>
            /* Modal styling */
            .modal {
                display: none; /* Hidden by default */
                position: absolute;
                z-index: 9999; /* Sit on top */
                left: 0;
                top: 0;
                width: 100%; /* Full width */
                height: 100%; /* Full height */
                overflow: auto; /* Enable scroll if needed */
                background-color: rgba(0, 0, 0, 0.5);
                justify-content: center;
                align-items: center;
                width: 100%;
                height: 100%;
            }

            .modal-content {
                background-color: #3b0000;
                margin: 15% auto; /* 15% from the top and centered */
                padding: 20px;
                border: 1px solid #888;
                width: 80%; /* Could be more or less, depending on screen size */
                display: none; /* Hidden by default */
                border-radius: 10px;
                flex-direction: column;
                top: 0;
            }

            .close {
                position: absolute;
                top: 10px;
                right: 15px;
                cursor: pointer;
                font-size: 20px;
            }
        </style>

        <script>
            // Function to show the ban modal
            function showBanModal(accountId) {
                document.getElementById("banModal").style.display = "flex";
                // set the modal-content to be visible:
                document.querySelector(".modal-content").style.display = "block";
                window.banAccountId = accountId; // Store the account ID for later use
            }

            // Function to close the ban modal
            function closeBanModal() {
                document.getElementById("banModal").style.display = "none";
                document.querySelector(".modal-content").style.display = "none";
            }
            
            // Function to adjust the modal's position when scrolling
            function adjustModalPosition() {
                const modalContent = document.querySelector(".modal-content");
                modalContent.style.position = "absolute";
                modalContent.style.top = window.scrollY + "px"; // Adjust top position based on scroll
            }
            window.onscroll = function() {
                adjustModalPosition();
            };



            // Function to ban the user
            function banUser() {
                const reason = document.getElementById("banReason").value;
                if (!reason) {
                    alert("Please provide a reason for the ban.");
                    return;
                }

                // // Send the ban request (replace with your ban API logic)
                // alert(`Banning user ${window.banAccountId} for reason: ${reason}, booruId: ${booruId}`);
                // ask the user to confirm the ban:
                if (confirm(`Are you sure you want to ban this user?`)) {
                    // send the ban request:
                    fetch(`/booru/ban/${window.banAccountId}`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            reason: reason,
                        }),
                    })
                        .then((res) => res.json())
                        .then((data) => {
                            console.log(data);
                            if (data.status == "success") {
                                alert("User has been banned successfully from the booru.");
                            } else {
                                alert("Failed to ban user. Please try again later.");
                            }
                        })
                        .catch((err) => {
                            console.error(err);
                            alert("Failed to ban user. Please try again later.");
                        });
                }

                // Close the modal after banning
                closeBanModal();
                
            }
        </script>

        <script>
            let masterBooruData = {}

            <% booruImages.forEach(image => { %>
                masterBooruData[`<%=image.booru_id%>`] = {
                    booru_id: `<%=image.booru_id%>`,
                    account_id: `<%=image.account_id%>`,
                    image_id: `<%=image.image_id%>`,
                    prompt: `<%=image.prompt%>`,
                    negative_prompt: `<%=image.negative_prompt%>`,
                    model: `<%=image.model%>`,
                    aspect_ratio: `<%=image.aspect_ratio%>`,
                    loras: `<%=image.loras%>`,
                    lora_strengths: `<%=image.lora_strengths%>`,
                    steps: `<%=image.steps%>`,
                    cfg: `<%=image.cfg%>`,
                    seed: `<%=image.seed%>`,
                    content_url: `<%=image.content_url%>`,
                    thumbnailMade: Boolean(<%=image.thumbnailMade%>),
                    timestamp: `<%=image.timestamp%>`,
                    safety: `<%=image.safety%>`,
                    upvotes: <%- JSON.stringify(image.upvotes) %>,
                    downvotes: <%- JSON.stringify(image.downvotes) %>,
                }
            <% }) %>


            var userProfile = {
                accountId: "<%=userProfile?.accountId? userProfile.accountId : ''%>",
                badges: {
                    owner: <%=userProfile?.badges?.owner? userProfile.badges.owner : false%>,
                    moderator: <%=userProfile?.badges?.moderator? userProfile.badges.moderator : false%>
                }
            }

            async function setRating(rating, booruId) {
                    
                body = {
                    rating: rating,
                    booru_id: booruId
                }

                let response = await fetch(`/booru/setRating`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(body)
                })

                let data = await response.json()

                console.log(data)

                if (data.status !== "success") {
                    await globalAlert({
                        message: "Failed to set rating. Please try again later.",
                        question: false
                    })
                } else {
                
                    // remove the post from the grid:
                    let postDiv = document.getElementById(`booruPostDiv-${booruId}`)

                    postDiv.remove()

                    // remove the post from the masterBooruData object:
                    delete masterBooruData[booruId]

                    // if the masterBooruData is empty, refresh the page:
                    if (Object.keys(masterBooruData).length == 0) {
                        window.location.reload()
                    }
                
                }
            
            }

            function setupBooruPosts() {
                let booruPosts = document.getElementById("booruPosts")
                booruPosts.innerHTML = ""

                for (const [key, value] of Object.entries(masterBooruData)) {
                    
                    let newContentUrl = ""

                    if (value.thumbnailMade) {
                        newContentUrl = value.content_url.split(".png")[0] + "-thumb.png"
                    } else {
                        newContentUrl = value.content_url
                    }

                    console.log(newContentUrl)

                    let dropdownHTML = ``

                    console.log(userProfile)

                    if (userProfile.badges.moderator) {
                        dropdownHTML = `
                            <button class="dropdownButton" onclick="document.getElementById('dropdown${value.booru_id}')?.classList.toggle('show')">‚ãÆ</button>
                            <div class="dropdown" id="dropdown${value.booru_id}">
                                <a href="/booru/delete/${value.booru_id}">Delete</a>
                                <button onclick="setRating('extreme', '${value.booru_id}')">Set EXTREME</button>
                                <button onclick="setRating('nsfw', '${value.booru_id}')">Set NSFW</button>
                                <button onclick="setRating('suggestive', '${value.booru_id}')">Set Suggestive</button>
                                <button onclick="setRating('sfw', '${value.booru_id}')">Set SFW</button>
                                <a href="#" onclick="showBanModal('${value.account_id}')">Ban User</a>
                            </div>
                        `;
                    }

                    let booruThumbnailHTML = `
                        <img src="${newContentUrl}" alt="Booru Image" style="max-width: 100%;" loading="lazy"/>
                    `

                    let postDiv = ``
                    let moderatorPrompt = ``

                    if (userProfile?.badges?.moderator) { 
                        moderatorPrompt = `
                            <p>Prompt: ${value.prompt}</p>
                            `
                    }


                    if (value.safety == "na" && userProfile.accountId != value.account_id && value.safety == "na" && !userProfile.badges.moderator) {
                        return
                    } else {
                        postDiv = `
                        <div class="booruPost" id="booruPostDiv-${value.booru_id}">
                            <p>${value.safety.toUpperCase()}</p>
                            <div class="postButtons">
                                ${dropdownHTML}
                            </div>
                            <a href="/booru/post/${value.booru_id}" target="_blank">
                                ${booruThumbnailHTML}
                            </a>
                            <div class="votesDiv">
                                <button id="upvoteButton${value.booru_id}" onclick="votePost('upvote', '${value.booru_id}')">${value.upvotes.length} ‚¨ÜÔ∏è</button>
                                <button id="downvoteButton${value.booru_id}" onclick="votePost('downvote', '${value.booru_id}')">${value.downvotes.length} ‚¨áÔ∏è</button>
                            </div>
                            ${moderatorPrompt}
                                
                        </div>
                    `
                    }
                    // add the post to the grid
                    booruPosts.innerHTML += postDiv
                }

                let pageControls = document.getElementById("pageControls")

                // add pageButtons class to the pageControls div:
                pageControls.classList.add("pageButtons")

                for (let i = 0; i < <%=totalPages%>; i++) {
                    let pageButton = document.createElement("button")
                    pageButton.innerHTML = i + 1
                    pageButton.onclick = () => {
                        // get the current url:
                        let url = window.location.href
                        // replace the number after ?page= with the new page number, keeping the stuff after in unchanged:
                        let newUrl = url.replace(/page=\d+/, `page=${i+1}`)
                        window.location.href = newUrl
                    }
                    pageControls.appendChild(pageButton)
                }

                // give all the buttons the class "pageButtons":
                let pageButtons = document.querySelectorAll(".pageControls button")
                pageButtons.forEach(button => {
                    // if the page param url is the same as the page button, make it have the class active:
                    console.log(`page=${button.innerHTML}`)
                    // split the url on ?page= and check if the number is after it:
                    splitUrl = window.location.href.split("?page=")
                    pageNumber = splitUrl[1].split("&")[0]
                    console.log(pageNumber)
                    if (pageNumber == button.innerHTML) {
                        button.classList.add("active")
                    }

                })

            }

            window.onload = function() {
                setupBooruPosts()
                adjustModalPosition()
            }

        </script>

    </div>

    <!-- get partials/_footer: -->
    <%- include('../../partials/_footer') %>
    
</body>
</html>