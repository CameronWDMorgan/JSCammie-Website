<!-- setup basic html template with metadata etc: -->
<html>
<head>
    <title>Booru | JSCammie.com</title>
    <!-- metadata: -->
    <meta name="description" content="SFW/NSFW Image Booru for JSCammie.com"/>
    <meta name="keywords" content="ai booru, booru, images, ai generated, sfw, nsfw, extreme, fetish, score, sdxl, sd 1.5, flux, suggestive, ai image board"/>
    <meta name="author" content="JSCammie"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>


    <link rel='stylesheet' href='/style.css'/>
    
    <%- include('../../partials/_headerAll') %>
    
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-K3KJJKS1R4"></script>
    <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'G-K3KJJKS1R4');
    </script>

    <!-- load booruStyle.css -->
    <link rel='stylesheet' href='/booruStyle.css'/>
    
</head>
<body>

    <!-- get partials/_navigation: -->
    <%- include('../../partials/_navigation') %>

    <!-- Add a modal for banning the user -->
    <div id="banModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeBanModal()">&times;</span>
            <h3>Ban User from Booru</h3>
            <label for="banReason">Reason for ban:</label>
            <textarea id="banReason" rows="4" cols="50" placeholder="Enter the reason..."></textarea>
            <br>
            <button onclick="banUser()">Ban</button>
            <button onclick="closeBanModal()">Cancel</button>
        </div>
    </div>

    <br>

    <script>
    
        function setDeleteReason(reason) {
            document.getElementById("deleteReason").value = reason;
            deletePost();
        }
    
    </script>

    <div id="deleteModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeDeleteModal()">&times;</span>
            <h3>Delete Post</h3>
            <p>Are you sure you want to delete this post?</p>
            <label for="deleteReason">Reason for deletion:</label>
            <textarea id="deleteReason" rows="4" cols="50" placeholder="Enter the reason..."></textarea> <br> 

            <!-- confirm button: -->
            <button onclick="deletePost()">Delete</button>

            <button onclick="closeDeleteModal()">Cancel</button>
        </div>
    </div>

    <style>
        /* Modal styling */
        .modal {
            display: none; /* Hidden by default */
            position: absolute;
            z-index: 9999; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            width: 100%;
            height: 100%;
        }

        .modal-content {
            background-color: #3b0000;
            margin: 15% auto; /* 15% from the top and centered */
            padding: 20px;
            border: 1px solid #888;
            width: 80%; /* Could be more or less, depending on screen size */
            display: none; /* Hidden by default */
            border-radius: 10px;
            flex-direction: column;
            top: 0;
        }

        .close {
            position: absolute;
            top: 10px;
            right: 15px;
            cursor: pointer;
            font-size: 20px;
        }
    </style>

    <div class="center-fully-no-flex" style="margin-bottom: 1rem;">
        <%- include('../../partials/_bannerAdvert') %>
    </div>

    <div class="round-frosted page-content" style="padding: 40px; justify-content: center;">

        <style>

        .autoCompleteDropdown {
            padding: 10px;
            border-radius: 10px;
            margin-bottom: 20px;
            border: 1px solid rgba(100, 100, 255, 0.3);
        }

        .autoCompleteDropdown summary {
            cursor: pointer;
            background-color: rgba(100, 100, 255, 0.3);
            border-radius: 10px;
            padding: 4px
        }

        .autoCompleteDropdown:hover {
            border: 1px solid rgba(255, 255, 255, 0.7);
        }

        </style>

        <div class="searchDiv">
            <details id="autoCompleteDropdown" class="autoCompleteDropdown">
                <summary>Auto Complete Results</summary>
                <div id="searchResultsDiv"></div>
            </details>
            <input id="searchInput" type="text" placeholder="Search..." style="width: 100%; padding: 10px; border-radius: 10px; margin-bottom: 20px;" />
            <br>
            <select id="searchSorting">
                <option value="trending">üî• Trending</option>
                <option value="following">ü§ç Following</option>
                <option value="votes">‚¨ÜÔ∏è Votes</option>
                <option value="recent">‚è±Ô∏è Recent</option>
            </select>
            <br>
            <div id="safetyCheckboxes">
                <!-- the user may not have a profile to check against: -->
                <% if (userProfile?.badges?.moderator) { %>
                    <label for="naCheckbox">N/A</label>
                    <input type="checkbox" id="naCheckbox" name="naCheckbox" value="na">
                    <label for="sfwCheckbox">SFW</label>
                    <input type="checkbox" id="sfwCheckbox" name="sfwCheckbox" value="sfw">
                    <br>
                    <label for="suggestiveCheckbox">Suggestive</label>
                    <input type="checkbox" id="suggestiveCheckbox" name="suggestiveCheckbox" value="suggestive">
                    <label for="nsfwCheckbox">NSFW</label>
                    <input type="checkbox" id="nsfwCheckbox" name="nsfwCheckbox" value="nsfw">
                    <label for="extremeCheckbox">EXTREME</label>
                    <input type="checkbox" id="extremeCheckbox" name="extremeCheckbox" value="extreme">
                <% } else { %>
                    <!-- na hidden -->
                    <input type="hidden" id="naCheckbox" name="naCheckbox" value="na">
                    <label for="sfwCheckbox">SFW</label>
                    <input type="checkbox" id="sfwCheckbox" name="sfwCheckbox" value="sfw">
                    <br>
                    <label for="suggestiveCheckbox">Suggestive</label>
                    <input type="checkbox" id="suggestiveCheckbox" name="suggestiveCheckbox" value="suggestive">
                    <label for="nsfwCheckbox">NSFW</label>
                    <input type="checkbox" id="nsfwCheckbox" name="nsfwCheckbox" value="nsfw">
                    <label for="extremeCheckbox">EXTREME</label>
                    <input type="checkbox" id="extremeCheckbox" name="extremeCheckbox" value="extreme">
                <% } %>
            </div>
            <br>
            <button id="searchButton" style="padding: 10px; border-radius: 10px; margin-bottom: 20px;">Search</button>
        </div>

        <script>
            <%- booruSearchScript %>

            booruSearchInitialize()
        </script>

        <style>
            
            /* styling to make the moreInfoDropdown more visually appealing and to give the user(s) feedback */
            .moreInfoDropdown {
                padding: 10px;
                border-radius: 10px;
                margin-bottom: 20px;
                border: 1px solid rgba(100, 100, 255, 0.3);
            }

            .moreInfoDropdown summary {
                cursor: pointer;
                background-color: rgba(100, 100, 255, 0.3);
                border-radius: 10px;
                padding: 4px
            }

            .moreInfoDropdown p {
                margin-top: 10px;
            }

            .moreInfoDropdown:hover {
                background-color: rgba(100, 100, 255, 0.3);
            }
            

        </style>
        
        <h2>User Booru!</h2>
        <details class="moreInfoDropdown">
            <summary>What is this?</summary>
            <p>
                Here you can view all the images that have been uploaded to the booru!
                <br>
                Images are sorted and filtered by the options above!
                <br>
                Click on an image to view it in full size!
                <br>
                You can upload generated images once you are logged in either on the <a href="/" target="_blank">AI Generator itself</a>, or in the <a href="/image-history">Image History</a> page!
                <% if (userProfile?.accountId) { %>
                    <br>
                    Click the ‚¨ÜÔ∏è and ‚¨áÔ∏è buttons to upvote and downvote images!
                    <br>
                    Click <a href="/profile/<%=userProfile.accountId%>">here</a> to view your profile!
                <% } %>
            </p>
        </details>
        <br>
        
        <div id="booruPosts" class="booruPostsGrid"></div>
        <div id="pageControls" class="pageControls"></div>

        <br>

        <script>
            let masterBooruData = {}

            // class="${value.downvotedOn == true ? 'downvoted' : ''}"

            var masterAccountData = {}
            <% booruAccounts.forEach(account => { %>
                masterAccountData[`<%=account.accountId%>`] = {
                    accountId: `<%=account.accountId%>`,
                    username: `<%=account.username%>`,
                    profileImg: `<%=account.profileImg%>`,
                    level: `<%=account.level%>`,
                }
            <% }) %>

            <% booruImages.forEach(image => { %>
                masterBooruData[`<%=image.booru_id%>`] = {
                    booru_id: `<%=image.booru_id%>`,
                    account_id: `<%=image.account_id%>`,
                    image_id: `<%=image.image_id%>`,
                    prompt: `<%=image.prompt%>`,
                    negative_prompt: `<%=image.negative_prompt%>`,
                    model: `<%=image.model%>`,
                    aspect_ratio: `<%=image.aspect_ratio%>`,
                    loras: `<%=image.loras%>`,
                    lora_strengths: `<%=image.lora_strengths%>`,
                    steps: `<%=image.steps%>`,
                    cfg: `<%=image.cfg%>`,
                    seed: `<%=image.seed%>`,
                    content_url: `<%=image.content_url%>`,
                    thumbnailMade: Boolean(<%=image.thumbnailMade%>),
                    timestamp: `<%=image.timestamp%>`,
                    safety: `<%=image.safety%>`,
                    score: `<%= image.score %>`,
                    upvotes: <%- JSON.stringify(image.upvotes) %>,
                    downvotes: <%- JSON.stringify(image.downvotes) %>,
                    comments: `<%=image.comments?.length? image.comments.length : 0%>`,
                    }
            <% }) %>

            var userProfile = {
                accountId: "<%=userProfile?.accountId? userProfile.accountId : ''%>",
                badges: {
                    owner: <%=userProfile?.badges?.owner? userProfile.badges.owner : false%>,
                    moderator: <%=userProfile?.badges?.moderator? userProfile.badges.moderator : false%>
                }
            }

            var masterUpvoteAccountData = {}
            <% upvoteAccounts.forEach(account => { %>
                masterUpvoteAccountData[`<%=account.accountId%>`] = {
                    accountId: `<%=account.accountId%>`,
                    username: `<%=account.username%>`,
                    profileImg: `<%=account.profileImg%>`,
                    level: `<%=account.level%>`,
                }
            <% }) %>

            var masterDownvoteAccountData = {}
            <% downvoteAccounts.forEach(account => { %>
                masterDownvoteAccountData[`<%=account.accountId%>`] = {
                    accountId: `<%=account.accountId%>`,
                    username: `<%=account.username%>`,
                    profileImg: `<%=account.profileImg%>`,
                    level: `<%=account.level%>`,
                }
            <% }) %>

            console.log(`masterDownvoteAccountData: `, masterDownvoteAccountData)

            function showBanModal(accountId) {
                document.getElementById("banModal").style.display = "flex";
                // set the modal-content to be visible:
                document.querySelector(".modal-content").style.display = "block";
                window.banAccountId = accountId; // Store the account ID for later use
            }

            // Function to close the ban modal
            function closeBanModal() {
                document.getElementById("banModal").style.display = "none";
                document.querySelector(".modal-content").style.display = "none";
            }
            
            // Function to adjust the modal's position when scrolling
            function adjustModalPosition() {
                // const modalContent = document.querySelector(".modal-content");
                // modalContent.style.position = "absolute";
                // modalContent.style.top = window.scrollY + "px"; // Adjust top position based on scroll
                // there are now multiple modals, so we need to adjust the position of all of them:
                let modals = document.querySelectorAll(".modal-content");
                modals.forEach(modal => {
                    modal.style.position = "absolute";
                    modal.style.top = window.scrollY + "px"; // Adjust top position based on scroll
                });
            }

            // Function to ban the user
            async function banUser() {
                const reason = document.getElementById("banReason").value;
                if (!reason) {
                    let respose = await globalAlert({
                        message: "Please provide a reason for the ban.",
                        question: true,
                        options: {
                            okay: function (){}
                        }
                    })
                    return;
                }

                if (confirm(`Are you sure you want to ban this user?`)) {
                    // send the ban request:
                    fetch(`/booru/ban/${window.banAccountId}`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            reason: reason,
                        }),
                    })
                        .then((res) => res.json())
                        .then(async (data) => {
                            if (data.status == "success") {
                                // alert("User has been banned successfully.");
                                options = {
                                    message: "User has been banned successfully.",
                                    question: true,
                                    options: {
                                        okay: function (){ }
                                    }
                                }
                                let response = await globalAlert(options)
                            } else {
                                let response = await globalAlert({
                                    message: "Failed to ban user. Please try again later.",
                                    question: true,
                                    options: {
                                        okay: function (){ }
                                    }
                                })
                            }
                        })
                        .catch(async (err) => {
                            console.error(err);
                            let response = await globalAlert({
                                message: "Failed to ban user. Please try again later.",
                                question: true,
                                options: {
                                    okay: function (){ }
                                }
                            })
                        });
                }

                // Close the modal after banning
                closeBanModal();
                
            }

            function showDeleteModal(booruId) {
                document.getElementById("deleteModal").style.display = "flex";
                // set the modal-content to be visible:
                document.querySelectorAll(".modal-content").forEach(modal => {
                    modal.style.display = "block";
                });
                window.deleteBooruId = booruId; // Store the booru ID for later use
            }

            function closeDeleteModal() {
                document.getElementById("deleteModal").style.display = "none";
                document.querySelectorAll(".modal-content").forEach(modal => {
                    modal.style.display = "none";
                });
            }

            async function deletePost() {
                const reason = document.getElementById("deleteReason").value;
                if (!reason) {
                    let response = await globalAlert({
                        message: "Please provide a reason for the deletion.",
                        question: true,
                        options: {
                            okay: function (){ }
                        }
                    })
                    return;
                }

                // send the delete request:
                fetch(`/booru/delete`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        reason: reason,
                        booru_id: window.deleteBooruId,
                    }),
                })
                .then((res) => res.json())
                .then(async (data) => {
                    if (data.status == "success") {
                        // ("Post has been deleted successfully.");
                        options = {
                            message: "Post has been deleted successfully.",
                            question: true,
                            options: {
                                okay: function (){}
                            }
                        }
                        let response = await globalAlert(options)
                        let postDiv = document.getElementById(`booruPostDiv-${window.deleteBooruId}`)
                        postDiv.remove()
                    } else {
                        let respose = await globalAlert({
                            message: "Failed to delete post. Please try again later.",
                            question: true,
                            options: {
                                okay: function (){}
                            }
                        })
                    }
                })
                .catch(async (err) => {
                    console.error(err);
                    let response = await globalAlert({
                        message: "Failed to delete post. Please try again later.",
                        question: true,
                        options: {
                            okay: function (){}
                        }
                    })
                });

                // Close the modal after deletion
                closeDeleteModal();

                window.onscroll = function() {
                    adjustModalPosition();
                };
            }


            async function setRating(rating, booruId) {
                    
                body = {
                    rating: rating,
                    booru_id: booruId
                }

                // remove the post from the grid:
                let postDiv = document.getElementById(`booruPostDiv-${booruId}`)

                postDiv.remove()

                // remove the post from the masterBooruData object:
                delete masterBooruData[booruId]


                // open the dropdown for the next booru post in the list:
                let nextPost = document.getElementById(`dropdown${Object.keys(masterBooruData)[0]}`)
                if (nextPost) {
                    nextPost.classList.toggle("show")
                }

                // if the masterBooruData is empty, refresh the page:
                if (Object.keys(masterBooruData).length == 0) {
                    window.location.reload()
                }

                let response = await fetch(`/booru/setRating`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(body)
                })

                let data = await response.json()

                if (data.status !== "success") {
                    await globalAlert({
                        message: "Failed to set rating. Please try again later.",
                        question: true,
                        options: {
                            okay: function (){}
                        }
                    })
                }
            }

            function setupBooruPosts() {
                let booruPosts = document.getElementById("booruPosts");
                booruPosts.innerHTML = "";

                for (const [key, value] of Object.entries(masterBooruData)) {
                    let newContentUrl = value.thumbnailMade 
                        ? value.content_url.split(".png")[0] + "-thumb.png"
                        : value.content_url;

                    let dropdownHTML = "";
                    if (userProfile.badges.moderator) {
                        dropdownHTML = `
                            <button class="dropdownButton" onclick="document.getElementById('dropdown${value.booru_id}')?.classList.toggle('show')">‚ÑπÔ∏è</button>
                            <div class="dropdown" id="dropdown${value.booru_id}">
                                <button onclick="showDeleteModal('${value.booru_id}')">Delete Post</button>
                                <button onclick="setRating('extreme', '${value.booru_id}')">Set EXTREME</button>
                                <button onclick="setRating('nsfw', '${value.booru_id}')">Set NSFW</button>
                                <button onclick="setRating('suggestive', '${value.booru_id}')">Set Suggestive</button>
                                <button onclick="setRating('sfw', '${value.booru_id}')">Set SFW</button>
                                <button onclick="showBanModal('${value.account_id}')">Ban User</button>
                            </div>
                        `;
                    }

                    let onHoverUpvote = "";
                    let onHoverDownvote = "";

                    // above doesnt work when the profileImg is undefined, so we need to check if it is undefined first:
                    if (value.upvotes.length > 0) {
                        onHoverUpvote = `
                            <div class="upvoteHover hidden" id="upvoteHover${value.booru_id}">
                                <p class="upvoteTitle">Upvoters:</p>
                                <div class="upvoters">
                                    ${value.upvotes.map(upvote => `
                                        <a class="upvoteUser" href="https://www.jscammie.com/profile/${upvote.accountId}" target="_blank">
                                            <img class="postProfileImage" src="${masterUpvoteAccountData[upvote.accountId]?.profileImg ? masterUpvoteAccountData[upvote.accountId].profileImg : 'http://www.jscammie.com/noimagefound.png'}" alt="Upvote Profile Image" />
                                            <span>${masterUpvoteAccountData[upvote.accountId]?.username}</span>
                                        </a>
                                    `).join("")}
                                </div>
                            </div>
                        `;
                    }

                    if (value.downvotes.length > 0) {
                        onHoverDownvote = `
                            <div class="downvoteHover hidden" id="downvoteHover${value.booru_id}">
                                <p>Downvoted by:</p>
                                <div class="downvoters">
                                    ${value.downvotes.map(downvote => `
                                        <a href="https://www.jscammie.com/profile/${downvote.accountId}" target="_blank">
                                            <img class="postProfileImage" src="${masterDownvoteAccountData[downvote.accountId]?.profileImg ? masterDownvoteAccountData[downvote.accountId].profileImg : 'http://www.jscammie.com/noimagefound.png'}" alt="Downvote Profile Image" /> ${masterDownvoteAccountData[downvote.accountId]?.username}
                                        </a>
                                    `).join("")}
                                </div>
                            </div>
                        `;
                    }

                    let booruThumbnailHTML = `
                        <img src="${newContentUrl}" alt="Booru Image" style="max-width: 100%;" loading="lazy"/>
                    `;

                    let hasUpvoted = value.upvotes.some(upvote => upvote.accountId == userProfile.accountId);
                    let hasDownvoted = value.downvotes.some(downvote => downvote.accountId == userProfile.accountId);

                    let postDiv = `
                    <div class="booruPost" id="booruPostDiv-${value.booru_id}">
                        <div class="abovePost">
                            <a href="https://www.jscammie.com/profile/${value.account_id}" target="_blank">
                                <img src="${masterAccountData[value.account_id].profileImg}" alt="Profile Image" />
                            </a>
                            <div class="userDetails">
                                <p class="username">${masterAccountData[value.account_id].username}</p>
                                <p class="safety">${value.safety.toUpperCase()}</p>
                            </div>
                        </div>
                        <div class="postButtons">
                            ${dropdownHTML}
                        </div>
                        <a href="/booru/post/${value.booru_id}" target="_blank">
                            ${booruThumbnailHTML}
                        </a>
                        <div class="votesDiv">
                            <button id="upvoteButton${value.booru_id}" onclick="votePost('upvote', '${value.booru_id}')" class="${hasUpvoted ? 'voted' : ''}" data-booru-id="${value.booru_id}">${value.upvotes.length} ‚¨ÜÔ∏è</button>
                            <button id="commentButton${value.booru_id}" onclick="window.open('/booru/post/${value.booru_id}', '_blank')">${value.comments} üí¨</button>
                            <button id="downvoteButton${value.booru_id}" onclick="votePost('downvote', '${value.booru_id}')" class="${hasDownvoted ? 'voted' : ''}" data-booru-id="${value.booru_id}">${value.downvotes.length} ‚¨áÔ∏è</button>
                            ${onHoverUpvote}
                        </div>
                        ${userProfile.badges.moderator ? `<p>Score: ${value.score}</p>` : ""}
                        ${userProfile.badges.moderator ? `<p>${value.prompt}</p>` : ""}
                    </div>`;

                    booruPosts.innerHTML += postDiv;
                }

                document.querySelectorAll(".votesDiv button").forEach(button => {
                    let timeout;
                    let booruId = button.getAttribute("data-booru-id");
                    let hoverDiv = document.getElementById(button.id.includes("upvote") ? `upvoteHover${booruId}` : `downvoteHover${booruId}`);

                    if (!hoverDiv) return;

                    // Show the hover box after a delay
                    function showHoverBox() {
                        clearTimeout(timeout);
                        hoverDiv.classList.remove("hidden");

                        let rect = button.getBoundingClientRect();
                        let hoverHeight = hoverDiv.offsetHeight;

                        // Position slightly above the button
                        let topPosition = rect.top + window.scrollY - hoverHeight - 5;
                        hoverDiv.style.top = `${Math.max(10, topPosition)}px`;
                        hoverDiv.style.left = `${rect.left}px`;

                        // Get upvoters container
                        let upvotersDiv = hoverDiv.querySelector(".upvoters");

                        // Adjust columns dynamically based on number of upvoters
                        let upvoteCount = upvotersDiv.children.length;

                        if (upvoteCount > 15) {
                            upvotersDiv.style.gridTemplateColumns = "repeat(3, 1fr)"; // 3 columns for large lists
                        } else if (upvoteCount > 8) {
                            upvotersDiv.style.gridTemplateColumns = "repeat(2, 1fr)"; // 2 columns for medium lists
                        } else {
                            upvotersDiv.style.gridTemplateColumns = "1fr"; // 1 column for small lists
                        }
                    }

                    // Hide the hover box with a delay
                    function hideHoverBox() {
                        timeout = setTimeout(() => {
                            if (!button.matches(":hover") && !hoverDiv.matches(":hover")) {
                                hoverDiv.classList.add("hidden");
                            }
                        }, 200); // Small delay to prevent flickering
                    }

                    button.addEventListener("mouseenter", () => {
                        timeout = setTimeout(showHoverBox, 1000); // Show after 1 second
                    });

                    button.addEventListener("mouseleave", hideHoverBox);
                    hoverDiv.addEventListener("mouseenter", showHoverBox); // Prevent hiding when mouse enters
                    hoverDiv.addEventListener("mouseleave", hideHoverBox); // Hide when leaving the hover box
                });




                let pageControls = document.getElementById("pageControls")

                // add pageButtons class to the pageControls div:
                pageControls.classList.add("pageButtons")

                // new pagination code similar to the bottom one but has the ability to skip 15 pages forward and backward:
                splitUrl = window.location.href.split("?page=")
                pageNumber = splitUrl[1].split("&")[0]

                let page = parseInt(pageNumber)

                let paginationDiv = document.createElement("div")

                let totalPages = `<%=totalPages%>`
                totalPages = parseInt(totalPages)

                // Buttons with similar functions to the below ones, letting the user go to next and previous pages:
                let firstPageButton = document.createElement("button")
                firstPageButton.innerHTML = "&laquo; First"
                firstPageButton.onclick = () => {
                    let url = window.location.href
                    let newUrl = url.replace(/page=\d+/, `page=1`)
                    window.location.href = newUrl
                }

                let previousPageButton = document.createElement("button")
                previousPageButton.innerHTML = "&lt; Previous"
                previousPageButton.onclick = () => {
                    let url = window.location.href
                    let newUrl = url.replace(/page=\d+/, `page=${Math.max(page - 1, 1)}`)
                    window.location.href = newUrl
                }

                let nextPageButton = document.createElement("button")
                nextPageButton.innerHTML = "Next &gt;"
                nextPageButton.onclick = () => {
                    let url = window.location.href
                    let newUrl = url.replace(/page=\d+/, `page=${Math.min(page + 1, totalPages)}`)
                    window.location.href = newUrl
                }

                let lastPageButton = document.createElement("button")
                lastPageButton.innerHTML = "Last &raquo;"
                lastPageButton.onclick = () => {
                    let url = window.location.href
                    let newUrl = url.replace(/page=\d+/, `page=${totalPages}`)
                    window.location.href = newUrl
                }

                paginationDiv.appendChild(firstPageButton)
                
                if (page > 1) {
                    paginationDiv.appendChild(previousPageButton)
                }

                // skip 15 pages backward:
                if (page > 15) {
                    let skipBackButton = document.createElement("button")
                    skipBackButton.innerHTML = page - 15
                    skipBackButton.onclick = () => {
                        let url = window.location.href
                        let newUrl = url.replace(/page=\d+/, `page=${Math.max(page - 15, 1)}`)
                        window.location.href = newUrl
                    }
                    paginationDiv.appendChild(skipBackButton)
                }

                // render pagination numbers:
                for (let i = Math.max(1, page - 5); i <= Math.min(totalPages, page + 5); i++) {
                    let pageButton = document.createElement("button")
                    pageButton.innerHTML = i
                    pageButton.onclick = () => {
                        let url = window.location.href
                        let newUrl = url.replace(/page=\d+/, `page=${i}`)
                        window.location.href = newUrl
                    }
                    if (i === page) {
                        pageButton.classList.add("active")
                    }
                    paginationDiv.appendChild(pageButton)
                }
                
                // skip 15 pages forward:
                if (page + 15 <= totalPages) {
                    let skipForwardButton = document.createElement("button")
                    skipForwardButton.innerHTML = page + 15
                    skipForwardButton.onclick = () => {
                        let url = window.location.href
                        let newUrl = url.replace(/page=\d+/, `page=${Math.min(page + 15, totalPages)}`)
                        window.location.href = newUrl
                    }
                    paginationDiv.appendChild(skipForwardButton)
                }

                if (page < totalPages) {
                    paginationDiv.appendChild(nextPageButton)
                }

                paginationDiv.appendChild(lastPageButton)
                pageControls.appendChild(paginationDiv)

            }


            window.onload = function() {
                setupBooruPosts()
                adjustModalPosition()
            }

        </script>

    </div>

    <!-- get partials/_footer: -->
    <%- include('../../partials/_footer') %>
    
</body>
</html>