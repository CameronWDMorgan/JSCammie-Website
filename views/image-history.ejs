<!-- setup basic html template with metadata etc: -->
<html>
<head>
    <title>Image History | JSCammie.com</title>
    <meta name="description" content="View your generated images and their details.">
    <meta name="keywords" content="AI, Image, Generator, History, Details">
    <meta name="author" content="JSCammie">
    <meta name="viewport" content="height=device-height, width=device-width, initial-scale=1.0">
    <link rel='stylesheet' href='/style.css'/>
    
    <%- include('../partials/_headerAll') %>
    
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-K3KJJKS1R4"></script>
    <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'G-K3KJJKS1R4');
    </script>
    
</head>
<body>

    <!-- get partials/_navigation: -->
    <%- include('../partials/_navigation') %>

    <div class="center-fully-no-flex" style="margin-bottom: 3rem;">
        <%- include('../partials/_bannerAdvert') %>
    </div>

    <style>
        .generationsGrid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            grid-gap: 20px;
            justify-content: center;
        }
    
        .generationDiv {
            /* make it so the div takes up template space, so there isnt a layout shift whilst the image hasnt loaded yet: */
            min-height: 300px;
            min-width: 300px;
            display: block;
            justify-content: center;
            align-items: center;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            transition: 0.3s;
            border: 4px solid #ddd;
            cursor: pointer;
            position: relative;
        }
    
        /* Popup styling */
        .generationPopupContent {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgb(0, 0, 0);
            background-image: linear-gradient(315deg, #006de2 0%, #000000 74%);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
            z-index: 2000;
            max-width: 90%;
            max-height: 90%;
            overflow-y: auto;
            display: none; /* Hidden by default */
        }

        .generatedImage {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 10px;
            cursor: pointer;
        }

        .popupGeneratedImage {
            width: auto;
            height: 70%;
            object-fit: cover;
            border-radius: 10px;
            cursor: pointer;
        }

    </style>
    

    <div class="overlay" id="overlay"></div>
    <div class="booruPopupContent" id="booruPopupContent">
        <button class="closeButton" onclick="closeBooruPopup()">×</button>
        <!-- The content of the popup will be inserted here by JavaScript -->
    </div>
    <div class="generationPopupContent" id="generationPopupContent">
        <button class="closeButton" onclick="closeGenerationPopup()">×</button>
        <!-- The content of the popup will be inserted here by JavaScript -->
    </div>
    
    <div class="container round-frosted page-content mw75-dynamic" style="padding: 40px; justify-content: center;">
        <h1>Image History</h1>
    
        <script>  

            function uploadToBooru(image_id) {

                console.log(`Uploading image ${image_id} to booru`);

                // get the imageData from the masterImageData object:
                const imageData = masterImageData[image_id];

                let booruData = {
                    prompt: `${imageData.prompt}`,
                    negative_prompt: `${imageData.negative_prompt}`,
                    aspect_ratio: `${imageData.aspect_ratio}`,
                    model: `${imageData.model}`,
                    loras: `${imageData.loras}`,
                    lora_strengths: `${imageData.lora_strengths}`,
                    steps: `${imageData.steps}`,
                    cfg: `${imageData.cfg}`,
                    seed: `${imageData.seed}`,
                    image_url: `${imageData.image_url}`
                }

                // post req to create-booru-image:

                fetch('/create-booru-image', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(booruData)
                })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    alert(data.message);
                    if (data.status == 'success') {
                        // close the image and booru popup:
                        closeGenerationPopup();
                        closeBooruPopup();
                    } else {
                        // close the popup:
                        closeGenerationPopup();
                        closeBooruPopup();
                    }
                    
                })

            }

            // show fullscreen popup to confirm upload to booru, showing rules etc:
            function showBooruPopup(image_id) {
                // get the imageData from the masterImageData object:
                const imageData = masterImageData[image_id];
    
                const booruPopupContent = document.getElementById('booruPopupContent');
                const overlay = document.getElementById('overlay');

                // if they click off the popup, close it:
                overlay.onclick = function() {
                    closeGenerationPopup();
                    closeBooruPopup();
                }

                // 4a. While "Aged Up" content is allowed it needs to be clear from just looking at the image that they are over 18 with their proportions, outfit & general looks, they also MUST be 100% fictional and not based on anyone from real-life.
    
                booruPopupContent.innerHTML = `
                    <button class="closeButton" onclick="closeBooruPopup()">×</button>
                    <h1>Upload to Booru</h1>
                    <p>By uploading to the booru you agree to the following:</p>
                    <ul>
                        <li>Child/Cub/Loli NSFW content are NOT ALLOWED!!!</li>
                        <br>
                        <li>Aged-Up Characters that look over the age of 18 are allowed, if they do not look over 18, the post will be removed!</li>
                        <br>
                        <li>By default all content is hidden until a moderator approves it and gives it a safety rating (sfw, suggestive, nsfw).</li>
                        <br>
                        <li>ALL SETTINGS used to create an image are visible, if your content shows a word like "loli", even if its sfw, it will be removed!</li>
                        <br>
                        <li>Quality Generations are prefered! (Don't upload a billion variations ^-^;)
                    </ul>
                    <p>If you agree to these rules/terms then feel free to click below</p>
                    <button id="uploadToBooruButton" onclick="uploadToBooru('${image_id}')">Upload to Booru</button>
                `;

                document.getElementById('overlay').style.display = 'block';
                document.getElementById('booruPopupContent').style.display = 'block';
    
                // Listen for the ESC key to close the popup
                document.addEventListener('keydown', escCloseBooruPopup);
            }

            // Function to show the popup
            function showGenerationPopup(image_id) {
                // get the imageData from the masterImageData object:
                const imageData = masterImageData[image_id];
    
                const generationPopupContent = document.getElementById('generationPopupContent');
                const overlay = document.getElementById('overlay');

                // if they click off the popup, close it:
                overlay.onclick = function() {
                    closeGenerationPopup();
                }

                uploadToBooruButtonHTML = ``;

                // <button id="uploadToBooruButton" onclick="showBooruPopup('${image_id}')">Upload to Booru</button>
                //     <br>

                // add the above only if the image has not been uploaded to the booru yet:
                if (imageData.uploadedToBooru == false) {
                    uploadToBooruButtonHTML = `<button id="uploadToBooruButton" onclick="showBooruPopup('${image_id}')">Upload to Booru</button><br><br>`;
                }
    
                generationPopupContent.innerHTML = `
                    <button class="closeButton" onclick="closeGenerationPopup()">×</button>
                    <img class="popupGeneratedImage" src="${imageData.image_url}"></img>
                    
                    <br>
                    <br>
                    <button id="exportAIDataButton" onclick="exportAIData('${image_id}')">Export AI Data</button>
                    <br>
                    <br>
                    ${uploadToBooruButtonHTML}

                    <a>Prompt: </a>
                    <a id="prompt">${imageData.prompt}</a><br>

                    <a>Negative Prompt: </a>
                    <a id="negative_prompt">${imageData.negative_prompt}</a><br>

                    <a>Model: </a>
                    <a id="model">${imageData.model}</a><br>

                    <a>Aspect Ratio: </a>
                    <a id="aspect_ratio">${imageData.aspect_ratio}</a><br>

                    <a>LORAs: </a>
                    <a id="loras">${imageData.loras}</a><br>

                    <a>LORA Strengths: </a>
                    <a id="lora_strengths">${imageData.lora_strengths}</a><br>

                    <a>Steps: </a>
                    <a id="steps">${imageData.steps}</a><br>

                    <a>CFG: </a>
                    <a id="cfg">${imageData.cfg}</a><br>

                    <a>Seed: </a>
                    <a id="seed">${imageData.seed}</a><br>

                `;

                document.getElementById('overlay').style.display = 'block';
                document.getElementById('generationPopupContent').style.display = 'block';
    
                // Listen for the ESC key to close the popup
                document.addEventListener('keydown', escClosePopup);
            }

            // close booru popup:
            function closeBooruPopup() {
                const booruPopupContent = document.getElementById('booruPopupContent');
                const overlay = document.getElementById('overlay');
    
                booruPopupContent.style.display = 'none';
                overlay.style.display = 'none';
    
                // Remove the ESC key event listener
                document.removeEventListener('keydown', escCloseBooruPopup);
            }
    
            // Function to close the popup
            function closeGenerationPopup() {
                const generationPopupContent = document.getElementById('generationPopupContent');
                const overlay = document.getElementById('overlay');
    
                generationPopupContent.style.display = 'none';
                overlay.style.display = 'none';

                // Remove the ESC key event listener
                document.removeEventListener('keydown', escClosePopup);
            }
    
            // Function to close the popup with the ESC key

            function escCloseBooruPopup(event) {
                if (event.key === 'Escape') {
                    closeBooruPopup();
                }
            }

            function escClosePopup(event) {
                if (event.key === 'Escape') {
                    closeGenerationPopup();
                }
            }


            function exportAIData(image_id) {

                // get the imageData from the masterImageData object:
                const imageData = masterImageData[image_id];

                // Get the AI data from the form
                let aiData = {
                    prompt: imageData.prompt,
                    negativeprompt: imageData.negative_prompt,
                    aspectRatio: imageData.aspect_ratio,
                    model: imageData.model,
                    loras: imageData.loras,
                    lora_strengths: imageData.lora_strengths,
                    steps: imageData.steps,
                    quantity: 2,
                    cfg: imageData.cfg,
                    seed: imageData.seed,
                }

                // save it to a file and download it without jsyaml:
                let yamlString = `${aiData.prompt}<SPLIT>${aiData.negativeprompt}<SPLIT>${aiData.aspectRatio}<SPLIT>${aiData.model}<SPLIT>${aiData.loras}<SPLIT>${aiData.lora_strengths}<SPLIT>${aiData.steps}<SPLIT>${aiData.quantity}<SPLIT>${aiData.cfg}<SPLIT>${aiData.seed}`

                let blob = new Blob([yamlString], {type: 'text/yaml'});
                let url = URL.createObjectURL(blob);
                let a = document.createElement('a');
                a.href = url;
                a.download = `${aiData.model}.aidata`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
            }

        </script>
    
        <script>
            var masterImageData = {} 

            <% userHistory.forEach(imageData => { %>
                masterImageData["<%=imageData.image_id%><%=imageData.account_id%>"] = {
                    prompt: `<%=imageData.prompt%>`,
                    negative_prompt: `<%=imageData.negative_prompt%>`,
                    model: "<%=imageData.model%>",
                    aspect_ratio: "<%=imageData.aspect_ratio%>",
                    loras: "<%=imageData.loras%>",
                    lora_strengths: "<%=imageData.lora_strengths%>",
                    steps: "<%=imageData.steps%>",
                    cfg: "<%=imageData.cfg%>",
                    seed: "<%=imageData.seed%>",
                    image_url: "<%=imageData.image_url%>",
                    image_id: "<%=imageData.image_id%>",
                    uploadedToBooru: <%=imageData.uploadedToBooru%>,
                    thumbnailMade: <%=imageData.thumbnailMade%>,
                };
            <% }); %>
        </script>

        <!-- search box and logic, search the prompt: -->

        <details open>
            <summary style="font-size: xx-large;">Search for images by prompt, model, or LORA(s)</summary>
            <br>
            <input type="text" id="searchInputPrompt" placeholder="Search for prompts.." onkeydown="if (event.keyCode == 13) {search()}"></input>
            <br>
            <br>
            <select id="searchInputModel" name="model">
                <option value="all">All Models</option>
                <option value="fluffysonic">(SD 1.5) FluffySonic (Sonic the Hedgehog by kitsune_sage)</option>
                <option value="realisticVision">(SD 1.5) realisticVision (Realstic)</option>
                <option value="furryblend">(SD 1.5) FurryBlend (Furry/Anime)</option>
                <option value="sdxl-autismmix">(SDXL) Autism Mix ("Better" PonyXL, uses PonyXL Prompting)</option>
                <option value="sdxl-sonichasautismmix">(SDXL) SonicHasAutismMix (SonicDiffusionXL & AutismMix merge, uses PonyXL Prompting)</option>
                <option value="sdxl-ponyrealism">(SDXL) Pony Realism (Realistic, uses PonyXL Prompting)</option>
                <option value="flux-unchained">(FLUX) Unchained (Everything, natural language prompting)</option>
            </select>
            <br>
            <br>
            <!-- on enter key input search -->
            <input type="text" id="searchInputLora" placeholder="Search for LORAs.." onkeydown="if (event.keyCode == 13) {search()}"></input>
            <br>
            <br>
            <select id="imagesPerPage" name="imagesPerPage">
                <option value="10">10 Images Per Page</option>
                <option value="25">25 Images Per Page</option>
                <option value="50">50 Images Per Page</option>
                <option value="100">100 Images Per Page</option>
            </select>
            <!-- search button: -->
            <button onclick="search()">Search</button>
        </details>
        <br>
        <br>

        <script>
            // delete button logic:

            // remove the image from the page and the database:
            function deleteImage(div_id) {

                // ask for confirmation:
                if (!confirm("Are you sure you want to delete this image?")) {
                    return;
                }

                // get the image_id and account_id from the image_id:
                let image_id_split = div_id.split('-');
                let image_id = image_id_split[0];
                let account_id = image_id_split[1];

                // get the image div:
                let imageDiv = document.getElementById(image_id + account_id);

                // send a request to the server to delete the image from the database:
                fetch('/image-history/delete-image', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        image_id: image_id,
                    })
                })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    // animate the image div disappearing:
                    imageDiv.style.transition = 'opacity 0.5s';
                    imageDiv.style.opacity = 0;
                    setTimeout(() => {
                        imageDiv.style.display = 'none';
                    }, 500);
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
            }

        </script>

    <style>
        .deleteButton, .downloadButton, .exportButton {
            position: absolute;
            display: block;
            border: black 2px solid;
            border-radius: 10px;
            padding: 2% 3%; /* Scale padding with percentage */
            cursor: pointer;
            font-size: 100%;
            text-align: center;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .deleteButton {
            background-color: red;
            color: white;
            top: 99%; /* Position from the top */
            left: 2%; /* Position from the left */
            transform: translate(0, -100%); /* Adjust placement above the image */
        }

        .exportButton {
            background-color: blue;
            color: white;
            top: 99%;
            left: 36%;
            transform: translate(0, -100%);
        }

        .downloadButton {
            background-color: green;
            color: white;
            top: 99%;
            left: 68%;
            transform: translate(0, -100%);
        }
    </style>

    

    <div class="generationsGrid">
        <% userHistory.forEach((imageData, index) => { %>
            <div id="<%=imageData.image_id%><%=imageData.account_id%>" class="generationDiv">
                <% if (imageData.thumbnailMade == true) { %>
                    <% thumbImage = imageData.image_url.replace('.png', '-thumb.png') %>
                <% } else { %>
                    <% thumbImage = imageData.image_url %>
                <% } %>
                <img class="generatedImage" loading="lazy" src="<%= thumbImage %>" onclick="showGenerationPopup('<%=imageData.image_id%><%=imageData.account_id%>')"/>
                <!-- delete button -->
                <button class="deleteButton" onclick="deleteImage('<%=imageData.image_id%>-<%=imageData.account_id%>')">Delete</button>
                <!-- download button -->
                <a href="<%= imageData.image_url %>" download>
                    <button class="downloadButton">Download</button>
                </a>
                <!-- export button -->
                <button class="exportButton" onclick="exportAIData('<%=imageData.image_id%><%=imageData.account_id%>')">Export</button>
            </div>
        <% }); %>
    </div>

    <div class="generationsControls" id="generationsControls"></div>

    <script>
        async function deletePage() {
            
            // get the current page number:
            let currentPageButton = document.querySelector('.pageButton.active');

            if (!currentPageButton) {
                alert("No images to delete on this page!");
                return;
            }

            let currentPage = parseInt(currentPageButton.innerHTML);

            if (!confirm("Are you sure you want to delete all images on page " + currentPage + "?")) {
                return;
            }

            // get the images div ids on the current page:
            let imagesOnPage = document.querySelectorAll(`.page${currentPage}.generationDiv`);

            // loop through masterImageData, getting the image_id from it by using the ID of the div:
            for (let i = 0; i < imagesOnPage.length; i++) {
                let imageDiv = imagesOnPage[i];
                image = masterImageData[imageDiv.id];

                // send a request to the server to delete the image from the database:
                fetch('/image-history/delete-image', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        image_id: image.image_id,
                    })
                })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    // animate the image div disappearing:
                    imageDiv.style.transition = 'opacity 1s';
                    imageDiv.style.opacity = 0;
                    setTimeout(() => {
                        imageDiv.style.display = 'none';
                    }, 1000);
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
            }

            // remove all the deleted images from the masterImageData object:
            for (let i = 0; i < imagesOnPage.length; i++) {
                let imageDiv = imagesOnPage[i];
                delete masterImageData[imageDiv.id];
            }

            // re-paginate the images:
            search();
            
            // wait 0.5s then select the page before the current page, if there is one:
            setTimeout(() => {
                let previousPageButton = document.querySelector(`.page${currentPage - 1}.pageButton`);
                if (previousPageButton) {
                    previousPageButton.click();
                } else {
                    // if there is no previous page, click the first page:
                    let firstPageButton = document.querySelector('.page1.pageButton');
                    firstPageButton.click();
                }
            }, 500);
            
        }
    </script>

    <button id="deletePage" onclick="deletePage()">Delete Current Page</button>

    <style>
        .pageButton {
            background-color: #f1f1f11f;
            color: rgb(255, 255, 255);
            border: 1px solid black;
            padding: 8px 16px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            cursor: pointer;
            border-radius: 5px;
            margin: 5px;
        }

        .pageButton:hover {
            background-color: #0084ff;
        }

        .pageButton.active {
            background-color: #ffffff;
            color: rgb(0, 0, 0);
        }
        .generationsControls {
            text-align: center;
            margin-top: 20px;
        }
    </style>

    <script>

        let imagesPerPageToggle = false

        function paginateImages() {

            let allImages = document.querySelectorAll('.generationDiv');


            // get the number of visible images by checking if they have the class "visible":
            let visibleImages = document.querySelectorAll('.visible');

            // set imagesPerPage select to the 25 images per page option:
            // if its first load:


            if (!imagesPerPageToggle) {
                document.getElementById('imagesPerPage').value = 25;
                imagesPerPageToggle = true;
            }



            let imagesPerPage = parseInt(document.getElementById('imagesPerPage').value);

            // add an event listener to the imagesPerPage select to re-paginate the images:
            document.getElementById('imagesPerPage').onchange = function() {
                paginateImages();
            }

            // calculate the number of pages:
            let numberOfPagesAll = Math.ceil(allImages.length / imagesPerPage);
            let numberOfPages = Math.ceil(visibleImages.length / imagesPerPage);

            // divy up the visible images into pages, being sure to add the class "page1, page2" etc, AND making sure to remove any other page classe(s):

            // loop through the images removing any page classes:
            // all page classes:
            let allPageClasses = [];

            for (let i = 0; i < numberOfPagesAll; i++) {
                allPageClasses.push(`page${i + 1}`);
            }

            // loop through the images and remove all page classes:
            allImages.forEach(image => {
                allPageClasses.forEach(pageClass => {
                    image.classList.remove(pageClass);
                });
            });

            // loop through the visible images and asign them to a page:
            let pageCounter = 1;
            let imageCounter = 0;

            visibleImages.forEach(image => {
                if (imageCounter >= imagesPerPage) {
                    pageCounter += 1;
                    imageCounter = 0;
                }

                image.classList.add(`page${pageCounter}`);
                imageCounter += 1;
            });

            console.log("Number of pages: ", numberOfPages);

            // create the page buttons:
            let generationsControls = document.getElementById('generationsControls');

            // make sure that the generationsControls div is empty:
            generationsControls.innerHTML = '';

            for (let i = 0; i < numberOfPages; i++) {
                let pageButton = document.createElement('button');
                pageButton.innerHTML = i + 1;
                pageButton.classList.add('pageButton');
                pageButton.classList.add(`page${i + 1}`);
                pageButton.onclick = function() {

                    // set the button to have the class active, removing active from all other buttons:
                    let allPageButtons = document.querySelectorAll('.pageButton');
                    allPageButtons.forEach(button => {
                        button.classList.remove('active');
                    });
                    // add the active class to the button:
                    pageButton.classList.add('active');

                    // add lerping to the scroll:
                    const duration = 500;
                    const start = window.scrollY;
                    const end = 220; // End position you want to scroll to
                    let start_time = null;

                    // Calculate change in position (c)
                    const change = end - start;

                    function step(timestamp) {
                        if (!start_time) start_time = timestamp;
                        const progress = timestamp - start_time;
                        
                        // Ensure the progress doesn't exceed the duration
                        const newPosition = easeInOutQuad(progress, start, change, duration);
                        window.scrollTo(0, newPosition);

                        if (progress < duration) {
                            window.requestAnimationFrame(step);
                        } else {
                            // Ensure we end exactly at the end position
                            window.scrollTo(0, end);
                        }
                    }

                    function easeInOutQuad(t, b, c, d) {
                        t /= d / 2;
                        if (t < 1) return c / 2 * t * t + b;
                        t--;
                        return -c / 2 * (t * (t - 2) - 1) + b;
                    }

                    window.requestAnimationFrame(step);

                    // wait 0.5s:
                    setTimeout(() => {
                        // hide all images:
                        allImages.forEach(image => {
                            image.style.display = 'none';
                        });

                        // show the images on the page:
                        let pageImages = document.querySelectorAll(`.page${i + 1}`);
                        pageImages.forEach(image => {
                            // make sure its not a button:
                            if (image.tagName != 'BUTTON') {
                                image.style.display = 'block';
                            }
                        });
                    }, duration);
                }
                generationsControls.appendChild(pageButton);
            }

            // show the first page by default:
            let page1Button = document.querySelector('.page1.pageButton');
            page1Button.click();
            // add the active class to the first page button:
            page1Button.classList.add('active');

        }


        // Debounce function to delay execution until the user has stopped typing
        function debounce(func, delay) {
            let timeout;
            return function (...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), delay);
            };
        }

        // Hide all images initially
        function search() {
            document.querySelectorAll('.generationDiv').forEach(div => {
                div.style.display = 'none';
                div.classList.remove(`visible`);
            });
            filterImages()
            paginateImages()
        }

        // Function to filter the images based on the search terms
        function filterImages() {
            const promptSearchTerms = getSearchTerms('searchInputPrompt');
            const modelSearchTerms = getSearchTerms('searchInputModel');
            const loraSearchTerms = getSearchTerms('searchInputLora');

            counter = 0

            for (const [key, value] of Object.entries(masterImageData)) {

                if (!value) {
                    // skip if the value is null
                    continue;
                }

                console.log(`searchmodel: ${modelSearchTerms}, model: ${value.model}`)

                if (modelSearchTerms != value.model && modelSearchTerms != 'all') {
                    document.getElementById(key).style.display = 'none';
                    continue
                }

                // Split the search terms by ',' and trim any extra spaces
                const promptSearchArray = promptSearchTerms.map(term => term.trim());

                // Check if every term in promptSearchArray is found as a whole phrase in value.prompt
                const promptMatch = promptSearchArray.every(term => {
                    const regex = new RegExp(`\\b${term.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')}\\b`, 'i');
                    const result = regex.test(value.prompt.toLowerCase());
                    return result;
                });



                // lora search, very basic, just do .includes:
                const loraMatch = loraSearchTerms.some(term => value.loras.toLowerCase().includes(term));
                

                // console.log the image its on out of the total images:
                console.log(counter, Object.keys(masterImageData).length);

                counter += 1

                // Display the image
                if (promptMatch && loraMatch) {
                    document.getElementById(key).style.display = 'block';
                    // add class that denotes that it is visible:
                    document.getElementById(key).classList.add(`visible`);
                } else {
                    document.getElementById(key).style.display = 'none';
                    // remove class that denotes that it is not visible:
                    document.getElementById(key).classList.remove(`visible`);

                }
            }
        }

        // Helper function to get and split search terms
        function getSearchTerms(inputId) {
            return document.getElementById(inputId).value.toLowerCase().trim().split(',').map(term => term.trim());
        }    
        

        window.onload = function() {
            search()
        }

    </script>

    <!-- get partials/_footer: -->
    <%- include('../partials/_footer') %>
    
</body>
</html>