<!-- setup basic html template with metadata etc: -->
<html>
<head>
    <title>Credits History | JSCammie.com</title>
    <link rel='stylesheet' href='/style.css'/>
    
    <%- include('../partials/_headerAll') %>
    
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-K3KJJKS1R4"></script>
    <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'G-K3KJJKS1R4');
    </script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom"></script>
    
</head>
<body>

    <!-- get partials/_navigation: -->
    <%- include('../partials/_navigation') %>

    <div class="center-fully-no-flex" style="margin-bottom: 1rem;">
        <%- include('../partials/_bannerAdvert') %>
    </div>

    <div class="round-frosted page-content" style="padding: 40px; justify-content: center;">
        
        <h1>Credits History</h1>

        <div>
            <!-- Tab Buttons -->
            <div style="margin-bottom: 10px;">
                <button onclick="showGraph('positive')">Positive Changes</button>
                <button onclick="showGraph('negative')">Negative Changes</button>
                <button onclick="showGraph('combined')">Combined Changes</button>
            </div>

            <!-- Graph Canvas -->
            <canvas id="credits-history-graph" width="800" height="400"></canvas>
        </div>


        <br>

        <div class="credits-history-container" id="credits-history"></div>

    </div>

    <script>
        var creditsHistory = [];

        <% for (let i = 0; i < creditsHistory.length; i++) { %>
            creditsHistory.push({
                accountId: "<%= creditsHistory[i].accountId %>",
                previousCredits: Number("<%= creditsHistory[i].previousCredits %>"),
                newCredits: Number("<%= creditsHistory[i].newCredits %>"),
                timestamp: new Date(<%= creditsHistory[i].timestamp %>),
                message: "<%= creditsHistory[i].message %>",
                operation: "<%= creditsHistory[i].newCredits < creditsHistory[i].previousCredits ? 'minus' : 'plus' %>",
                difference: ""
            });
        <% } %>

        // Calculate differences for each transaction
        for (let i = 0; i < creditsHistory.length; i++) {
            const currentHistory = creditsHistory[i];
            currentHistory.difference =
                currentHistory.operation === "minus"
                    ? currentHistory.newCredits - currentHistory.previousCredits // Negative for loss
                    : currentHistory.newCredits - currentHistory.previousCredits; // Positive for gain
        }

        // Reverse to make recent transactions first
        creditsHistory.reverse();

        // Aggregate data week by week
        const weeklyData = { positive: {}, negative: {}, combined: {} };
        creditsHistory.forEach((entry) => {
            const parsedTimestamp = new Date(entry.timestamp);
            if (isNaN(parsedTimestamp.getTime())) {
                console.error("Invalid timestamp:", entry.timestamp);
                return; // Skip invalid entry
            }

            const weekStart = new Date(parsedTimestamp);
            weekStart.setDate(weekStart.getDate() - weekStart.getDay()); // Start of the week (Sunday)
            const weekKey = weekStart.toISOString().split("T")[0]; // Week start date as key

            // Initialize keys
            if (!weeklyData.positive[weekKey]) weeklyData.positive[weekKey] = 0;
            if (!weeklyData.negative[weekKey]) weeklyData.negative[weekKey] = 0;
            if (!weeklyData.combined[weekKey]) weeklyData.combined[weekKey] = 0;

            // Add to the appropriate dataset
            if (entry.difference > 0) {
                weeklyData.positive[weekKey] += entry.difference;
            } else if (entry.difference < 0) {
                weeklyData.negative[weekKey] += entry.difference;
            }
            weeklyData.combined[weekKey] += entry.difference; // Add to combined data
        });

        // Prepare data for charts
        const labels = Object.keys(weeklyData.combined).sort();
        const data = {
            positive: labels.map((week) => weeklyData.positive[week] || 0),
            negative: labels.map((week) => weeklyData.negative[week] || 0),
            combined: labels.map((week) => weeklyData.combined[week] || 0),
        };

        // Initialize Chart.js
        let chartInstance = null;

        function renderGraph(type) {
            const ctx = document.getElementById("credits-history-graph").getContext("2d");
            if (chartInstance) {
                chartInstance.destroy(); // Destroy existing chart before re-rendering
            }

            const backgroundColor = {
                positive: "rgba(75, 192, 192, 0.2)",
                negative: "rgba(255, 99, 132, 0.2)",
                combined: data.combined.map(value =>
                    value < 0 ? "rgba(255, 99, 132, 0.2)" : "rgba(75, 192, 192, 0.2)"
                ),
            };

            const borderColor = {
                positive: "rgba(75, 192, 192, 1)",
                negative: "rgba(255, 99, 132, 1)",
                combined: data.combined.map(value =>
                    value < 0 ? "rgba(255, 99, 132, 1)" : "rgba(75, 192, 192, 1)"
                ),
            };

            chartInstance = new Chart(ctx, {
                type: "bar",
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: `${type.charAt(0).toUpperCase() + type.slice(1)} Changes`,
                            data: data[type],
                            backgroundColor: Array.isArray(backgroundColor[type])
                                ? backgroundColor[type]
                                : new Array(labels.length).fill(backgroundColor[type]),
                            borderColor: Array.isArray(borderColor[type])
                                ? borderColor[type]
                                : new Array(labels.length).fill(borderColor[type]),
                            borderWidth: 2,
                        },
                    ],
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: true,
                            labels: {
                                color: "#fff", // White text for legend
                            },
                        },
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: "Week Starting",
                                color: "#fff", // White text for axis title
                            },
                            ticks: {
                                color: "#fff", // White text for x-axis labels
                            },
                            grid: {
                                color: "rgba(255, 255, 255, 0.1)", // White grid lines
                            },
                        },
                        y: {
                            title: {
                                display: true,
                                text: "Credits Change",
                                color: "#fff", // White text for axis title
                            },
                            ticks: {
                                color: "#fff", // White text for y-axis labels
                                callback: function (value) {
                                    return value.toLocaleString(); // Format y-axis values
                                },
                            },
                            grid: {
                                color: "rgba(255, 255, 255, 0.1)", // White grid lines
                            },
                        },
                    },
                    layout: {
                        backgroundColor: "#333", // Dark background for the entire chart area
                    },
                },
            });
        }

        // Show the selected graph
        function showGraph(type) {
            renderGraph(type);
        }

        // Render combined graph by default
        renderGraph("combined");
    </script>





    <style>
        /* Container Styling */
        .credits-history-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 1rem;
            max-width: 100%;
        }

        /* Card Styling */
        .card-minus {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
            padding: 1.5rem;
            border-radius: 12px;
            background-color: rgba(255, 100, 100, 0.35); /* Red color for negative values */
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3); /* More noticeable shadow */
            max-width: 800px;
            width: 100%;
        }

        .card-plus {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
            padding: 1.5rem;
            border-radius: 12px;
            background-color: rgba(100, 255, 100, 0.35); /* Green color for positive values */
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3); /* More noticeable shadow */
            max-width: 800px;
            width: 100%;
        }

        /* Adjusting Card Spacing */
        .card-left {
            display: flex;
            align-items: center;
        }

        .card-right {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: flex-end;
            text-align: right;
        }

        /* Text Styling */
        .messageText {
            margin-bottom: 0.5rem;
            font-size: 1rem;
            font-weight: 500;
            color: white; /* Ensures text is white */
        }
        
        .timestampText {
            margin-bottom: 0;
            color: #b0b0b0; /* Light grey for contrast */
            font-size: 0.9rem;
        }

        /* Color Classes */
        .minus-class p {
            color: #ff6b6b; /* Red color for negative values */
            font-weight: bold;
        }

        .plus-class p {
            color: #2ecc71; /* Green color for positive values */
            font-weight: bold;
        }

        /* Container Background */
        .credits-history-container {
            padding: 4rem;
            border: 1px solid rgba(0, 0, 0, 0.3);
            border-radius: 12px;
        }
    </style>


    <script>

        let creditsHistoryHtml = "";

        // Create the cards and inject them into the DOM
        const creditsHistoryContainer = document.getElementById('credits-history');

        creditsHistory.forEach((currentHistory, index) => {
            // Create elements without embedding the message HTML directly in the template literal
            const cardDiv = document.createElement('div');
            cardDiv.className = `card-${currentHistory.operation}`;

            const leftDiv = document.createElement('div');
            leftDiv.className = 'card-left';
            leftDiv.innerHTML = `
                <div class="${currentHistory.operation === 'minus' ? 'minus-class' : 'plus-class'}">
                    <p>
                        ${currentHistory.operation != "minus" ? "+" : ""}${currentHistory.difference} Credits
                    </p>
                    <p>
                        Running Total: ${currentHistory.newCredits} Credits
                    </p>
                    
            `;

            const rightDiv = document.createElement('div');
            rightDiv.className = 'card-right';

            // Create a separate p tag for message and set innerHTML separately
            const messageP = document.createElement('p');
            messageP.className = 'messageText';
            messageP.innerHTML = `Message: ${currentHistory.message}`;

            const timestampP = document.createElement('p');
            timestampP.className = 'timestampText';
            timestampP.textContent = `Timestamp: ${currentHistory.timestamp}`;

            // Append everything into the structure
            rightDiv.appendChild(messageP);
            rightDiv.appendChild(timestampP);
            cardDiv.appendChild(leftDiv);
            cardDiv.appendChild(rightDiv);
            creditsHistoryContainer.appendChild(cardDiv);
        });

        // Function to reconstruct href and multi-word anchor text in the message
        const reconstructLinksInMessages = () => {
            const messageTexts = document.querySelectorAll('.messageText');

            messageTexts.forEach(messageText => {
                // Capture the raw text content
                let messageTextContent = messageText.textContent;

                // Regex to find patterns like: href='url'>anchor text</a>
                const linkRegex = /href=['"]([^'"]+)['"]>([^<]+)<\/a>/g;

                // Replace the raw text with the actual HTML link
                const reconstructedMessage = messageTextContent.replace(linkRegex, function(match, href, anchorText) {
                    // Create the proper <a href="">...</a> structure
                    return `<a href="${href}" target="_blank">${anchorText}</a>`;
                });

                // Inject the reconstructed message back as HTML
                messageText.innerHTML = reconstructedMessage;
            });
        };

        // Call the function to reconstruct all links in messages
        reconstructLinksInMessages();


    </script>


    </script>

    <!-- get partials/_footer: -->
    <%- include('../partials/_footer') %>
    
</body>
</html>