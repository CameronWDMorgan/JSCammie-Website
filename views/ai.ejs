<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Free Stable Diffusion AI Image Generator FLUX/PDXL/SD1.5 | JSCammie.com</title>
    <meta name="description" content="Free FLUX, PDXL and SD 1.5 Stable Diffusion Generator | Generate free images SFW & NSFW with multiple models, loras & more!">
    <meta name="keywords" content="flux ai, flux dev, flux schnell, flux loras, flux free, flux ai free, nsfw, uncensored, free, online, inpainting, img2img, txt2img, stable diffusion, ai image generator, sdxl ai image generator, ai free online, sfw, nsfw, sdxl, sd1.5, loras, lora, embeddings, pdxl, pony diffusion">
    <meta name="author" content="JSCammie">

    <%- include('../partials/_headerAll') %>

    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-K3KJJKS1R4"></script>
    <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'G-K3KJJKS1R4');
    </script>

    <link rel="stylesheet" href="../style.css">
    <link rel="stylesheet" href="../ai-style.css">

    <style>


    .container {
        display: flex;
        flex-direction: column;
        /* same width for both: */
        width: 100%;
        flex-grow: 1;
        flex-shrink: 1;
        justify-content: center;
        flex-basis: 0%;
    }

    .flex-under-div {
        margin: 20px;
        width: auto;
    }

    .flex-div {
        width: auto;
    }

    @media (min-width: 1081px) {
        .container {
            flex-direction: row;
        }

        .flex-under-div {
            margin-top: 20px;
            margin: 0px;
            width: 50%;
        }

        .flex-div {
            width: 50%;
        }
    }



        li{
            list-style-type:square;
        }
        .form-control {
            margin-bottom: 1rem;
        }
        .form-control label,
        .form-control input,
        .form-control textarea,
        .form-control {
            display: block;
        }
        .form-control input[type="text"],
        .form-control input[type="range"],
        .form-control textarea,
        .form-control button {
            width: 100%;
            margin-top: 0.5rem;
            resize: none;
        }
        .form-control textarea{
            font-size: 20;
        }
        .form-control span {
            margin-top: 0.5rem;
            font-weight: bold;
        }

        /* add onto the styling for the inline-slider range, with outlines and purple colours */
        .form-control.inline-slider {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        .form-control.inline-slider label {
            margin-right: 1rem; /* Adjust as needed */
        }
        .form-control.inline-slider input[type="range"] {
            width: 100%;
            margin-top: 0.5rem;
            padding: 0.5rem;
            border: transparent;
            border-radius: 4px;
            box-sizing: border-box;
            color: white;
            background-color: #ffffff15;
            font-size: 16px;
            outline: none;
            -webkit-appearance: none; /* Removes default styling */
        }
        /* slider thumb trail and white outline */
        .form-control.inline-slider input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none; /* Removes default styling */
            width: 1rem; /* Adjust as needed */
            height: 1rem; /* Adjust as needed */
            background-color: #c259ff; /* Adjust as needed */
            border-radius: 50%;
            cursor: pointer;
            transform: translateY(-0.25rem);
            box-shadow: 0 0 0 0.075rem #ffffff; /* Adjust as needed */
        }
        .form-control.inline-slider input[type="range"]::-moz-range-thumb {
            width: 1rem; /* Adjust as needed */
            height: 1rem; /* Adjust as needed */
            background-color: #c259ff; /* Adjust as needed */
            border-radius: 50%;
            cursor: pointer;
            transform: translateY(-0.25rem);
            box-shadow: 0 0 0 0.075rem #ffffff; /* Adjust as needed */
        }
        .form-control.inline-slider input[type="range"]::-ms-thumb {
            width: 1rem; /* Adjust as needed */
            height: 1rem; /* Adjust as needed */
            background-color: #c259ff; /* Adjust as needed */
            border-radius: 50%;
            cursor: pointer;
            transform: translateY(-0.25rem);
            box-shadow: 0 0 0 0.075rem #ffffff; /* Adjust as needed */
        }


        .form-control.inline-slider input[type="range"]::-webkit-slider-runnable-track {
            width: 100%;
            height: 0.5rem; /* Adjust as needed */
            background-color: #ffffff15; /* Adjust as needed */
            border-radius: 4px;
        }
        .form-control.inline-slider input[type="range"]::-moz-range-track {
            width: 100%;
            height: 0.5rem; /* Adjust as needed */
            background-color: #ffffff15; /* Adjust as needed */
            border-radius: 4px;
        }
        .form-control.inline-slider input[type="range"]::-ms-track {
            width: 100%;
            height: 0.5rem; /* Adjust as needed */
            background-color: #ffffff15; /* Adjust as needed */
            border-radius: 4px;
        }
        .form-control.inline-slider input[type="range"]::-ms-fill-lower {
            background-color: #ffffff15; /* Adjust as needed */
            border-radius: 4px;
        }
        .form-control.inline-slider input[type="range"]::-ms-fill-upper {
            background-color: #ffffff15; /* Adjust as needed */
            border-radius: 4px;
        }
        .form-control.inline-slider input[type="range"]::-ms-tooltip {
            display: none; /* Removes default styling */
        }
        .form-control.inline-slider .range-value {
            min-width: 3rem; /* Ensures that the value doesn't collapse */
            text-align: center;
        }
        

        /* custom styling for the select dropdowns, both for select and select multiple, transitions */
        .form-control select {
            width: 100%;
            margin-top: 0.5rem;
            padding: 0.5rem;
            border: transparent;
            border-radius: 4px;
            box-sizing: border-box;
            color: white;
            background-color: rgba(0, 0, 0, 0.103);
            font-size: 16px;
            outline: none;
        }
        /* for single select dropdowns */
        .form-control select option {
            color: rgb(255, 255, 255);
            background-color: rgba(0, 0, 0, 0.815);
            padding: 4px;
        }
        .form-control select option:checked {
            color: white;
            background-color: rgba(165, 68, 255, 0.473);
        }
        .form-control select option:hover {
            color: white;
            background-color: rgba(165, 68, 255, 0.507);
        }
        /* for multiple select dropdowns */
        .form-control select[multiple] {
            height: 16rem;
        }
        .form-control select[multiple] option {
            color: rgb(255, 255, 255);
            background-color: rgba(0, 0, 0, 0.103);
            padding: 0px !important;
        }
        .form-control select[multiple] option:checked {
            color: white;
            background-color: rgb(165, 68, 255);
        }
        .form-control select[multiple] option:hover {
            color: white;
            background-color: rgb(165, 68, 255);
        }




        /* Additional styling for dropdown arrow */
        .form-control select::after {
            content: '\25BC';  /* Unicode character for down arrow */
            position: absolute;
            top: 0.8rem;
            right: 1rem;
            font-size: 14px;
            pointer-events: none;
            color: white;
            background-color: #00000015;
        }


        .form-control select[multiple] option:checked {
            color: white;
            background-color: rgb(165, 68, 255);
        }

        .range-value {
            min-width: 3rem; /* Ensures that the value doesn't collapse */
            text-align: center;
        }
        /* generator form max-width based on screen size 750px: */
        @media screen and (max-width: 750px) {
            #generatorForm {
                max-width: 600px;
            }
        }
        @media screen and (min-width: 750px) {
            #generatorForm {
                max-width: 900px;
            }
        }
        #generatorForm {
            margin: auto;
        }
        .range-value {
            text-align: center;
        }
        #generateButton {
            background-color: #4caf4f95; /* Green */
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            transition: transform 0.7s, background-color 0.3s; /* Adjust time as needed */
            transform: scale(1) rotate(0deg); /* Default state */
            transform-origin: center; /* Ensures the scaling happens from the center */
        }

        #generateButton:hover {
            transform: scale(1.08) rotate(1deg); 
            background-color: #4CAF50; /* Green */
        }
        #generateButton:active {
            transform: scale(1.1);
            background-color: #ffe600; /* Red */
        }
        #generateButton.generating {
            background-color: #ff0000; /* Red */
            cursor:not-allowed;
        }
        #generateButton.generating:hover {
            transform: scale(0.7) rotate(-1deg); 
        }
        img#generatedImage {
            display: block; /* added display block to remove bottom margin of image */
            margin-top: 2rem;
        }
        .instructions ul {
            text-align: left;
        }
        .center-content {
            text-align: center;
        }
        /* This will ensure your custom highlight styling has precedence */
        .ui-menu-item-wrapper{
            border-radius: 1px;
            border-color: rgba(0, 0, 0, 0.279);
            border-style: solid;
            width: fit-content;
        }
        .custom-highlight {
            background-color: rgba(229, 255, 0, 0.25) !important; /* Example color, use !important to ensure override */
            text-decoration: solid !important;
            border-color: gold !important;
            width: fit-content;
        }

        /* add transitions to the autocomplete-open that appears when it gets removed or added to autocomplete-space */

        .autocomplete-space {
            margin-top: 0px !important; /* Adjust this value based on your needs */
        }

        .imagesContainer {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(40%, 1fr));
            grid-template-rows: auto auto;
            grid-column-gap: 20px;
            grid-row-gap: 20px;
        }

        .imagesContainer img {
            width: 100% !important;
            height: auto !important; /* Maintains aspect ratio */
            object-fit: contain; /* Maintains aspect ratio without stretching the image */
        }

        .loraCardGrid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            grid-template-rows: auto;
            grid-column-gap: 5px;
            grid-row-gap: 5px;
            /* round the corners: */

        }

        .loraContainer {
            /* remove scrollbar: */
            scrollbar-width: none;
        }

        /* .form-control { */
            /* display: flex; */
            /* flex-direction: column; */
            /* gap: 10px; Provides space between label and select box */
        /* } */


        #imageOverlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.7); /* Dim background */
            display: flex;
            justify-content: center; /* Centers horizontally */
            align-items: center;     /* Centers vertically */
            z-index: 1000; /* Ensure it's above other elements */
        }

        #overlayImage {
            max-width: 80%;
            max-height: 80%;
            object-fit: contain; /* Adds support for maintaining aspect ratio */
        }

        /* add on hover styling, animations, etc to all the summaries in the doc */
        summary {
            cursor: pointer;
            transition: transform 0.7s, background-color 0.3s;
            transform: scale(1) rotate(0deg); /* Default state */
            transform-origin: center; /* Ensures the scaling happens from the center */
            padding: 8px;
        }
        summary:hover {
            transform: scale(1.08) rotate(1deg); 
            background-color: #a200ff4f; /* Red */
        }

        .autocomplete-open {
            margin-top: 130px !important; /* Adjust this value based on your needs */
        }

        .ui-helper-hidden-accessible {
            display: none !important;
        }


    </style>

    <!-- Google tag (gtag.js) -->


</head>
<body>

    <div id="description" style="display: none;">
        JSCammie is a Free FLUX, PDXL and SD 1.5 Stable Diffusion Generator | Generate free images SFW & NSFW with multiple models, loras & more!
    </div>

    <style>
        .loadingGradient {
            /* animate the gradient spinning: */
            background-color: var(--background-colour);
            /* Create a linear gradient at 45 degrees from pink to blue */
            background-image: linear-gradient(45deg, var(--bg-colour-1), var(--bg-colour-2));
            /* Repeat the gradient */
            background-repeat: repeat
        }
        .loadingBarGradient {
            /* Create a linear gradient at 45 degrees from pink to blue */
            background-image: linear-gradient(-45deg, rgb(73, 103, 255), rgb(255, 132, 234));
            /* Repeat the gradient */
            background-repeat: repeat
        }
    </style>

    <!-- add a loading screen that covers the whole page until all content is loaded, include a loading bar: -->
    <!-- loading screen div -->
    <div class="loadingGradient" id="loadingScreen" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; display: flex; justify-content: center; align-items: center; z-index: 1000; transition: opacity 0.5s;">
        <!-- center of screen loading bar -->
        <div style="width: 40%; padding: 20px; border-radius: 10px; display: flex; flex-direction: column; align-items: center;">
            <h2>Loading...</h2>
            <div style="width: 100%; background-color: #00000015; border-radius: 10px;">
                <div class="loadingBarGradient" id="loadingBar" style="width: 0%; height: 20px; border-radius: 10px; transition: width 0.5s;"></div>
            </div>
        </div>
    </div>

    <!-- popup that displays how long it took to load, for example: 3.65s -->
    <div style="position: fixed; top: 0; right: 0; padding: 10px; background-color: #00000015; border-radius: 0 0 0 10px; z-index: 1000;">
        <p id="loadTime">Loading...</p>
    </div>

    <script>
        // remove the loading screen when the page is fully loaded:
        window.addEventListener('load', function() {
            // get the loading screen element:
            const loadingScreen = document.getElementById('loadingScreen');
            // fade out the loading screen:
            loadingScreen.style.opacity = 0;

            // make it so they can click through the loading screen to the content below it:
            loadingScreen.style.pointerEvents = 'none';

            // get the load time element:
            const loadTime = document.getElementById('loadTime');
            // get the time it took to load the page:
            const loadTimeMS = new Date().getTime() - window.performance.timing.navigationStart;
            // set the load time text to the time it took to load the page in seconds (3.54s for example):
            loadTime.innerText = `Loaded in ${loadTimeMS / 1000}s`;

            // remove the loading screen after 3 second:
            setTimeout(() => {
                loadingScreen.remove();

                setTimeout(() => {
                    loadTime.remove();
                }, 500);
            }, 500);
        });

        // loading bar:
        let loadingBar = document.getElementById('loadingBar');
        document.onreadystatechange = function () {
            if (document.readyState == "interactive") {
                loadingBar.style.width = '50%';
            }
            if (document.readyState == "complete") {
                loadingBar.style.width = '100%';
            }
        }

        // spin the loading gradient
        let loadingGradient = document.getElementsByClassName('loadingGradient')[0];
        let loadingGradientDeg = 0;
        setInterval(() => {
            loadingGradient.style.backgroundImage = `linear-gradient(${loadingGradientDeg}deg, var(--bg-colour-1), var(--bg-colour-2))`;
            loadingGradientDeg += 1;
        }, 100);
    </script>

    <script>
        let loraDataKeys = ['style', 'effect', 'concept', 'clothing', 'character', 'pose', 'background']
    </script>

    <%- include('../partials/_navigation') %>

    <div class="center-fully-no-flex" style="margin-bottom: 1rem;">
        <%- include('../partials/_bannerAdvert') %>
    </div>

    <div class="container round-frosted page-content mw75-dynamic" style="margin-bottom: 12rem;">
        
        <div class="flex-div" style="padding: 40px; padding-bottom: 0px; justify-content: center;">

            <h2>Welcome to the AI Image Generator!</h2>

            <!-- style the save slot buttons, with on hover effects -->
            <style>

                .saveSlotButtonDiv {
                    display: flex;
                    justify-content: space-between;
                }

                .saveSlobtDiv[button] {
                    margin-right: 0%;
                    margin-left: 80%;
                }

                /* make sure the save slot button is ONLY ONE LINE: */
                .saveSlotButton {
                    border: none;
                    color: white;
                    padding: 2px;
                    text-align: center;
                    word-wrap: normal;
                    text-decoration: none;
                    display: inline-block;
                    font-size: 15px;
                    margin: 0 2px;
                    cursor: pointer;
                    transition: transform 0.7s, background-color 0.3s; /* Adjust time as needed */
                    transform: scale(1) rotate(0deg); /* Default state */
                    transform-origin: center; /* Ensures the scaling happens from the center */
                    width: fit-content;
                }


                .saveSlotButton.Load {
                    background-color: #4c68af95; /* Green */
                }
                .saveSlotButton.Load:hover {
                    transform: scale(1.08) rotate(1deg); 
                    background-color: #4c6aaf; /* Green */
                }


                .saveSlotButton.Delete {
                    background-color: #ff000095; /* Red */
                }
                .saveSlotButton.Delete:hover {
                    transform: scale(1.08) rotate(1deg); 
                    background-color: #ff0000; /* Red */
                }


                .saveSlotButton.Update {
                    background-color: #2fa72d95; /* Red */
                }
                .saveSlotButton.Update:hover {
                    transform: scale(1.08) rotate(1deg); 
                    background-color: #5dbe40; /* Red */
                }

                .createSaveSlotButton {
                    background-color: #4caf4f95; /* Green */
                    border: none;
                    color: white;
                    padding: 7px 12px;
                    text-align: center;
                    text-decoration: none;
                    display: inline-block;
                    font-size: 16px;
                    margin: 4px 2px;
                    cursor: pointer;
                    transition: transform 0.7s, background-color 0.3s; /* Adjust time as needed */
                    transform: scale(1) rotate(0deg); /* Default state */
                    transform-origin: center; /* Ensures the scaling happens from the center */
                }
                .createSaveSlotButton:hover {
                    transform: scale(1.08) rotate(1deg); 
                    background-color: #4CAF50; /* Green */
                }
                .createSaveSlotButton:active {
                    transform: scale(1.1);
                    background-color: #ffe600; /* Red */
                }
                .createSaveSlotButton[disabled] {
                    background-color: #60606095; /* Green */
                    cursor: not-allowed;
                }



            </style>

            <details>
                <% if (aiSaveSlots) { %>
                <summary>Save Slots (<%=aiSaveSlots.length%>)</summary>
                <% } else { %>
                <summary>Save Slots (0)</summary>
                <% } %>
                <div class="form-control">
                    <!-- Display Existing Save Slots -->
                    <% if (aiSaveSlots && aiSaveSlots.length > 0) { %>
                        <% timeSaveSlotsMS = new Date().getTime() %>
                        <div id="saveSlotMasterDiv"></div>
                        <script>
                            // fetch the users save slots from /ai-saves-get and display them:
                            window.refreshSaveSlots = window.refreshSaveSlots || async function() {
                                await fetch('/ai-saves-get')
                                .then(response => response.json())
                                .then(data => {
                                    // check if there are any save slots:
                                    if (!data.aiSaveSlots) {
                                        return;
                                    }
                                    // Handle loaded data
                                    // get the save slots from the data:
                                    const saveSlots = data.aiSaveSlots;
                                    // make a div inside of saveSlotMasterDiv with a details for each save slot, with the summary being the name of the save slot:
                                    const saveSlotMasterDiv = document.getElementById('saveSlotMasterDiv');
                                    finalHtml = ''
                                    saveSlots.forEach(saveSlot => {
                                        // made the div id the saveSlot id so it can be used to load the save slot:
                                        
                                        finalHtml += `<div id="saveSlot-${saveSlot.saveSlotId}">
                                            <details>
                                            <summary class="saveSlotButtonDiv">${saveSlot.name} <br>
                                                <button class="saveSlotButton Load" type="button" onclick="loadSlot('${saveSlot.saveSlotId}')">Load 💾</button>
                                                <button class="saveSlotButton Delete" type="button" onclick="deleteSlot('${saveSlot.saveSlotId}')">Delete 🗑️</button>
                                                <button class="saveSlotButton Update" type="button" onclick="updateSlot('${saveSlot.saveSlotId}')">Update ⬆️</button>
                                            </summary>
                                            <input id="saveSlot-${saveSlot.saveSlotId}-prompt" type="hidden" value="${saveSlot.prompt}"></input> 
                                            <input id="saveSlot-${saveSlot.saveSlotId}-negativeprompt" type="hidden" value="${saveSlot.negativeprompt}"></input>
                                            <input id="saveSlot-${saveSlot.saveSlotId}-aspectRatio" type="hidden" value="${saveSlot.aspectRatio}"></input>
                                            <input id="saveSlot-${saveSlot.saveSlotId}-model" type="hidden" value="${saveSlot.model}"></input>
                                            <input id="saveSlot-${saveSlot.saveSlotId}-loras" type="hidden" value="${saveSlot.loras}"></input>
                                            <input id="saveSlot-${saveSlot.saveSlotId}-lora_strengths" type="hidden" value="${saveSlot.lora_strengths}"></input>
                                            <input id="saveSlot-${saveSlot.saveSlotId}-steps" type="hidden" value="${saveSlot.steps}"></input>
                                            <input id="saveSlot-${saveSlot.saveSlotId}-cfg" type="hidden" value="${saveSlot.cfg}"></input>
                                            <input id="saveSlot-${saveSlot.saveSlotId}-seed" type="hidden" value="${saveSlot.seed}"></input>


                                            <p>Prompt: ${saveSlot.prompt}</p>
                                            <p>Negative Prompt: ${saveSlot.negativeprompt}</p>
                                            <p>Aspect Ratio: ${saveSlot.aspectRatio}</p>
                                            <p>Model: ${saveSlot.model}</p>
                                            <p>Lora's: ${saveSlot.loras}</p>
                                            <p>Lora Strengths: ${saveSlot.lora_strengths}</p>
                                            <p>Steps: ${saveSlot.steps}</p>
                                            <p>CFG: ${saveSlot.cfg}</p>
                                            <p>Seed: ${saveSlot.seed}</p>
                                            </details>
                                            </div>

                                            <br>
                                            </div>
                                            `  
                                    })
                                    finalHtml += ''
                                    saveSlotMasterDiv.innerHTML = finalHtml;
                                    
                                });
                            }

                            refreshSaveSlots();

                            
                            
                        </script>
                        <% timeSaveSlotsAfterMS = new Date().getTime() %>
                        <% timeSaveSlotsMS = timeSaveSlotsAfterMS - timeSaveSlotsMS %>
                        <p>Save Slots Loaded in <%=timeSaveSlotsMS%>ms</p>
                    <% } %>

                    <!-- Form to Create a New Save Slot -->

                    <!-- if user is logged in let them use the form, else show a grayed out version with text ontop -->
                    <% if (session.loggedIn) { %>
                        <form id="createSlotForm">
                            <input type="text" id="saveSlotName" name="name" placeholder="Slot Name">
                            <button class="createSaveSlotButton" type="submit">Create Slot</button>
                        </form>
                    <% } else { %>
                        <form id="createSlotForm">
                            <input type="text" id="saveSlotName" name="name" placeholder="Slot Name" disabled>
                            <button class="createSaveSlotButton" type="submit" disabled>Create Slot</button>
                        </form>
                        <!-- center the <p>: -->
                        <style>
                            .disabledSaveSlots {
                                text-align: center;
                            }
                        </style>
                        <p class="disabledSaveSlots" >You must be logged in to create a save slot!</p>
                    <% } %>


                    <script>
                        // JavaScript to handle form submission and slot loading

                        document.getElementById('createSlotForm').addEventListener('submit', function(event) {
                            event.preventDefault();

                            slotName = document.getElementById('saveSlotName').value

                            if (!confirm(`Are you sure you want to create the slot: "${slotName}"?`)) {
                                return; // Exit the function if the user clicks 'Cancel'
                            }

                            let selectedLoras = ''
                            let loraStrengths = []
                            
                            // use masterLoraData to get the lora selected and strength:
                            selectedLoras = Object.keys(masterLoraData).map(loraKey => {
                                return masterLoraData[loraKey].selected ? loraKey : ''
                            }).filter(lora => lora !== '')

                            // do the same for .strength only the ones that are selected:
                            loraStrengths = Object.keys(masterLoraData).map(loraKey => {
                                return masterLoraData[loraKey].selected ? masterLoraData[loraKey].strength : ''
                            }).filter(strength => strength !== '')


                            let savedata = {
                                name: document.getElementById('saveSlotName').value,
                                prompt: document.getElementById('prompt').value,
                                negativeprompt: document.getElementById('negativeprompt').value,
                                aspectRatio: document.getElementById('aspectRatio').value,
                                model: document.getElementById('model').value,
                                loras: selectedLoras,
                                lora_strengths: loraStrengths,
                                steps: document.getElementById('steps').value,
                                quantity: 2,
                                cfg: document.getElementById('cfguidance').value,
                                seed: document.getElementById('seed').value
                            }

                            // Send a request to the server to create a new slot
                            fetch('/ai-save-create', {
                                method: 'POST',
                                body: JSON.stringify(savedata),
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            }).then(response => response.json())
                            .then(data => {
                                // Handle response
                                refreshSaveSlots()
                            });
                        });

                        function updateSlot(slotId) {
                            // add a popup asking for confirmation to update the slot:
                            slotName = document.getElementById(`saveSlot-${slotId}`).getElementsByTagName('summary')[0].innerText

                            if (!confirm(`Are you sure you want to update the slot: "${slotName}"?`)) {
                                return; // Exit the function if the user clicks 'Cancel'
                            }

                            event.preventDefault();

                            let selectedLoras = ''
                            let loraStrengths = []
                            
                            // use masterLoraData to get the lora selected and strength:
                            selectedLoras = Object.keys(masterLoraData).map(loraKey => {
                                return masterLoraData[loraKey].selected ? loraKey : ''
                            }).filter(lora => lora !== '')

                            // do the same for .strength only the ones that are selected:
                            loraStrengths = Object.keys(masterLoraData).map(loraKey => {
                                return masterLoraData[loraKey].selected ? masterLoraData[loraKey].strength : ''
                            }).filter(strength => strength !== '')


                            let savedata = {
                                saveSlotId: slotId,
                                prompt: document.getElementById('prompt').value,
                                negativeprompt: document.getElementById('negativeprompt').value,
                                aspectRatio: document.getElementById('aspectRatio').value,
                                model: document.getElementById('model').value,
                                loras: selectedLoras,
                                lora_strengths: loraStrengths,
                                steps: document.getElementById('steps').value,
                                quantity: 2,
                                cfg: document.getElementById('cfguidance').value,
                                seed: document.getElementById('seed').value
                            }

                            // get all loraSelectionsSummarys to get the lora strength from them:
                            document.querySelectorAll('#loraSelectionsSummary .lora-details input[type="range"]').forEach(slider => {
                                savedata.lora_strengths.push(slider.value)
                            })

                            fetch('/ai-save-update', {
                                method: 'POST',
                                body: JSON.stringify(savedata),
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            }).then(response => response.json())
                            .then(data => {
                                // Handle response
                                alert('Updated Save Slot!')
                                refreshSaveSlots()
                            });
                        }

                        function exportAIData() {
                            // Get the AI data from the form
                            let aiData = {
                                prompt: document.getElementById('prompt').value,
                                negativeprompt: document.getElementById('negativeprompt').value,
                                aspectRatio: document.getElementById('aspectRatio').value,
                                model: document.getElementById('model').value,
                                loras: [],
                                lora_strengths: [],
                                steps: document.getElementById('steps').value,
                                quantity: 2,
                                cfg: document.getElementById('cfguidance').value,
                                seed: document.getElementById('seed').value,
                            }

                            // Get the selected Loras:
                            let loraSelectionContainers = document.getElementsByClassName('loraSelection');

                            // get all loraSelectionsSummarys to get the lora strength from them:
                            document.querySelectorAll('#loraSelectionsSummary .lora-details input[type="range"]').forEach(slider => {
                                aiData.lora_strengths.push(slider.value)
                            })

                            for (let i = 0; i < loraSelectionContainers.length; i++) {
                                const loraSelection = loraSelectionContainers[i];
                                // Get all checkboxes within the current loraSelection container
                                const checkboxes = loraSelection.querySelectorAll('input[type="checkbox"]:checked');
                                
                                // Loop through the checked checkboxes and add their value (assuming value is used as ID) to the loras string
                                checkboxes.forEach(checkbox => {
                                    aiData.loras.push(checkbox.value);
                                });
                            }

                            // export it to a yaml file:
                            let yamlData = {
                                "prompt": aiData.prompt,
                                "negativeprompt": aiData.negativeprompt,
                                "aspectRatio": aiData.aspectRatio,
                                "model": aiData.model,
                                "loras": aiData.loras,
                                "lora_strengths": aiData.lora_strengths,
                                "steps": aiData.steps,
                                "quantity": aiData.quantity,
                                "cfg": aiData.cfg,
                                "seed": aiData.seed
                            }

                            // save it to a file and download it without jsyaml:
                            let yamlString = `${aiData.prompt}<SPLIT>${aiData.negativeprompt}<SPLIT>${aiData.aspectRatio}<SPLIT>${aiData.model}<SPLIT>${aiData.loras}<SPLIT>${aiData.lora_strengths}<SPLIT>${aiData.steps}<SPLIT>${aiData.quantity}<SPLIT>${aiData.cfg}<SPLIT>${aiData.seed}`

                            let blob = new Blob([yamlString], {type: 'text/yaml'});
                            let url = URL.createObjectURL(blob);
                            let a = document.createElement('a');
                            a.href = url;
                            a.download = `${aiData.model}.aidata`;
                            document.body.appendChild(a);
                            a.click();
                            window.URL.revokeObjectURL(url);
                            document.body.removeChild(a);


                        }



                        function importAiData(data) {
                            if (!confirm(`Are you sure you want to load this data?\n${data}`)) {
                                return; // Exit the function if the user cancels the action
                            }

                            // Split data lines and then extract values after colon and trim spaces
                            let yamlData = data.split('\n').map(line => line.includes(':') ? line.split(':')[1].trim() : '');

                            // yamlData.length() is not a function, use length instead

                            // if there isnt 10 values then the data is invalid, use <SPLIT> to split it instead, making sure <SPLIT> is removed from the data:
                            if (yamlData.length !== 10) {
                                yamlData = data.split('<SPLIT>').map(line => line.trim());
                            }

                            // if there still isnt 10 values then the data is invalid:
                            if (yamlData.length !== 10) {
                                alert('Invalid data, could not load AI data!');
                                return;
                            }

                            // loras and lora_strengths are strings of arrays like: "['lora1','lora2']" and "['1','2']", make sure to remove the brackets and split by comma, also remove the quotes:

                            let aiData = {
                                prompt: yamlData[0],
                                negativeprompt: yamlData[1],
                                aspectRatio: yamlData[2],
                                model: yamlData[3],
                                loras: yamlData[4].replace('[','').replace(']','').split(',').map(lora => lora.replace(/'/g, '').trim()),
                                lora_strengths: yamlData[5].replace('[','').replace(']','').split(',').map(strength => strength.replace(/'/g, '').trim()),
                                steps: yamlData[6],
                                cfg: yamlData[8],
                                seed: yamlData[9]
                            };

                            function setValueSafely(elementId, value) {
                                const element = document.getElementById(elementId);
                                if (element) {
                                    element.value = value;
                                } else {
                                    console.warn(`Element with ID '${elementId}' not found.`);
                                }
                            }

                            // check if the value is undefined or null, if so then dont change it:
                            function setValueSafelyIfNotUndefinedOrNull(elementId, value) {
                                if (value !== undefined && value !== null) {
                                    setValueSafely(elementId, value);
                                }
                            }

                            // Set the values in the form
                            setValueSafelyIfNotUndefinedOrNull('prompt', aiData.prompt);
                            setValueSafelyIfNotUndefinedOrNull('negativeprompt', aiData.negativeprompt);
                            setValueSafelyIfNotUndefinedOrNull('aspectRatio', aiData.aspectRatio);
                            setValueSafelyIfNotUndefinedOrNull('model', aiData.model);
                            setValueSafelyIfNotUndefinedOrNull('steps', aiData.steps);
                            setValueSafelyIfNotUndefinedOrNull('cfguidance', aiData.cfg);
                            setValueSafelyIfNotUndefinedOrNull('seed', aiData.seed);

                            // refresh prompt negpromt on input stuff:
                            document.getElementById('prompt').dispatchEvent(new Event('change'));
                            document.getElementById('negativeprompt').dispatchEvent(new Event('change'));

                            // if the model value starts sdxl- AND isnt in the select box then default to sdxl-autismmix:
                            if (!document.getElementById('model').querySelector(`option[value="${aiData.model}"]`)) {
                                if (aiData.model.startsWith('sdxl-')) {
                                    document.getElementById('model').value = 'sdxl-autismmix';
                                }
                                if (aiData.model.startsWith('flux-')) {
                                    document.getElementById('model').value = 'flux-unchained';
                                }
                                if (!aiData.model.startsWith('sdxl-') && !aiData.model.startsWith('flux-')) {
                                    document.getElementById('model').value = 'fluffysonic';
                                }
                            } else {
                                document.getElementById('model').value = aiData.model;
                            }

                            // fire the change event for the model select box and the aspect ratio select box:
                            document.getElementById('model').dispatchEvent(new Event('change'));


                            document.getElementById('aspectRatio').dispatchEvent(new Event('change'));

                            // set all the loras to unchecked:
                            // document.querySelectorAll('.loraGridContainer input[type="checkbox"]').forEach(checkbox => {
                            //     checkbox.checked = false;
                            //     checkbox.dispatchEvent(new Event('change')); // Fire the change event if needed
                            // });

                            // ONLY UNCHECK THE CHECKBOX IF IT IS CHECKED, THIS ABOVE CODE IS TERRIBLE FOR PERFORMANCE:
                            // document.querySelectorAll('.loraGridContainer input[type="checkbox"]:checked').forEach(checkbox => {
                            //     checkbox.checked = false;
                            //     checkbox.dispatchEvent(new Event('change')); // Fire the change event if needed
                            // });

                            // set all masterDataLoras to be unselected first:
                            for (let loraId in masterLoraData) {
                                masterLoraData[loraId].selected = false;
                                masterLoraData[loraId].strength = masterLoraData[loraId].defaultStrength;
                            }

                            // if there are no loras then dont do anything:
                            if (aiData.loras.length > 0) {
                                // check the checkboxes for the loras in the save slot:
                                for (let i = 0; i < aiData.loras.length;) {
                                    let loraId = aiData.loras[i];
                                    let loraStrength = aiData.lora_strengths[i];

                                    console.log(`loraId: ${loraId}\nloraStrength: ${loraStrength}`)

                                    masterLoraData[loraId].selected = true;
                                    masterLoraData[loraId].strength = Number(loraStrength);
                                
                                    i++
                                }
                            }

                            loadLoras();
                            updateLoraSelectionsSummary();
                                
                        }




                        function loadSlot(slotId) {

                            slotName = document.getElementById(`saveSlot-${slotId}`).getElementsByTagName('summary')[0].innerText

                            if (!confirm(`Are you sure you want to load the slot: "${slotName}"?`)) {
                                return; // Exit the function if the user clicks 'Cancel'
                            }

                            // load the slot with the given slotId
                            let saveData = document.getElementById(`saveSlot-${slotId}`)

                            // set the generator form values to the save slot values:
                            // get the save slot details:
                            const saveSlotDetails = saveData.getElementsByTagName('details')[0];
                            const saveSlotDetailsParagraphs = saveSlotDetails.getElementsByTagName('p');


                            // selectedLoras is document

                            const saveSlotPrompt = document.getElementById(`saveSlot-${slotId}-prompt`).value
                            const saveSlotNegativePrompt = document.getElementById(`saveSlot-${slotId}-negativeprompt`).value
                            const saveSlotAspectRatio = document.getElementById(`saveSlot-${slotId}-aspectRatio`).value
                            const saveSlotModel = document.getElementById(`saveSlot-${slotId}-model`).value
                            const saveSlotLoras = document.getElementById(`saveSlot-${slotId}-loras`).value
                            const saveSlotSteps = document.getElementById(`saveSlot-${slotId}-steps`).value
                            const saveSlotCFG = document.getElementById(`saveSlot-${slotId}-cfg`).value
                            const saveSlotSeed = document.getElementById(`saveSlot-${slotId}-seed`).value

                            let saveSlotLoraStrengths = []

                            // const saveSlotLoraStrengths = document.getElementById(`saveSlot-${slotId}-lora_strengths`).value || [];
                            if (document.getElementById(`saveSlot-${slotId}-lora_strengths`)) {
                                saveSlotLoraStrengths = document.getElementById(`saveSlot-${slotId}-lora_strengths`).value
                                // split the string into an array:
                                saveSlotLoraStrengths = saveSlotLoraStrengths.split(',')
                            }

                            // set the generator form values to the save slot values:
                            document.getElementById('prompt').value = saveSlotPrompt;
                            document.getElementById('negativeprompt').value = saveSlotNegativePrompt;
                            document.getElementById('aspectRatio').value = saveSlotAspectRatio;
                            
                            // if the model value starts sdxl- AND isnt in the select box then default to sdxl-autismmix:
                            if (!document.getElementById('model').querySelector(`option[value="${saveSlotModel}"]`)) {
                                if (saveSlotModel.startsWith('sdxl-')) {
                                    document.getElementById('model').value = 'sdxl-autismmix';
                                }
                                if (saveSlotModel.startsWith('flux-')) {
                                    document.getElementById('model').value = 'flux-unchained';
                                }
                                if (!saveSlotModel.startsWith('sdxl-') && !saveSlotModel.startsWith('flux-')) {
                                    document.getElementById('model').value = 'fluffysonic';
                                }
                            } else {
                                document.getElementById('model').value = saveSlotModel
                            }
                            
                            // convert the loras string into an array:
                            saveSlotLorasArray = saveSlotLoras.split(',');

                            console.log(`saveSlotLorasArray:\n${saveSlotLorasArray}\n\nsaveSlotLoraStrengths:\n${saveSlotLoraStrengths}`)

                            document.querySelectorAll('.loraGridContainer input[type="checkbox"]:checked').forEach(checkbox => {
                                checkbox.checked = false;
                                checkbox.dispatchEvent(new Event('change')); // Fire the change event if needed
                            });

                            for (let loraId in masterLoraData) {
                                masterLoraData[loraId].selected = false;
                                masterLoraData[loraId].strength = masterLoraData[loraId].defaultStrength;
                            }

                            // if there are no loras then dont do anything:
                            if (saveSlotLoras.length > 0) {
                                // check the checkboxes for the loras in the save slot:
                                for (let i = 0; i < saveSlotLorasArray.length;) {
                                    let loraId = saveSlotLorasArray[i];
                                    let loraStrength = saveSlotLoraStrengths[i];

                                    console.log(`loraId: ${loraId}\nloraStrength: ${loraStrength}`)

                                    masterLoraData[loraId].selected = true;
                                    masterLoraData[loraId].strength = Number(loraStrength);
                                
                                    i++
                                }
                            }

                            

                            loadLoras();
                            updateLoraSelectionsSummary();

                            document.getElementById('steps').value = saveSlotSteps;
                            document.getElementById('cfguidance').value = saveSlotCFG;
                            document.getElementById('seed').value = saveSlotSeed;

                            // refresh prompt negpromt on input stuff:
                            document.getElementById('prompt').dispatchEvent(new Event('change'));
                            document.getElementById('negativeprompt').dispatchEvent(new Event('change'));

                            // fire the change event for the model select box and the aspect ratio select box:
                            document.getElementById('model').dispatchEvent(new Event('change'));
                            document.getElementById('aspectRatio').dispatchEvent(new Event('change'));
                            
                            // wait a seconds then trigger the saveLoadTextAreaHeight function to update the height of the textarea:
                            setTimeout(() => {
                                saveLoadTextAreaHeight();
                            }, 1000)
                            
                        }

                        function deleteSlot(slotId) {
                            event.preventDefault();

                            slotName = document.getElementById(`saveSlot-${slotId}`).getElementsByTagName('summary')[0].innerText

                            if (!confirm(`Are you sure you want to DELETE the slot: "${slotName}"?`)) {
                                return; // Exit the function if the user clicks 'Cancel'
                            }

                            // delete the slot with the given slotId
                            fetch('/ai-save-delete', {
                                method: 'POST',
                                body: JSON.stringify({saveSlotId: slotId}),
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            }).then(response => response.json())
                            .then(data => {
                                // Handle response
                                refreshSaveSlots()
                            });
                        }

                    </script>







                    
                </div>
            </details>
            

            <style>
                /* Common styles for buttons */
                .button {
                    background-color: #4caf4f95; /* Light green with opacity */
                    color: white;
                    padding: 15px 32px;
                    text-align: center;
                    font-size: 16px;
                    border: none !important;
                    border-radius: 10px;
                    cursor: pointer;
                    display: inline-block;
                    margin: 4px 2px;
                    transition: background-color 0.3s, transform 0.7s !important;
                    transform-origin: center;
                }

                /* Hover effect for export button */
                .exportaidatabutton:hover {
                    background-color: #4CAF50; /* Slightly darker green */
                    transform: scale(1.08) rotate(1deg);
                }
        
                /* Hover effect for import label */
                .importaidatalabel:hover {
                    background-color: #4CAF50; /* Slightly darker green */
                    transform: scale(1.08) rotate(1deg);
                }
        
                /* Active effect for export button */
                .exportaidatabutton:active {
                    background-color: #ffe600; /* Yellow */
                    transform: scale(1.1);
                }
        
                /* Hide the file input field visually but remain accessible */
                .importaidatainput {
                    display: none;
                }
            </style>
            <div style="flex: auto;">
                <button class="button exportaidatabutton" type="button" onclick="exportAIData()">Export AI Data</button>
                <label for="importAiData" class="button importaidatalabel">Import AI Data:</label>
                <input id="importAiData" class="importaidatainput" type="file">
            </div>
            
            <script>
                // get the user to upload a yaml file and then import it:
                document.getElementById('importAiData').addEventListener('change', function(event) {
                    const file = event.target.files[0];
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const text = e.target.result;
                        importAiData(text);
                    }
                    reader.readAsText(file);
                });

                // reset the input value to allow the same file to be uploaded again:
                document.getElementById('importAiData').addEventListener('click', function(event) {
                    this.value = null;
                });

            </script>

            <form id="generatorForm">

                <style>
                    textarea {
                        overflow: hidden;
                    }

                </style>

                <details open>
                    
                    <summary>Prompt & Negative Prompt</summary>

                        <!-- have a autocompleteCheckbox and a strengthArrowkeysCheckbox in a flex box side by side: -->

                        <div class="form-control settings-container">
                            <div class="setting" hidden style="display: none;">
                                <label for="strengthArrowkeysCheckbox">Disable Strength Arrowkeys:</label>
                                <input type="checkbox" id="strengthArrowkeysCheckbox">
                            </div>
                            <div class="setting">
                                <label for="autocompleteCheckbox">Disable Autocomplete:</label>
                                <input type="checkbox" id="autocompleteCheckbox">
                                <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">If you find the random scrolling etc annoying, this disables the autocomplete feature for the prompt and negative prompt fields which should help with that.</div>
                            </div>
                        </div>
                        

                        <style>
                            .wordCountGreen {
                                color: green;
                            }
                            .wordCountYellow {
                                color: yellow;
                            }
                            .wordCountRed {
                                color: red;
                            }
                        </style>

                        <div style="position: relative;" id="autocomplete-div"></div>

                        <div class="form-control">
                            <label for="prompt">
                                Prompt: <span id="promptWordCount">(70)</span>
                                <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">Use this field to describe what you want to see in the image.</div>
                            </label>
                            <textarea id="prompt" name="prompt" rows="2" required></textarea>
                        </div>

                        <div class="form-control">
                            <label for="negativeprompt">
                                Negative Prompt: <span id="negativePromptWordCount">(70)</span>
                                <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">Use this field to describe what you do not want to see in the image.</div>
                            </label>
                            <textarea id="negativeprompt" name="negativeprompt" rows="2">nsfw, monochrome, black and white, worst quality, low quality, watermark, signature, bad anatomy, bad hands, deformed limbs, blurry, cropped, cross-eyed, extra arms, extra legs, extra limbs, extra pupils, bad proportions, poorly drawn hands, simple background, bad background, bad lighting, bad perspective</textarea>
                        </div>

                </details>

                <script>
                    document.addEventListener('DOMContentLoaded', function() {

                        window.saveLoadTextAreaHeight = function() {
                            let textareas = document.querySelectorAll('textarea');

                            textareas.forEach(textarea => {
                                // Function to adjust height
                                textarea.style.height = 'auto'; // Reset height to recalculate
                                textarea.style.height = textarea.scrollHeight + 'px';

                            })
                        }

                        textareas = document.querySelectorAll('textarea');

                        textareas.forEach(textarea => {
                            textarea.addEventListener('input', saveLoadTextAreaHeight);
                            textarea.addEventListener('change', saveLoadTextAreaHeight);
                        })

                        // give me a ubuntu command to kill a process id of 91298:
                        // kill -9 91298

                        saveLoadTextAreaHeight();

                        window.addEventListener('resize', saveLoadTextAreaHeight);



                    })

                </script>



                <details open>
                    <summary>Aspect Ratio & Model</summary>
                    <div class="form-control">
                        <label for="aspectRatio">
                            Aspect Ratio:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">Select the aspect ratio you want the image to be in, this will affect the dimensions of the image.</div>
                        </label>

                        <select id="aspectRatio" name="aspectRatio" value="square">
                            <option value="square">Square</option>
                            <option value="portrait">Portrait</option>
                            <option value="landscape">Landscape</option>
                            <option value="16:9">16:9 (Wide)</option>
                            <option value="9:16">9:16 (Tall)</option>
                            <option value="21:9">21:9 (Ultra-Wide)</option>
                            <option value="9:21">9:21 (Ultra-Tall)</option>
                        </select>
                    </div>

                    <div class="form-control">
                        <label for="model">
                            Model:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Select the model you want to use to generate the image.<br>
                                    Certain models have different architectures and will need different prompts to generate the desired image, this can be denoted by the keyword in brackets at the start of the model.<br>
                                    For example: "(SDXL) AutismMix" is an SDXL architecture model.
                                </div>
                        </label>
                        <select id="model" name="model">
                            <option value="fluffysonic">(SD 1.5) FluffySonic (Sonic the Hedgehog by kitsune_sage)</option>
                            <option value="realisticVision">(SD 1.5) realisticVision (Realstic)</option>
                            <option value="furryblend">(SD 1.5) FurryBlend (Furry/Anime)</option>
                            <option value="sdxl-autismmix">(SDXL) Autism Mix ("Better" PonyXL, uses PonyXL Prompting)</option>
                            <option value="sdxl-sonichasautismmix">(SDXL) SonicHasAutismMix (SonicDiffusionXL & AutismMix merge, uses PonyXL Prompting)</option>
                            <option value="sdxl-ponyrealism">(SDXL) Pony Realism (Realistic, uses PonyXL Prompting)</option>
                            <option value="flux-unchained">(FLUX) Unchained (Everything, natural language prompting)</option>
                        </select>
                    </div>
                </details>

                <script>
                    // on document load, if model is set to sdxl-ponydiffusion then set it to sdxl-autismmix:
                    document.addEventListener('DOMContentLoaded', function() {
                        if (document.getElementById('model').value === 'sdxl-ponydiffusion') {
                            document.getElementById('model').value = 'sdxl-autismmix';
                        }
                    })
                </script>

                <div class="advanced">
                    <div></div>
                    <div></div>

                    <% loraDataKeys = ['style', 'effect', 'concept', 'clothing', 'character', 'pose', 'background'] %>

                    <style>
                      
                        .loraContainer {
                            max-height: 600px !important; /* Adjust as needed for your layout */
                            height: fit-content;
                            width: 100%;
                            overflow-y: auto; /* Allows scrolling within the container */
                            border: 1px solid #00ff6a;
                            border-radius: 4px;
                            padding: 4px;
                        }

                      
                        .checkbox-container {
                          display: flex;
                          align-items: center;
                          margin-bottom: 2px; /* Adds space between checkbox lines */
                        }
                      
                        .checkbox-container label {
                          flex-grow: 1; /* Ensures the label takes up the available space */
                          margin-right: 8px; /* Space between label and favorite button */
                        }
                      
                        .favorite-btn {
                          background: none;
                          border: none !important;
                          color: #ccc;
                          cursor: pointer;
                          padding: 0; /* Removes extra space around the button */
                          margin-right: 8px; /* Space between label and favorite button */
                          transition: color 0.7s; /* Smooth transition for color change */
                          width: 30px !important;
                        }
                      
                        .favorite-btn:hover {
                            color: #ffec80; /* Gold color on hover to indicate interactivity */
                            transition: color 0.1s;
                        }
                      
                        .favorite-btn.favorite {
                            color: #ffd700; /* Gold color for active favorite */
                            transition: color 0.7s;
                        }

                        .loraGridContainer {
                            display: none;
                        }

                        .loraGridContainer.active {
                            background-color: rgba(255, 255, 255, 0.05);
                            padding: 4px;
                            width: 100%; /* Ensure select boxes take full width of their container */
                            max-width: 100%; /* Adjust as needed for your layout */
                            max-height: 500px;
                            height: fit-content;
                            overflow-y: auto; /* Adds scroll to selects if they exceed max height */
                            display: grid;
                            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); /* Adjust as needed */
                            gap: 4px; /* Space between select boxes */
                            /* make it so its left align: */
                            justify-content: flex-start;
                        }
                      
                        /* Additional styling for the search input for consistency */
                        #loraSearch {
                            width: 100%;
                            padding: 8px;
                            margin-bottom: 4px; /* Adds space between the search box and the first category */
                            box-sizing: border-box; /* Ensures padding does not affect the overall width */
                            border-color: #00ff6a;
                        }

                        #loraSelectionsSummaryDetails * {
                            -webkit-user-select: none; /* Safari */
                            -moz-user-select: none; /* Firefox */
                            -ms-user-select: none; /* IE10+/Edge */
                            user-select: none; /* Standard */
                        }

                      </style>

                    <details id="loraSelectionsSummaryDetails" open>
                        <summary>Loras (<span id="totalLorasSelected"></span>/<span id="totalLoras"></span>)</summary>
                        <div class="form-control">
                            <label for="loraSearch">
                                Lora Search:
                                <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this field to search for a specific Lora by name, use the buttons below to search by category.
                                </div>
                            </label>
                            <input type="text" id="loraSearch" onkeyup="loadLoras()" placeholder="Search for a lora...">
                        </div>
                        <!-- Somewhere in your HTML -->

                        <style>
                            /* styling for the sorting buttons, make sure they are next to eachother horizontally and not above/below! 
                            use purple colours and active class to show which one is selected! */
                            
                            .sorting-btn {
                                background-color: #4caf6a40;
                                border: 3px solid #4caf6a !important;
                                color: white;
                                padding: 7px 15px;
                                text-align: center;
                                font-size: 16px;
                                border-radius: 10px;
                                cursor: pointer;
                                display: inline-block;
                                margin: 4px 2px;
                                transition: background-color 0.3s, transform 0.7s !important;
                                transform-origin: center;
                            }

                            .sorting-btn:hover {
                                background-color: #4CAF50;
                                transform: scale(1.08) rotate(1deg);
                            }

                            /* detect active class and apply style: */

                            .sorting-btn.active {
                                background-color: #4CAF50;
                                transform: scale(1.08)
                            }

                            .category-btn.deactive {
                                background-color: #24242440;
                                border: 3px solid #000000 !important;
                                color: rgb(94, 94, 94);
                                padding: 7px 15px;
                                text-align: center;
                                font-size: 16px;
                                border-radius: 10px;
                                cursor: pointer;
                                display: inline-block;
                                margin: 4px 2px;
                                transition: background-color 0.3s, transform 0.7s !important;
                                transform-origin: center;
                            }
                            .category-btn {
                                background-color: #8c4caf40;
                                border: 3px solid #8c4caf !important;
                                color: white;
                                padding: 7px 15px;
                                text-align: center;
                                font-size: 16px;
                                border-radius: 10px;
                                cursor: pointer;
                                display: inline-block;
                                margin: 4px 2px;
                                transition: background-color 0.3s, transform 0.7s !important;
                                transform-origin: center;
                            }
                            .category-btn:hover {
                                background-color: #ce9be9;
                                transform: scale(1.08) rotate(1deg);
                            }
                            .category-btn.active {
                                background-color: #8C4CAF;
                                transform: scale(1.08) 
                            }
                            
                        </style>

                        <div>

                            <div>Lora Sorting:
                                <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use these buttons to sort the Loras alphabetically or by newest added/updated.
                                </div>
                            </div>
                            <button class="sorting-btn" id="sortAlphaBtn" type="button">Sort Alphabetically</button>
                            <button class="sorting-btn" id="sortNewestBtn" type="button">Sort by Newest</button>
                            <button class="sorting-btn" id="sortUsesBtn" type="button">Sort by Uses</button>
                            <button class="sorting-btn" id="sortLastUsedBtn" type="button">Sort by Last Used</button>
                        </div>

                        <!-- showSafeCheckbox, showSuggestiveCheckbox, showNSFWCheckbox -->

                        <style>
                            /* styling for the showSafeCheckbox, showSuggestiveCheckbox, showNSFWCheckbox, make sure they are next to eachother horizontally and not above/below! 
                            use purple colours and active class to show which one is selected! */
                            
                            #showSafeCheckbox, #showSuggestiveCheckbox, #showNSFWCheckbox, #showNACheckbox {
                                background-color: #8c4caf40;
                                border: 3px solid #8c4caf !important;
                                color: white;
                                padding: 7px 15px;
                                text-align: center;
                                font-size: 16px;
                                border-radius: 10px;
                                cursor: pointer;
                                display: inline-block;
                                margin: 4px 2px;
                                transition: background-color 0.3s, transform 0.7s !important;
                                transform-origin: center;
                            }
                            </style>
                            
                            <div>
                                <div>
                                    Lora Safety Ratings:
                                    <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                    <div class="tooltiptext">
                                        Use these checkboxes to filter Loras by their safety ratings, with explicit loras being hidden behind the "suggestive" and "nsfw" ratings.
                                    </div>
                                </div>


                                <label for="showNACheckbox" >N/A:</label>
                                <input class="safetyRatingCheckbox" type="checkbox" id="showNACheckbox" name="showNACheckbox" value="showNACheckbox" checked>
                                
                                <label for="showSafeCheckbox" style="color: green;"> Safe:</label>
                                <input class="safetyRatingCheckbox" type="checkbox" id="showSafeCheckbox" name="showSafeCheckbox" value="showSafeCheckbox" checked>
                                <br>
                                <label for="showSuggestiveCheckbox" style="color: yellow;"> Suggestive:</label>
                                <input class="safetyRatingCheckbox" type="checkbox" id="showSuggestiveCheckbox" name="showSuggestiveCheckbox" value="showSuggestiveCheckbox">

                                <label for="showNSFWCheckbox" style="color: red;"> NSFW:</label>
                                <input class="safetyRatingCheckbox" type="checkbox" id="showNSFWCheckbox" name="showNSFWCheckbox" value="showNSFWCheckbox">

                            </div>
                        <br>

                        <% loraDataKeys.forEach(category => { %>
                            <% if (lora_data[category]) { %>
                                <button id="<%=category%>-CategoryButton" type="button" class="category-btn"><%= category.charAt(0).toUpperCase() + category.slice(1) %></button>
                            <% } %>
                        <% }); %>

                        <div id="loraContainer" class="loraContainer">
                            <div id="loraGridContainer" class="loraCardGrid">

                            </div>
                        </div>

                        <div id="loraSelectionsSummary">

                        </div>

                        <script>
                            

                            <% if (session.lastRequestSD) { %>
                                let lastRequestSD = <%- JSON.stringify(session.lastRequestSD) %>;
                            <% } else { %>
                                let lastRequestSD = {};
                            <% } %>

                            var favorites = {};

                            let savedFavoritedIds = lastRequestSD.favoriteLoras || [];

                            // console.log(`${savedFavoritedIds} are the saved favorited ids`)

                            // Load the favorites from the last request
                            savedFavoritedIds.forEach(id => {
                                favorites[id] = true;
                            });

                            var masterLoraData = {}

                            <% loraDataKeys.forEach(category => { %>
                                <% if (lora_data[category]) { %>
                                    // console.log the lora_data structure:
                                    <% Object.entries(lora_data[category]).forEach(([key, value]) => { %>
                                        masterLoraData['<%= key %>'] = {
                                            strength: <%= value.strength || 'Null' %>,
                                            words: `<%= value.words || 'Null' %>`,
                                            description: `<%= value.description || 'Null' %>`,
                                            name: `<%= value.name || key %>`,
                                            link: `<%= value.link || 'Null' %>`,
                                            dateCreated: `<%= value.dateCreated || 'Null' %>`,
                                            rating: `<%= value.rating || 'n/a' %>`,
                                            image: `<%= value.image %>`,
                                            selected: false,
                                            defaultStrength: <%= value.strength || 'Null' %>,
                                            usesCount: BigInt(`<%= value.usesCount || '0' %>`),
                                            lastUsed: `<%= value.lastUsed || '0' %>`
                                        }
                                    <% }); %>
                                <% } %>
                            <% }); %>

                            var lastSelectedCategory = 'style';

                            // console.log(masterLoraData)

                            function toggleFavorite(loraId) {
                                favorites[loraId] = !favorites[loraId];
                                loadLoras();
                            }

                            function loraChecks(key, value, model, showSafe, showSuggestive, showNSFW, showNA, loraSearch, name) {
                                // Model is SDXL and lora isnt SDXL
                                if (model.startsWith("sdxl") && !key.includes("-sdxl")) {
                                    // console.log(`${name} is not compatible with ${model}`)
                                    masterLoraData[key].selected = false;
                                    return false;
                                } 
                                if (model.startsWith("flux") && !key.includes("-flux")) {
                                    masterLoraData[key].selected = false;
                                    return false;
                                } 
                                if (!model.startsWith("sdxl") && !model.startsWith("flux")) {
                                    if (key.includes("-sdxl") || key.includes("-flux")) {
                                        masterLoraData[key].selected = false;
                                        return false;
                                    }
                                }

                                // Check if the Lora is safe, suggestive, nsfw, or n/a
                                if (value.rating === 'safe' && !showSafe) {
                                    return false;
                                } else if (value.rating === 'suggestive' && !showSuggestive) {
                                    return false;
                                } else if (value.rating === 'nsfw' && !showNSFW) {
                                    return false;
                                } else if (value.rating === 'n/a' && !showNA) {
                                    return false;
                                }

                                // Check if the Lora .name or any .words matches the search query:
                                // if (!name.includes(loraSearch) && !value.words.includes(loraSearch) && !key.includes(loraSearch) && !value.description.includes(loraSearch)) {
                                //     return false; 
                                // }

                                // split the loraSearch into an array of words by spaces and commas:
                                loraSearchArray = loraSearch.split(/[\s,]+/);
                                
                                // check if the lora .name, .words, .description, key, have all of the words in the loraSearchArray anywhere in them:
                                if (!loraSearchArray.every(word => name.includes(word) || value.words.includes(word) || key.includes(word) || value.description.includes(word))) {
                                    return false;
                                }

                                return true
                            }

                            // recreate the above code, using filtering from the model select box to show only the loras that are compatible with the selected model, and the safety ratings checkboxes to show only the loras that are safe, suggestive, nsfw, or n/a:
                            function loadLoras() {
                                // Clear the loraContainer
                                let loraGridContainer = document.getElementById('loraGridContainer');
                                loraGridContainer.innerHTML = '';

                                modelRaw = document.getElementById('model');

                                model = modelRaw.options[modelRaw.selectedIndex].value;
                                
                                showSafe = document.getElementById('showSafeCheckbox').checked;
                                showSuggestive = document.getElementById('showSuggestiveCheckbox').checked;
                                showNSFW = document.getElementById('showNSFWCheckbox').checked;
                                showNA = document.getElementById('showNACheckbox').checked; 

                                loraSearch = document.getElementById('loraSearch').value.toLowerCase();

                                // sorting logic:
                                let sortAlphaBtn = document.getElementById('sortAlphaBtn');
                                let sortNewestBtn = document.getElementById('sortNewestBtn');
                                let sortUsesBtn = document.getElementById('sortUsesBtn');
                                let sortLastUsedBtn = document.getElementById('sortLastUsedBtn');

                                if (sortAlphaBtn.classList.contains('active')) {
                                    // sort the loras alphabetically:
                                    masterLoraData = Object.fromEntries(Object.entries(masterLoraData).sort());
                                } else if (sortNewestBtn.classList.contains('active')) {
                                    // sort the loras by newest ms timestamp "1717352144698.4163" as example:
                                    masterLoraData = Object.fromEntries(Object.entries(masterLoraData).sort((a, b) => {
                                        return parseFloat(b[1].dateCreated) - parseFloat(a[1].dateCreated);
                                    }));
                                } else if(sortUsesBtn.classList.contains('active')) {
                                    // sort the loras by uses count:
                                    masterLoraData = Object.fromEntries(Object.entries(masterLoraData).sort((a, b) => {
                                        return parseFloat(b[1].usesCount) - parseFloat(a[1].usesCount);
                                    }));
                                } else if (sortLastUsedBtn.classList.contains('active')) {
                                    // sort the loras by last used ms timestamp "1717352144698" as example:
                                    masterLoraData = Object.fromEntries(Object.entries(masterLoraData).sort((a, b) => {
                                        return parseFloat(b[1].lastUsed) - parseFloat(a[1].lastUsed);
                                    }));
                                }

                                // sort any loras that are favorited or have .selected true to the top of the list, with favorited loras being at the very top:
                                masterLoraData = Object.fromEntries(Object.entries(masterLoraData).sort((a, b) => {
                                    if (favorites[b[0]] && !favorites[a[0]]) {
                                        return 1;
                                    } else if (favorites[a[0]] && !favorites[b[0]]) {
                                        return -1;
                                    } else if (b[1].selected && !a[1].selected) {
                                        return 1;
                                    } else if (a[1].selected && !b[1].selected) {
                                        return -1;
                                    } else {
                                        return 0;
                                    }
                                }));



                                // Create the Lora elements
                                Object.entries(masterLoraData).forEach(([key, value]) => {

                                    name = value.name.toLowerCase();

                                    // Check if the Lora is compatible with the selected model

                                    // if loraChecks returns false then continue to the next lora:
                                    if (!loraChecks(key, value, model, showSafe, showSuggestive, showNSFW, showNA, loraSearch, name)) {
                                        return;
                                    } else {
                                        // only show the loras in the selected category:
                                        if (lastSelectedCategory.toLowerCase() !== key.split('-')[0]) {
                                            return false;
                                        }
                                    }

                                    

                                    
                                    let loraElement = document.createElement('div');
                                    loraElement.classList.add('lorabox');
                                    loraElement.innerHTML = `
                                        <div class="checkbox-container">
                                            <input class="loraCheckboxDirect" type="checkbox" id="${key}" name="${key.split('-')[0]}" value="${key}" ${value.selected ? 'checked' : ''}>
                                            <label id="label-rating-${key}" for="${key}" style="color: ${value.rating === 'safe' ? 'green' : value.rating === 'suggestive' ? 'yellow' : value.rating === 'nsfw' ? 'red' : 'white'};">${value.rating.toUpperCase()}</label>
                                            <label id="label-${key}" for="${key}">${value.name}</label>
                                            <button type="button" class="favorite-btn" onclick="toggleFavorite('${key}')">${favorites[key] ? '★' : '☆'}</button>
                                        </div>
                                        <img loading="lazy" id="${key}-image" width="256" height="384" src="${value.image || 'default-image.jpg'}" onclick="document.getElementById('${key}').checked = !document.getElementById('${key}').checked; document.getElementById('${key}').dispatchEvent(new Event('change'));">
                                    `;
                                    loraGridContainer.appendChild(loraElement);
                                });

                                // add event listener for every class="loraCheckboxDirect" to toggle the selected state of the lora inside the masterLoraData object:
                                document.querySelectorAll('.loraCheckboxDirect').forEach(checkbox => {
                                    checkbox.addEventListener('change', function() {
                                        let loraId = this.value;
                                        masterLoraData[loraId].selected = this.checked;
                                        loadLoras();
                                        updateLoraSelectionsSummary();
                                    })
                                })

                                // if a category button has no loras then add class deactive to it:
                                document.querySelectorAll('.category-btn').forEach(button => {
                                    let category = button.innerText.toLowerCase();
                                    let categoryLoras = Object.entries(masterLoraData).filter(([key, value]) => key.split('-')[0] === category);
                                    let categoryLorasArrays = {}
                                    // check loras in the category:
                                    categoryLoras.forEach(([key, value]) => {
                                        name = value.name.toLowerCase();
                                        if (loraChecks(key, value, model, showSafe, showSuggestive, showNSFW, showNA, loraSearch, name)) {
                                            categoryLorasArrays[key] = value;
                                        }
                                    })

                                    if (Object.keys(categoryLorasArrays).length === 0) {
                                        button.classList.add('deactive');
                                        // button.classList.remove('active');
                                        button.disabled = true;
                                    } else {
                                        button.classList.remove('deactive');
                                        // button.classList.add('active');
                                        button.disabled = false;
                                    }
                                    
                                })

                            }

                            // add window onload function:
                            document.addEventListener('DOMContentLoaded', function() {                             

                                // Set form values to the last request values
                                document.getElementById('prompt').value = lastRequestSD.prompt || '';
                                document.getElementById('negativeprompt').value = lastRequestSD.negativeprompt || 'nsfw, monochrome, black and white, worst quality, low quality, watermark, signature, bad anatomy, bad hands, deformed limbs, blurry, cropped, cross-eyed, extra arms, extra legs, extra limbs, extra pupils, bad proportions, poorly drawn hands, simple background, bad background, bad lighting, bad perspective';
                                document.getElementById('aspectRatio').value = lastRequestSD.aspectRatio || 'square';
                                document.getElementById('model').value = lastRequestSD.model || 'fluffysonic';
                                document.getElementById('steps').value = lastRequestSD.steps || '20';
                                document.getElementById('cfguidance').value = lastRequestSD.cfguidance || '6';
                                document.getElementById('seed').value = lastRequestSD.seed || '-1';
                                document.getElementById('scheduler').value = lastRequestSD.scheduler || "eulera";

                                // refresh prompt negpromt on input stuff:
                                document.getElementById('prompt').dispatchEvent(new Event('change'));
                                document.getElementById('negativeprompt').dispatchEvent(new Event('change'));

                                // fire the change event for the model select box and the aspect ratio select box:
                                document.getElementById('model').dispatchEvent(new Event('change'));
                                document.getElementById('aspectRatio').dispatchEvent(new Event('change'));

                                let autocompleteenabled = lastRequestSD.autocompleteenabled || false;
                                if (autocompleteenabled === true) {
                                    document.getElementById('autocompleteCheckbox').checked = true;
                                } else {
                                    document.getElementById('autocompleteCheckbox').checked = false;
                                }

                                // set the loras as selected inside of the masterLoraData object:
                                if (!lastRequestSD.loras) {
                                    lastRequestSD.loras = [];
                                }
                                lastRequestSD.loras.forEach(loraId => {
                                    masterLoraData[loraId].selected = true;
                                });

                                // category button logic, if the button is clicked then show only the loras in that category:
                                document.querySelectorAll('.category-btn').forEach(button => {
                                    button.addEventListener('click', function() {
                                        lastSelectedCategory = button.innerText;
                                        // set class to active for the button that was clicked:
                                        document.querySelectorAll('.category-btn').forEach(button => {
                                            button.classList.remove('active');
                                        })
                                        button.classList.add('active');
                                        // load the loras:
                                        loadLoras();
                                    })
                                })

                                // sorting button logic, if the button is clicked then sort the loras alphabetically or by newest:
                                // document.getElementById('sortAlphaBtn').addEventListener('click', function() {
                                //     document.getElementById('sortAlphaBtn').classList.add('active');
                                //     document.getElementById('sortNewestBtn').classList.remove('active');
                                //     // load the loras:
                                //     loadLoras();
                                // })

                                // document.getElementById('sortNewestBtn').addEventListener('click', function() {
                                //     document.getElementById('sortNewestBtn').classList.add('active');
                                //     document.getElementById('sortAlphaBtn').classList.remove('active');
                                //     // load the loras:
                                //     loadLoras();
                                // })

                                // new code that uses the class of .sorting-btn to add event listeners to all of them:
                                document.querySelectorAll('.sorting-btn').forEach(button => {
                                    button.addEventListener('click', function() {
                                        document.querySelectorAll('.sorting-btn').forEach(button => {
                                            button.classList.remove('active');
                                        })
                                        button.classList.add('active');
                                        // load the loras:
                                        loadLoras();
                                    })
                                })

                                // using class="safetyRatingCheckbox" to filter the loras by their safety ratings:
                                document.querySelectorAll('.safetyRatingCheckbox').forEach(checkbox => {
                                    checkbox.addEventListener('change', function() {
                                        // load the loras:
                                        loadLoras();
                                        updateLoraSelectionsSummary()
                                    })
                                })

                                document.getElementById('sortAlphaBtn').classList.add('active');
                                document.getElementById('style-CategoryButton').classList.add('active');

                                // on model change:
                                document.getElementById('model').addEventListener('change', function() {


                                    // load the loras:
                                    loadLoras();
                                    updateLoraSelectionsSummary();
                                })

                                loadLoras();
                                updateLoraSelectionsSummary();

                            })

                        </script>

                        <script>
                            function setStrength(loraId, strength) {
                                event.preventDefault();
                                document.getElementById(`strength-${loraId}`).value = strength;
                                document.getElementById(`strength-${loraId}-value`).innerText = strength;
                                masterLoraData[loraId].strength = strength;
                            }

                            function updateLoraSelectionsSummary() {
                                loraSelectionsSummary = document.getElementById('loraSelectionsSummary');
                                loraSelectionsSummary.innerHTML = '';
                                selectedLoras = Object.entries(masterLoraData).filter(([key, value]) => value.selected);
                                // total loras needs to respect the model type ("doesnt have sdxl or flux in the key", "sdxl in key", "flux in key")

                                totalLoras = Object.entries(masterLoraData).filter(([key, value]) => {
                                    if (document.getElementById('model').value.startsWith("sdxl")) {
                                        return key.includes("-sdxl");
                                    } else if (document.getElementById('model').value.startsWith("flux")) {
                                        return key.includes("-flux");
                                    } else {
                                        return !key.includes("-sdxl") && !key.includes("-flux");
                                    }
                                }).length;

                                totalRatingLoraCount = 0

                                // now have a seperate totalLoras for the safety ratings checkboxes, make sure it also follows the model:
                                totalRatingLoraCount = Object.entries(masterLoraData).filter(([key, value]) => {
                                    if (document.getElementById('model').value.startsWith("sdxl")) {
                                        return key.includes("-sdxl");
                                    } else if (document.getElementById('model').value.startsWith("flux")) {
                                        return key.includes("-flux");
                                    } else {
                                        return !key.includes("-sdxl") && !key.includes("-flux");
                                    }
                                }).filter(([key, value]) => {
                                    if (document.getElementById('showSafeCheckbox').checked && value.rating === 'safe') {
                                        return true;
                                    } else if (document.getElementById('showSuggestiveCheckbox').checked && value.rating === 'suggestive') {
                                        return true;
                                    } else if (document.getElementById('showNSFWCheckbox').checked && value.rating === 'nsfw') {
                                        return true;
                                    } else if (document.getElementById('showNACheckbox').checked && value.rating === 'n/a') {
                                        return true;
                                    } else {
                                        return false;
                                    }
                                }).length;


                                document.getElementById('totalLorasSelected').innerText = selectedLoras.length;
                                document.getElementById('totalLoras').innerText = `${totalRatingLoraCount} (${totalLoras})`;

                                if (selectedLoras.length === 0) {
                                    loraSelectionsSummary.innerHTML = '<p>No Loras selected</p>';
                                    return;
                                }

                                selectedLoras.forEach(([key, value]) => {
                                    loraSummary = document.createElement('div');
                                    loraSummary.classList.add('lora-details');

                                    let wordsFormatted = ""

                                    value.words.split(';').map((word, index) => {
                                        noWhitespaceWord = word.trim()
                                        wordsFormatted += `<a class="lora-words">
                                            Words ${index + 1}: ${noWhitespaceWord}<br>
                                            <button class="lora-words-copy-button" onclick="copyXWordsToClipboard(\`${noWhitespaceWord}\`)">Copy Words</button>
                                        </a><br>`
                                    })

                                    if (value.lastUsed == '0') {
                                        value.lastUsed = 'Never Used'
                                    } else {
                                        value.lastUsed = new Date(parseFloat(value.lastUsed)).toLocaleString()
                                    }

                                    loraSummary.innerHTML = `
                                        <div class="lora-toggle">
                                            <input id="enable-${key}" type="checkbox" value="${key}" checked onchange="masterLoraData['${key}'].selected = this.checked; loadLoras(); updateLoraSelectionsSummary();">
                                            <label for="enable-${key}">
                                                <span class="lora-category">${key.split('-')[0].charAt(0).toUpperCase() + key.split('-')[0].slice(1)}</span> | ${value.name || 'Null'} | Uses: ${value.usesCount}
                                            </label>
                                        </div>
                                        <div class="lora-info">
                                            <a class="lora-id"><strong>ID:</strong> ${key}<br><button class="lora-words-copy-button" onclick="copyXWordsToClipboard(\`${key}\`)">Copy ID</button></a>
                                            <p class="lora-description"><strong>Description:</strong> ${value.description || 'Null'}</p>
                                            <p class="lora-strength"><strong>Default Strength:</strong> ${value.strength || 'Null'}</p>
                                            ${wordsFormatted}
                                            <p class="lora-strength-slider"> 
                                                <input type="range" id="strength-${key}" name="strength-${key}" min="-3" max="3" step="0.1" value="${value.strength}" style="width: 80%;">
                                                <a id="strength-${key}-value" style="transform: translateY(-32px) !important; margin: 4px; font-size: 28px">${value.strength}</a>
                                            </p>
                                            <button class="lora-reset-strength-button" onclick="setStrength('${key}', '${value.defaultStrength}')">Reset Strength</button>

                                            <p class="lora-date"><strong>Date Created/Updated:</strong> ${new Date(parseFloat(value.dateCreated)).toLocaleString()} | Last Used: ${value.lastUsed}</p>
                                            <p class="lora-link"><strong>Link:</strong> <a href="${value.link || '#'}">Clickable Link</a></p>
                                        </div>
                                    `;
                                    loraSelectionsSummary.appendChild(loraSummary);
                                });

                                // Add event listeners for the strength sliders
                                document.querySelectorAll('.lora-strength-slider input').forEach(slider => {
                                    slider.addEventListener('input', function() {
                                        loraId = slider.id.split('-').slice(1).join('-');
                                        setStrength(loraId, slider.value);
                                        document.getElementById(`strength-${loraId}-value`).innerText = slider.value;
                                    })
                                })
                                
                                            

                            }

                            function copyXWordsToClipboard(words) {
                                // Prevent default button behavior
                                event.preventDefault();
                                event.stopPropagation();

                                // Ensure navigator.clipboard is available; it might not be available in non-secure contexts
                                if (!navigator.clipboard) {
                                    console.error('Clipboard API not available. Please use a secure context (HTTPS).');
                                    return;
                                }

                                // Attempt to copy the words to the clipboard
                                navigator.clipboard.writeText(words).then(
                                    function() {
                                        console.log('Words copied to clipboard:', words);
                                    },
                                    function(err) {
                                        console.error('Async: Could not copy text: ', err);
                                    }
                                );
                            }
                        </script>

                        <!-- <button type="button" id="loadAllLoras" onclick="loadLoras()">Load All Loras</button> -->

                                        </details>
                                    </details>
                                </details>
                            </details>
                        </details>
                    </details>
                    </details>

                    <style>
                        #clearAllLorasButton {
                            width: 100%;
                            background-color: #ff000085; /* Red */
                            border: none;
                            color: white;
                            padding: 15px 32px;
                            text-align: center;
                            text-decoration: none;
                            display: inline-block;
                            font-size: 16px;
                            margin: 4px 2px;
                            cursor: pointer;
                            transition: transform 0.7s, background-color 0.3s; /* Adjust time as needed */
                            transform: scale(1) rotate(0deg); /* Default state */
                            transform-origin: center; /* Ensures the scaling happens from the center */
                        }
                        #clearAllLorasButton:hover {
                            transform: scale(1.08) rotate(1deg); 
                            background-color: #ff0000; /* Red */
                        }
                    </style>

                    <button type="button" id="clearAllLorasButton" onclick="Object.entries(masterLoraData).forEach(([key, value]) => { value.selected = false; }); loadLoras(); updateLoraSelectionsSummary();">Clear All Loras</button>
                    <br>
                </div>

                <input name="user-session" id="user-session" value="<%-session.accountId%>" hidden>


                


                <style>
                    .canvas-container {
                        position: relative;
                        max-width: 100%; /* Adjust the max-width as per your layout */
                        margin: auto; /* Center align the container */
                        display: flex;
                        justify-content: center; /* Center horizontally */
                        align-items: center; /* Center vertically */
                    }

                    #maskCanvas, #displayCanvas {
                        max-width: 100%; /* This ensures that the canvas doesn't exceed the width of its container */
                        height: auto; /* Maintain the aspect ratio */
                        position: absolute; /* Position the canvases absolutely */
                        top: 0;
                        left: 0;
                        border: 1px solid black;
                    }

                    #maskCanvas {
                        z-index: 10; /* Ensures the maskCanvas is on top */
                    }

                    #displayCanvas {
                        z-index: 9; /* Below the maskCanvas */
                    }
                </style>

            
                <details id="extrasDetails" class="left-align-no-flex" open>
                    <summary>Image2Image, Inpainting</summary>

                    <div class="form-control">
                        <label for="img2imgCheckbox">
                            Enable Image2Image:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this checkbox to enable the Image2Image feature, which allows you to upload an image to be used by the AI Image Generator<br>
                                </div>
                        </label>
                        <input type="checkbox" id="img2imgCheckbox" name="img2imgCheckbox">
                    </div>
                    
                    <div class="form-control" id="img2imgControls" style="display: none;">
                        <label>
                            Upload Image:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    This is where you upload an image to be used by the AI Image Generator<br>
                                </div>
                        </label>
                        <input type="file" id="uploadedImage" name="uploadedImage" accept="image/*">
                        <br>
                        <label for="img2imgStrength">
                            img2img Strength:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this slider to adjust the strength of the Image2Image feature, the default is 70%<br>
                                    Higher values will make the image less like the original
                                </div>
                        </label>
                        <a><input type="range" id="img2imgStrength" name="img2imgStrength" min="0" max="100" step="1" value="70">
                        <span id="img2imgStrengthValue" class="range-value">70%</span></a>
                    </div>

                    <style>
                        #openposeControls {
                            max-width: 100%; /* Adjust this as needed */
                            /* Add more styling as needed */
                        }
                    
                        #stickCanvas {
                            width: 100%; /* This will scale the canvas to fit the container */
                            height: auto; /* Maintain aspect ratio */
                            display: block; /* Prevents extra space below the canvas */
                        }
                    </style>
                    

                    <div class="form-control" hidden style="display: none;">
                        <label for="openposeCheckbox">OpenPose:</label>
                        <input type="checkbox" id="openposeCheckbox" name="openposeCheckbox">
                    </div>

                    <div class="form-control" id="openposeControls">
                        <canvas id="stickCanvas" width="512" height="756" style="background-color: black;"></canvas>
                        <script src="../scripts/openpose.js" type="text/javascript"></script>
                    </div>

                    <script>
                        // show the openposeControls when the openposeCheckbox is checked:
                        document.getElementById('openposeCheckbox').addEventListener('change', function() {
                            // if the openpose checkbox is checked
                            if (this.checked) {
                                // show the openposeControls
                                document.getElementById('openposeControls').style.display = 'block';
                            } else {
                                // hide the openposeControls
                                document.getElementById('openposeControls').style.display = 'none';
                            }
                        });
                        document.getElementById('openposeCheckbox').dispatchEvent(new Event('change'));
                    </script>



                    <!-- inpainting checkbox -->
                    <div class="form-control">
                        <label>
                            Enable Inpainting:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this checkbox to enable the Inpainting feature, which allows you to upload an image to be used by the AI Image Generator<br>
                                    Inpainting lets you paint over an image to change the content that's painted over
                                </div>
                        </label>
                        <input type="checkbox" id="inpaintingCheckbox" name="inpaintingCheckbox">
                    </div>

                    

                    <div class="form-control" id="inpaintingControls" style="display: none;" >

                        <label for="inpaintingStrength">
                            Inpainting Strength:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this slider to adjust the strength of the Inpainting feature, the default is 70%<br>
                                    Higher values will make the inpainting less like the original, lower values will make it more like the original
                                </div>
                        </label>
                        <input type="range" id="inpaintingStrength" name="inpaintingStrength" min="0" max="100" step="1" value="70">
                        <span id="inpaintingStrengthValue" class="range-value">70%</span>

                        <label for="inpaintingImage">Upload Image:</label>
                        <input type="file" id="inpaintingImage" id="inpaintingImage" name="inpaintingImage" accept="image/*">

                        <!-- Pen Size Slider -->
                        <label for="penSize">
                            Pen Size (<span id="penSizeValue">20</span>)
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this slider to adjust the size of the pen used for inpainting, the default is 20<br>
                                    Higher values will make the pen larger, lower values will make it smaller
                                </div>
                        </label>
                        <input type="range" id="penSize" min="20" max="200" value="20">
                        
                        <!-- Eraser Checkbox -->
                        <label>
                            Eraser:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this checkbox to enable the eraser tool, which allows you to erase parts of the inpainting<br>
                                </div>
                        </label>
                        <input type="checkbox" id="eraserCheckbox">
                        <p>
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    <div>
                                        To paint on the canvas Touch and Drag on Mobile, or Click and Drag on Desktop<br>
                                        To erase parts of the inpainting, enable the eraser tool and paint over the parts you want to erase<br>
                                    </div>
                                </div>
                        </p>
                        <div class="canvas-container">
                            <canvas id="maskCanvas"></canvas>
                            <canvas id="displayCanvas"></canvas>
                        </div>
                        <script src="../scripts/ai-inpainting.js?v3" type="text/javascript"></script>

                        <script>
                            // get the penSize element
                            const penSize = document.getElementById('penSize');

                            // get the penSizeValue element
                            const penSizeValue = document.getElementById('penSizeValue');

                            // add an event listener for when the penSize changes
                            penSize.addEventListener('input', function() {
                                // update the penSizeValue
                                penSizeValue.innerText = this.value;
                            });
                            penSize.dispatchEvent(new Event('input'));
                        </script>

                    </div>

                </details>


            <!-- <script> to make inpaintingCheckbox and img2imgCheckbox exclusive: -->
            <script>
                // get the inpaintingCheckbox and img2imgCheckbox elements
                const inpaintingCheckbox = document.getElementById('inpaintingCheckbox');
                const img2imgCheckbox = document.getElementById('img2imgCheckbox');

                // get the inpaintingControls and img2imgControls elements
                const inpaintingControls = document.getElementById('inpaintingControls');
                const img2imgControls = document.getElementById('img2imgControls');
        
                function disableCheckboxes(target) {
                    if(target != "inpaintingCheckbox") {
                        inpaintingCheckbox.checked = false;
                        inpaintingControls.style.display = 'none';
                    } if (target != "img2imgCheckbox") {
                        img2imgCheckbox.checked = false;
                        img2imgControls.style.display = 'none';
                    }

                    // open the details element with the target id: "extrasDetails":
                    
                    extrasDetails = document.getElementById('extrasDetails');
                    extrasDetails.open = true;


                    switch(target) {
                        case "inpaintingCheckbox":
                            inpaintingCheckbox.checked = true;
                            inpaintingControls.style.display = 'block';
                            break;
                        case "img2imgCheckbox":
                            img2imgCheckbox.checked = true;
                            img2imgControls.style.display = 'block';
                            break;
                    }
                }

                // add an event listener for when the inpaintingCheckbox changes
                inpaintingCheckbox.addEventListener('change', function() {
                    // if the inpaintingCheckbox is checked
                    if (this.checked) {
                        disableCheckboxes("inpaintingCheckbox")
                    }
                });

                // add an event listener for when the img2imgCheckbox changes
                img2imgCheckbox.addEventListener('change', function() {
                    // if the img2imgCheckbox is checked
                    if (this.checked) {
                        disableCheckboxes("img2imgCheckbox")
                    }
                });

            </script>
                
            </form>

        
        </div>

        <div class="flex-under-div" style="margin: 20px;">

            <!-- <center>
                <h2>We are hosting a <a style="color: gold;">$100</a> AI Contest to celebrate the new year! So be sure to check the <a href="https://discord.gg/AvbQuRmh7t" style="color:rgb(69, 196, 255)f;">discord</a> for more information!</h2>
                <br>
            </center> -->

            <style>
                /* remove the up down arrows */
                .sliderInputBox {
                    width: 70px;
                    height: auto;
                    padding: 5px;
                    margin: 0;
                    border: none;
                    border-radius: 4px;
                    text-align: center;
                }
                .sliderInputBox:focus {
                    outline: none;

                }
            </style>

                <details open>
                    <summary>Settings (Steps, Quanitity & more)</summary>
                    <label for="steps">
                        Steps:
                        <span class="tooltip" onclick="showTooltip(this)">❓</span>
                            <div class="tooltiptext">
                                Use this slider to adjust the number of steps the AI will take to generate the image<br>
                                Higher values will make the image more detailed, but will take longer to generate
                            </div>
                    </label>
                    <div class="form-control inline-slider">
                        <input form="generatorForm" type="range" id="steps" name="steps" min="5" max="75" step="1" value="20">
                        <!-- <span id="stepsValue" class="range-value">15</span> -->
                        <input form="generatorForm" type="number" class="sliderInputBox" id="stepsInput" name="stepsInput" value="15"><a id="stepsMax"></a>
                    </div>

                    <label for="cfguidance">
                        CFG:
                        <span class="tooltip" onclick="showTooltip(this)">❓</span>
                            <div class="tooltiptext">
                                Use this slider to adjust the CFG guidance value<br>
                                Here are the recommended values for the different model architectures:<br>
                                SD 1.5: 4-8<br>
                                SDXL: 3-5<br>
                                FLUX: 1<br>
                            </div>
                    </label>
                    <div class="form-control inline-slider">
                        <input form="generatorForm" type="range" id="cfguidance" name="cfguidance" min="1" max="24" step="0.5" value="6">
                        <input form="generatorForm" type="number" class="sliderInputBox" id="cfguidanceInput" name="cfguidanceInput" value="6"><a id="cfguidanceMax"></a>
                    </div>
    
                    <div class="form-control">
                        <label for="seed">
                            Seed: (-1 = random)
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this input to set the seed for the AI, -1 is random<br>
                                    The seed is used to generate the image, so the same seed will always generate the same image aslong as the other settings are the same
                                </div>
                        </label>
                        
                        <input form="generatorForm" type="number" id="seed" name="seed" min="-1999999999999" max="18446744073709551615" value="-1">
    
                    </div>

                    <div class="form-control">
                        <label for="scheduler">
                            Scheduler:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this dropdown to select the scheduler to use for the AI<br>
                                    The scheduler is used to determine how the AI will generate the image, each scheduler has different strengths and weaknesses<br>
                                    The default scheduler is the Euler Ancestral scheduler, is good at low steps, dimminishing returns at higher steps<br>
                                    The Dppm_2m scheduler is good at high steps, but can be slower<br>
                                    The DDIM scheduler is weird, but was suggested by a few users
                                </div>
                        </label>
                        <select name="scheduler" id="scheduler">
                            <option value="eulera">Euler Ancestral</option>
                            <option value="dpm">Dppm_2m</option>
                            <option value="ddim">DDIM</option>
                        </select>
                    </div>
                    
                </details>


            <script>
                // Function to update the steps, and cfguidance labels based on the current slider values
                function updateLabels() {
                    let steps = document.getElementById('steps');
                    let stepsInput = document.getElementById('stepsInput');
                    let cfguidance = document.getElementById('cfguidance');
                    let cfguidanceInput = document.getElementById('cfguidanceInput');
                    let model = document.getElementById('model');
            
                    function setSteps(min, max) {
                        steps.min = min;
                        steps.max = max;
                        stepsInput.min = min;
                        stepsInput.max = max;
                    }
            
                    function setCfguidance(min, max) {
                        cfguidance.min = min;
                        cfguidance.max = max;
                        cfguidanceInput.min = min;
                        cfguidanceInput.max = max;
                    }
                        
                    if (model.value.includes('sdxl')) {
                        setSteps(10, 30);
                        setCfguidance(3, 12)
                    } else if (model.value.includes('flux')) {
                        setSteps(4, 20);
                        setCfguidance(1, 1);
                    } else if (!model.value.includes('sdxl') && !model.value.includes('flux')) {
                        setSteps(20, 40);
                        setCfguidance(4, 12);
                    }
                        
                    document.getElementById('stepsMax').innerText = `/${steps.max}`;
                    document.getElementById('cfguidanceMax').innerText = `/${cfguidance.max}`;
            
                }

                document.getElementById('steps').addEventListener('input', function() {
                    document.getElementById('stepsInput').value = this.value;
                });

                document.getElementById('stepsInput').addEventListener('input', function() {
                    document.getElementById('steps').value = this.value;
                });

                document.getElementById('cfguidance').addEventListener('input', function() {
                    document.getElementById('cfguidanceInput').value = this.value;
                });

                document.getElementById('cfguidanceInput').addEventListener('input', function() {
                    document.getElementById('cfguidance').value = this.value;
                });

                // Update the labels on document load
                document.addEventListener('DOMContentLoaded', function() {
                    updateLabels();
                });

                // Update the labels when the model changes
                document.getElementById('model').addEventListener('change', function() {
                    updateLabels();
                });

                window.onload = function() {
                    // fire events for the steps and cfguidance sliders to update the labels:
                    document.getElementById('steps').dispatchEvent(new Event('input'));
                    document.getElementById('cfguidance').dispatchEvent(new Event('input'));
                }
            </script>
                
            <div class="form-control">

                <label for="creditsShop">
                    Credits Shop:
                    <span class="tooltip" onclick="showTooltip(this)">❓</span>
                        <div class="tooltiptext">
                            Use the credits shop to purchase additional temporary features for the AI Image Generator<br>
                            You can remove the watermark, upscale the image, and apply the fast queue for your generation
                        </div>
                </label>
                <details open class="loggedOutCreditsShop" id="creditsShop">
                    <% if (session.loggedIn) { %>
                        <summary><a class="costPElement">Cost: <span class="creditsPriceStyling"><span class="creditsPriceStyling" id="currentCreditsPrice">25</span> Credits</span></a></summary>
                    <% } else { %>
                        <summary><a class="costPElement">Cost: <span class="creditsPriceStyling"><span class="creditsPriceStyling" id="currentCreditsPrice">25</span> Credits</span> (Login Required)</a></summary>
                    <% } %>

                    <label>
                        Remove Watermark: <span><a id="removeWatermarkCreditsPrice">25</a> Credits
                        <span class="tooltip" onclick="showTooltip(this)">❓</span>
                            <div class="tooltiptext">
                                Use this checkbox to remove the watermark from the generated image<br>
                                The watermark is a small text in the bottom right corner of the image
                            </div>
                    </label>
                    <input type="checkbox" id="removeWatermarkCheckbox" name="removeWatermarkCheckbox">


                    <label>
                        Upscale Image: <span><a id="upscaleCreditsPrice">25</a> Credits
                        <span class="tooltip" onclick="showTooltip(this)">❓</span>
                            <div class="tooltiptext">
                                Use this checkbox to upscale the generated image<br>
                                Upscaling the image will make it larger, but may reduce the quality
                            </div>
                    </label>
                    <input type="checkbox" id="upscaleCheckbox" name="upscaleCheckbox">

                    <% if (session.loggedIn) { %>
                    <label>
                        Fast Queue: <span><a id="fastqueueCreditsPrice">25</a> Credits
                        <span class="tooltip" onclick="showTooltip(this)">❓</span>
                            <div class="tooltiptext">
                                Use this checkbox to enable the fast queue for the AI Image Generator<br>
                                The fast queue will prioritize your image in the queue, reducing the wait time
                            </div>
                    </label>
                    <button class="fastqueueButton" form="generatorForm" id="fastqueueButton" type="submit">Fast Queue</button>

                    <script>
                        // even default button press:
                        // for the fastqueueButton:
                        document.getElementById('fastqueueButton').addEventListener('click', function() {
                            event.preventDefault();
                            if (this.classList.contains('active')) {
        
                                this.classList.remove('active');
        
                            } else {
                                this.classList.add('active');
                            }
                        });
                    </script>
                    <% } else { %>
                    <button class="fastqueueButton" form="generatorForm" id="fastqueueButton" type="submit">Fast Queue | Cost: <span id="fastqueueCreditsPrice"></span> Credits (Login Required)</button>

                    <script>
                        // even default button press:
                        // for the fastqueueButton:
                        document.getElementById('fastqueueButton').addEventListener('click', function() {
                            event.preventDefault();
                        });
                    </script>

                    <% } %>

                </details>

                <% if (session.loggedIn) { %>
                    <% } else { %>
                        <!-- class="loggedOutCreditsShop" for creditsShop -->
                        <style>
                            .loggedOutCreditsShop {
                                color: rgb(32, 32, 32) !important;
                            }
                            /* set the checkboxes to be disabled and red: */
                            .loggedOutCreditsShop input[type="checkbox"] {
                                color: red !important;
                                background-color: gray !important;
                            }
                        </style>
    
                        <script>
                            // disable the checkboxes when the user is logged out:
                            document.querySelectorAll('.loggedOutCreditsShop input[type="checkbox"]').forEach(checkbox => {
                                checkbox.disabled = true;
                            });
                        </script>
                    <% } %>

                <style>
                    /* have it be centered, text-align doesnt work */
                    .suggestFL {
                        text-align: center;
                    }

                    .suggestFL a {
                        font-size: 24px;
                        color: rgb(255, 255, 255);
                        margin-left: auto;
                        margin-right: auto;
                        /* bold: */
                        font-weight: bold;
                    }

                    /* add glow around the text: */
                    .suggestFL a {
                        text-shadow: 0 0 20px rgb(151, 236, 255);
                    }
                </style>

                <div class="suggestFL">
                    <br>
                    <label>
                        Suggestions Page:                         
                        <span class="tooltip" onclick="showTooltip(this)">❓</span>
                            <div class="tooltiptext">
                                Use this link to suggest new features for the AI Image Generator<br>
                                You can also vote on existing suggestions to help prioritize them<br>
                                This will open in a new tab!
                            </div>
                    </label>
                    <a target="_blank" href="https://www.jscammie.com/suggestions">Suggest & Vote On, Features & Loras!</a>
                    <br>
                    <label>
                        Image History:                         
                        <span class="tooltip" onclick="showTooltip(this)">❓</span>
                            <div class="tooltiptext">
                                Use this link to view the history of images generated by the AI Image Generator<br>
                                You can view the images you have generated. This will open in a new tab!
                            </div>
                    </label>
                    <a target="_blank" href="https://www.jscammie.com/image-history">View Image History</a>
                    <br>
                    <label>
                        Booru Page:
                        <span class="tooltip" onclick="showTooltip(this)">❓</span>
                            <div class="tooltiptext">
                                Use this link to view the booru page for the AI Image Generator<br>
                                You can view the images generated by the AI Image Generator, and download them<br>
                                This will open in a new tab!
                            </div>
                    </label>
                    <a target="_blank" href="https://www.jscammie.com/booru">View Image Board/ Booru</a>
                    <br>
                </div>

                <div id="additionalInfo"></div><br>
                <div id="response"></div>
                <div id="queuePosition" style="display: none;">
                    Your position in queue: <span style="color: gold;" id="positionNumber"></span>
                    <span class="tooltip" onclick="showTooltip(this)">❓</span>
                        <div class="tooltiptext">
                            This is your position in the queue, you will be notified by a sound when your image is ready<br>
                            The number in brackets () is the total queue length, as the queue is split into 2 parts
                        </div>
                </div>

                <label>
                    Generate Image:
                    <span class="tooltip" onclick="showTooltip(this)">❓</span>
                        <div class="tooltiptext">
                            Use this button to generate the image using the AI Image Generator<br>
                            The image will be generated based on the settings you have selected
                        </div>
                </label>
                <button form="generatorForm" type="submit" id="generateButton">Generate Image</button>
                <button style="display: none;" id="cancelButton">Cancel Request</button>
            </div>
            
            <details id="outputDetails" style="display: block;" open>
                <summary>Output(s)</summary>
                <div id="advertisement" style="display: none;">
            
                </div>
                <div id="imagesContainer" class="imagesContainer"></div>
            </details>
            <br>
            
            <!-- if the imagesContainer div is empty then hide the dropdown: -->
            <script>
                imagesContainer = document.getElementById('imagesContainer')
                outputDetails = document.getElementById('outputDetails')
                imagesContainer.addEventListener('DOMNodeInserted', function() {
                    if (imagesContainer.children.length > 0) {
                        outputDetails.open = true;
                        outputDetails.style.display = 'block';
                    }
                });
                // trigger:
                imagesContainer.dispatchEvent(new Event('DOMNodeInserted'));
            </script>

            <style>

                /* blue button, space background with css magic, purple border: */
                .fastqueueButton {
                    background-image: linear-gradient(120deg, rgb(72, 72, 72) 0%, rgb(9, 9, 9) 100%);
                    border: none;
                    color: white;
                    padding: 15px 32px;
                    text-align: center;
                    text-decoration: none;
                    display: inline-block;
                    font-size: 16px;
                    margin: 4px 2px;
                    cursor: pointer;
                    transition: transform 0.7s, background-image 0.3s; /* Adjust time as needed */
                    transform: scale(0.9) rotate(0deg); /* Default state */
                    transform-origin: center; /* Ensures the scaling happens from the center */
                }

                /* when active class is added ontop of the fastqueueButton then have it be "activeated" looking: */
                .fastqueueButton.active {
                    transition: transform 0.7s, background-image 0.3s; /* Adjust time as needed */
                    transform: scale(1); 
                    background-image: linear-gradient(120deg, rgb(156, 199, 255) 0%, rgb(255, 151, 252) 100%);
                    border: 2px solid rgb(255, 144, 144);
                }

            </style>
            
            

            <style>
                .costPElement {
                    color: rgb(205, 130, 255);
                    background-color: rgba(0, 0, 0, 0.33);
                    padding:8px;
                    border-radius:8px;
                    margin:2px;
                    font-size: large;
                    width:fit-content;
                    /* center it: */
                    margin-left: auto;
                    margin-right: auto;
                    text-align: center;
                }
                .creditsPriceStyling {
                    color: rgb(238, 212, 255) !important;
                }
                
            </style>

            <script>
                <%- scripts.calculateCreditsPrice %>
            </script>
            
            <script>

                function prepareData() {
                    
                    loraCount = 0

                    Object.entries(masterLoraData).forEach(([key, value]) => {
                        if (value.selected) {
                            loraCount += 1
                        }
                    });


                    let model = document.getElementById('model').value

                    extras = {
                        removeWatermark: true,
                        upscale: true
                    }

                    let runningCost = 0

                    fastqueueCost = getFastqueuePrice(loraCount, model)
                    if (document.getElementById('fastqueueButton').classList.contains('active')) {
                        runningCost += fastqueueCost
                    }

                    extrasCosts = getExtrasPrice(extras)

                    if (document.getElementById('removeWatermarkCheckbox').checked) {
                        runningCost += extrasCosts.removeWatermark
                    }

                    if (document.getElementById('upscaleCheckbox').checked) {
                        runningCost += extrasCosts.upscale
                    }
                    
                    document.getElementById('removeWatermarkCreditsPrice').innerText = extrasCosts.removeWatermark
                    document.getElementById('upscaleCreditsPrice').innerText = extrasCosts.upscale


                    document.getElementById('fastqueueCreditsPrice').innerText = fastqueueCost


                    document.getElementById('currentCreditsPrice').innerText = runningCost
                }

                document.addEventListener('DOMContentLoaded', function() {
                    prepareData()
                });



                document.getElementById('fastqueueButton').addEventListener('click', function() {
                    prepareData()
                });

                // on model change:
                document.getElementById('model').addEventListener('change', function() {
                    prepareData()
                });
                // on lora change:
                document.getElementById('loraSelectionsSummary').addEventListener('DOMSubtreeModified', function() {
                    prepareData()
                });



                document.getElementById('removeWatermarkCheckbox').addEventListener('change', function() {
                    prepareData()
                });
                document.getElementById('upscaleCheckbox').addEventListener('change', function() {
                    prepareData()
                });

            </script>


            
            
            <br>

        </div>

    </div>

    <style>
        #advertisement {
            text-align: center !important;
            color: white;
            font-size: 20px;
            width: 90%;
            height: 80px;
            border: 1px solid rgb(255, 255, 255);
            border-radius: 10px;
            padding: 10px;
            margin: 10px;
            justify-content: center;
            display: flex;
        }
        .discordad {
            background-color: rgba(130, 86, 169, 0.584);
        }
        .redditad {
            background-color: rgba(169, 108, 86, 0.584);
        }
        .kofiad {
            background-color: rgba(86, 134, 169, 0.584);
        }
    </style>

    <script>
        // get advertisement div:
        const advertisement = document.getElementById('advertisement');
        // every 30 seconds change the advertisement, make it out of css elements, have a list of ads, and change the innerHTML of the advertisement div:\
        let ads = [
            {
                advert_id: 'discordad',
                text: ['Want to skip the queue? Join the Discord compete for a FastPass!', 'Share your images on the community Discord!', 'Got Suggestions? Join the community Discord!'],
                link: 'https://discord.gg/AvbQuRmh7t',
            },
            {
                advert_id: 'redditad',
                text: ['We have a reddit! Share your creations at r/JSCammie!', 'Share your creations at r/JSCammie!', 'Join the community at r/JSCammie!', 'Got Suggestions? Join the community at r/JSCammie!'],
                link: 'https://www.reddit.com/r/JSCammie/',
            },
            {
                advert_id: 'kofiad',
                text: ['Donate to the developer on Ko-fi!', 'Buy the developer a coffee on Ko-fi!', 'Support the developer on Ko-fi!'],
                link: 'https://ko-fi.com/jscammie',
            }
        ]

        function setAdvertisement() {
            let ad = ads[Math.floor(Math.random() * ads.length)];
            let adText = ad.text[Math.floor(Math.random() * ad.text.length)];
            advertisement.innerHTML = `<a id="advertisementcontent" href="${ad.link}" style="color: white; text-decoration: none;">${adText}</a>`;
            // set the advertisement href click area to be the full advertisement div size:
            document.getElementById('advertisementcontent').style.display = 'block';
            document.getElementById('advertisementcontent').style.width = '100%';
            document.getElementById('advertisementcontent').style.height = '100%';
            document.getElementById('advertisementcontent').style.textAlign = 'center';
            if (ad.advert_id === 'discordad') {
                // remove all classes from the advertisement div:
                classList = advertisement.classList;
                for (let i = 0; i < classList.length; i++) {
                    advertisement.classList.remove(classList[i]);
                }
                advertisement.classList.add('discordad');
            } else if (ad.advert_id === 'redditad') {
                // remove all classes from the advertisement div:
                classList = advertisement.classList;
                for (let i = 0; i < classList.length; i++) {
                    advertisement.classList.remove(classList[i]);
                }
                advertisement.classList.add('redditad');
            } else if (ad.advert_id === 'kofiad') {
                // remove all classes from the advertisement div:
                classList = advertisement.classList;
                for (let i = 0; i < classList.length; i++) {
                    advertisement.classList.remove(classList[i]);
                }
                advertisement.classList.add('kofiad');
            }

        }

        setInterval(() => {
            setAdvertisement()
        }, 30000);
        // set initial advertisement:
        setAdvertisement();
    </script>



    <div id="imageOverlay" style="display:none;">
        <img id="overlayImage" src="" alt="Enlarged view" />
    </div> 

    <!-- get partials/_footer: -->
    <%- include('../partials/_footer') %>

    <script>
        document.getElementById('img2imgCheckbox').addEventListener('change', function() {
            const isChecked = this.checked;
            const img2imgControls = document.getElementById('img2imgControls');

            if (isChecked) {
                img2imgControls.style.display = 'block';
            } else {
                img2imgControls.style.display = 'none';
            }
        });

        document.getElementById('img2imgStrength').addEventListener('input', function() {
            document.getElementById('img2imgStrengthValue').innerText = this.value + '%';
        });
        document.getElementById('img2imgStrength').dispatchEvent(new Event('input'));


        // inpainting checkbox
        document.getElementById('inpaintingCheckbox').addEventListener('change', function() {
            const isChecked = this.checked;
            const inpaintingControls = document.getElementById('inpaintingControls');

            if (isChecked) {
                inpaintingControls.style.display = 'block';
            } else {
                inpaintingControls.style.display = 'none';
            }
        });

        document.getElementById('inpaintingStrength').addEventListener('input', function() {
            document.getElementById('inpaintingStrengthValue').innerText = this.value + '%';
        });
        document.getElementById('inpaintingStrength').dispatchEvent(new Event('input'));

        // if the user presses shift and enter on their keyboard, submit the form:
        document.addEventListener('keydown', function(event) {
            if (event.shiftKey && event.key === 'Enter') {
                document.getElementById('generateButton').click();
            }
        });

    </script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Function to create a drop area
        const createDropArea = (text, side) => {
            const dropArea = document.createElement('div');
            dropArea.innerText = text;
            dropArea.backgroundImage = 'linear-gradient(120deg, rgb(72, 72, 72) 0%, rgb(9, 9, 9) 100%)';
            dropArea.style.position = 'fixed';
            dropArea.style.top = '20%';
            dropArea.style[side] = '10px';
            dropArea.style.width = '20%';
            dropArea.style.height = '60%';
            dropArea.style.border = '2px dashed white';
            dropArea.style.borderRadius = '10px';
            dropArea.style.textAlign = 'center';
            dropArea.style.paddingTop = '20%';
            dropArea.style.color = 'white';
            dropArea.style.fontSize = '20px';
            dropArea.style.display = 'none'; // Initially hidden
            document.body.appendChild(dropArea);
            return dropArea;
        };
    
        // Create drop areas and initially hide them
        const inpaintingDropArea = createDropArea('Send to Inpainting', 'left');
        const img2ImgDropArea = createDropArea('Send to Img2Img', 'right');
    
        // Function to show/hide drop areas
        const showDropAreas = (show) => {
            inpaintingDropArea.style.display = show ? 'block' : 'none';
            img2ImgDropArea.style.display = show ? 'block' : 'none';
        };
    
        // Drag events on the window to show/hide drop areas
        window.addEventListener('dragenter', (e) => {
            e.preventDefault();
            showDropAreas(true);
        });
    
        window.addEventListener('dragover', (e) => {
            e.preventDefault(); // Necessary to allow for the drop event to fire
        });
    
        window.addEventListener('dragleave', (e) => {
            e.preventDefault();
            if (e.clientX <= 0 || e.clientX >= window.innerWidth || e.clientY <= 0 || e.clientY >= window.innerHeight) {
                showDropAreas(false);
            }
        });
    
        window.addEventListener('drop', (e) => {
            e.preventDefault();
            showDropAreas(false);
        });
    
        // Function to handle file drop
        const handleFileDrop = (file, target) => {
            const checkboxId = target === 'inpainting' ? 'inpaintingCheckbox' : 'img2imgCheckbox';
            const inputId = target === 'inpainting' ? 'inpaintingImage' : 'uploadedImage';
            
            document.getElementById(checkboxId).checked = true;
            document.getElementById(checkboxId).dispatchEvent(new Event('change'));
            
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(file);
            document.getElementById(inputId).files = dataTransfer.files;
            document.getElementById(inputId).dispatchEvent(new Event('change'));
        };
    
        // Setup drop area event listeners
        const setupDropArea = (dropArea, target) => {
            dropArea.addEventListener('drop', (e) => {
                e.preventDefault();
                if (e.dataTransfer.files.length > 0) {
                    handleFileDrop(e.dataTransfer.files[0], target);
                }
                showDropAreas(false);
            });
        };
    
        setupDropArea(inpaintingDropArea, 'inpainting');
        setupDropArea(img2ImgDropArea, 'img2img');
    });

    // if inpaintingImage has a file inside it, then move the footerBar style class to be the image height downwards:
    document.getElementById('inpaintingImage').addEventListener('change', function() {
        imageHeight = document.getElementById('inpaintingImage').clientHeight;
        if (this.files.length > 0) {
            document.getElementById('footerBar').style.marginTop = `${imageHeight}px`;
        } else {
            document.getElementById('footerBar').style.marginTop = '0px';
        }
    });
    </script>
    



    <script>

        // blast everything with a change / input event to update the summary:
        // when the DOM is loaded, dispatch change events to update the summary:

        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('model').dispatchEvent(new Event('input'));
        });


        document.getElementById('imagesContainer').addEventListener('click', function(event) {
            if (event.target.tagName === 'IMG') {
                showOverlay(event.target.src);
            }
        });

        let currentImageIndex = 0;
        let imagesSrcList = [];

        function showOverlay(src) {
            const overlay = document.getElementById('imageOverlay');
            overlay.style.display = 'flex'; // Change to 'flex' to activate flexbox
            document.getElementById('overlayImage').src = src;
    
            // Disable scrolling on the body
            document.body.style.overflow = 'hidden';
            const overlayImage = document.getElementById('overlayImage');

            overlay.style.display = 'block';
            overlayImage.src = src;
            currentImageIndex = imagesSrcList.indexOf(src);

            // Add event listener for keydown
            document.addEventListener('keydown', handleArrowKeyPress);
        }

        function hideOverlay() {
            const overlay = document.getElementById('imageOverlay');
            overlay.style.display = 'none';
            
            // Enable scrolling
            document.body.style.overflow = '';

            // Remove event listener to prevent interference when overlay is not active
            document.removeEventListener('keydown', handleArrowKeyPress);
        }

        function handleArrowKeyPress(event) {
            if (!imagesSrcList.length) return; // Exit if no images are available

            if (event.key === 'ArrowRight') {
                currentImageIndex = (currentImageIndex + 1) % imagesSrcList.length;
            } else if (event.key === 'ArrowLeft') {
                currentImageIndex = (currentImageIndex - 1 + imagesSrcList.length) % imagesSrcList.length;
            } else {
                return; // Exit if not a left/right arrow key
            }
            document.getElementById('overlayImage').src = imagesSrcList[currentImageIndex];
        }

        // Function to populate imagesSrcList when images are loaded
        function populateImagesSrcList() {
            imagesSrcList = Array.from(document.querySelectorAll('#imagesContainer img')).map(img => img.src);        }

        // Add click event listener to the overlay to hide it when clicked
        document.getElementById('imageOverlay').addEventListener('click', hideOverlay);
    </script>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.1/jquery-ui.min.js"></script>

    <script>
        let timeout = null;  // This timeout variable should be outside the updateWordCount function

        function displayWordCount(promptWordCount, negativePromptWordCount) {
            const promptWordCountElement = document.getElementById('promptWordCount');
            const negativePromptWordCountElement = document.getElementById('negativePromptWordCount');

            promptWordCountElement.innerText = `Tokens: ${promptWordCount}`;
            negativePromptWordCountElement.innerText = `Tokens: ${negativePromptWordCount}`;

            function removeAllClasses(element) {
                element.classList.remove('wordCountGreen');
                element.classList.remove('wordCountYellow');
                element.classList.remove('wordCountRed');
            }

            function setWordCountClass(element, wordCount) {
                removeAllClasses(element);
                if (document.getElementById('model').value.startsWith('sdxl-')) {
                    if (wordCount > 90) {
                        element.classList.add('wordCountRed');
                    } else if (wordCount > 75) {
                        element.classList.add('wordCountYellow');
                    } else {
                        element.classList.add('wordCountGreen');
                    }
                } else if (document.getElementById('model').value.startsWith('flux-')) {
                    if (wordCount > 300) {
                        element.classList.add('wordCountRed');
                    } else if (wordCount > 135) {
                        element.classList.add('wordCountYellow');
                    } else {
                        element.classList.add('wordCountGreen');
                    }
                } else {
                    if (wordCount > 90) {
                        element.classList.add('wordCountRed');
                    } else if (wordCount > 75) {
                        element.classList.add('wordCountYellow');
                    } else {
                        element.classList.add('wordCountGreen');
                    }
                }
            }

            setWordCountClass(promptWordCountElement, promptWordCount);
            setWordCountClass(negativePromptWordCountElement, negativePromptWordCount);
        }

        function updateWordCount() {
            if (document.getElementById('prompt').value.trim() === '' && document.getElementById('negativeprompt').value.trim() === '') {
                displayWordCount(0, 0);
                return;
            }

            const delay = 1000; // Change delay to 1000 ms for 1 request per second

            // Clear the timeout if it already exists
            if (timeout !== null) {
                clearTimeout(timeout);
            }

            // Set a new timeout
            timeout = setTimeout(() => {
                getWordCount();
            }, delay);
        }

        function getWordCount() {
            const promptTextarea = document.getElementById('prompt');
            const negativePromptInput = document.getElementById('negativeprompt');

            // Construct data payload for POST request
            const data = {
                prompt: promptTextarea.value,
                negativeprompt: negativePromptInput.value
            };

            // Send POST request to server
            fetch('/token-length', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                displayWordCount(data.prompt, data.negative_prompt);
            })
            .catch(error => {
                console.error('Error fetching word counts:', error);
                displayWordCount('Error', 'Error'); // Display error in word count fields
            });
        }

        // Add event listeners for input on both the prompt textarea and the negative prompt input
        document.getElementById('prompt').addEventListener('input', updateWordCount);
        document.getElementById('negativeprompt').addEventListener('input', updateWordCount);

        // Initial update on page load
        updateWordCount();
    </script>

    <script>

        // document.getElementById('advancedCheckbox').dispatchEvent(new Event('change'));

        function checkForNullModel () {
            if (document.getElementById('model').value === null || document.getElementById('model').value === undefined || document.getElementById('model').value === "") {
                document.getElementById('model').value = document.getElementById('model').options[1].value;
                document.getElementById('model').dispatchEvent(new Event('change'));
            }
        }

        function checkForNullAspectRatio () {
            if (document.getElementById('aspectRatio').value === null || document.getElementById('aspectRatio').value === undefined || document.getElementById('aspectRatio').value === "") {
                document.getElementById('aspectRatio').value = document.getElementById('aspectRatio').options[1].value;
                document.getElementById('aspectRatio').dispatchEvent(new Event('change'));
            }
        }

        // add event listener for the model dropdown:
        document.getElementById('model').addEventListener('change', () => {
            checkForNullModel();
        });
        document.getElementById('model').dispatchEvent(new Event('change'));

        // add event listener for the aspectRatio dropdown:
        document.getElementById('aspectRatio').addEventListener('change', () => {
            checkForNullAspectRatio();
        });
        document.getElementById('aspectRatio').dispatchEvent(new Event('change'));

        // on page load // loraContainer class style to block:
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.loraContainer').forEach(container => {
                container.style.display = 'block';
            });
        });

    </script>
    
    <script> <%- scripts.aiForm %> </script>
    <script src="https://www.jscammie.com/scripts/ai-autocomplete.js?v19"></script>

</body>
</html>