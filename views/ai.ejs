<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FREE AI Image Generator | JSCammie.com</title>
    <meta name="description" content="Free Illustrious, PDXL, Stable Diffusion Generator | Generate free images SFW & NSFW with multiple models, loras & more!">
    <meta name="keywords" content="mobians.ai, illustrious, illustrious wai, illustrious loras, no sign up, no restrictions, regional prompt, regional prompter, regional prompting, comfyui, nsfw, uncensored, free, online, inpainting, img2img, txt2img, stable diffusion, ai image generator, pdxl ai image generator, ai free online, sfw, nsfw, pdxl, sd1.5, loras, lora, embeddings, pdxl, pony diffusion">
    <meta name="author" content="JSCammie">

    <link rel="canonical" href="https://www.jscammie.com/">

    <%- include('../partials/_headerAll') %>

    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-K3KJJKS1R4"></script>
    <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'G-K3KJJKS1R4');
    </script>

    <!-- Shepherd.js for guided tour -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/shepherd.js@10.0.1/dist/css/shepherd.css"/>
    <script src="https://cdn.jsdelivr.net/npm/shepherd.js@10.0.1/dist/js/shepherd.min.js"></script>
    
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"/>

    <link rel="stylesheet" href="../style.css?v=<%= version %>">
    <link rel="stylesheet" href="../ai-style.css?v=<%= version %>">

    <style>


        .container {
            display: flex;
            flex-direction: column;
            /* same width for both: */
            width: 100%;
            flex-grow: 1;
            flex-shrink: 1;
            justify-content: center;
            flex-basis: 0%;
        }

        /* Custom styles for the tour */
        .shepherd-button {
            color: white;
            border: 0;
            border-radius: 3px;
            cursor: pointer;
            margin-right: 0.5rem;
            padding: 0.5rem 1.5rem;
            transition: all 0.3s ease-out;
        }

        /* Add custom width for tour content */
        .shepherd-element {
            width: 40% !important;
            max-width: 40% !important;
        }

        /* Responsive width for smaller screens */
        @media (max-width: 1024px) {
            .shepherd-element {
                width: 75% !important;
                max-width: 75% !important;
            }
        }

        .shepherd-button-secondary {
            background: var(--highlight-colour);
        }

        .shepherd-button-primary {
            background: var(--highlight-colour-active);
        }

        .shepherd-button-skip {
            background: #ff5252;
        }

        .shepherd-element {
            background-color: var(--background-colour) !important;
            color: var(--text-colour) !important;
            border: 1px solid var(--border-colour) !important;
            border-radius: 8px;
            max-width: 400px;
            opacity: 0.95;
            z-index: 99;
            margin: 20px !important;
            padding: 5px !important;
            box-shadow: 0 0 30px rgba(0, 0, 0, 0.5) !important;
            /* Position is now handled by Shepherd positioning */
            position: absolute !important;
        }

        .shepherd-modal-overlay-container {
            z-index: 98 !important;
        }

        .shepherd-header {
            background-color: var(--background-colour) !important;
            color: var(--text-colour) !important;
            border-bottom: 1px solid var(--border-colour) !important;
        }

        /* Highlight effect for tour elements */
        .shepherd-highlight {
            box-shadow: 0 0 0 5px var(--highlight-colour) !important;
            border-radius: 4px !important;
            animation: shepherd-highlight-pulse 1.5s infinite !important;
            z-index: 99997 !important;
        }
        
        @keyframes shepherd-highlight-pulse {
            0% {
                box-shadow: 0 0 0 5px var(--highlight-colour);
            }
            50% {
                box-shadow: 0 0 0 8px var(--highlight-colour-hover);
            }
            100% {
                box-shadow: 0 0 0 5px var(--highlight-colour);
            }
        }

        .shepherd-element .shepherd-arrow {
            display: none !important;
        }

        .shepherd-content {
            font-family: inherit;
            padding: 10px !important;
            background-color: var(--background-colour) !important;
            color: var(--text-colour) !important;
        }
        
        .shepherd-text {
            padding: 10px !important;
            margin-bottom: 10px !important;
            line-height: 1.5 !important;
            font-size: 16px !important;
            color: var(--text-colour) !important;
        }
        
        .shepherd-footer {
            padding: 10px !important;
            border-top: 1px solid var(--border-colour) !important;
        }

        /* Tour start button */
        #startTourButton {
            background-color: var(--highlight-colour);
            border: none;
            color: var(--text-colour);
            padding: 10px 18px;
            border-radius: 8px;
            cursor: pointer;
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 9990;
            transition: transform 0.3s, background-color 0.3s;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            animation: pulse 2s infinite;
            font-size: 16px;
            font-weight: bold;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        #startTourButton:hover {
            transform: scale(1.05);
            background-color: var(--highlight-colour-hover);
            animation: none;
        }
        
        #startTourButton i {
            font-size: 18px;
        }

        /* Tour popup styling */
        .shepherd-title {
            font-size: 22px !important;
            font-weight: bold !important;
            margin-bottom: 15px !important;
            color: #ffffff !important;
        }
        
        @keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 var(--highlight-colour);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(0, 0, 0, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(0, 0, 0, 0);
            }
        }

        .flex-under-div {
            margin: 20px;
            width: auto;
        }

        .flex-div {
            width: auto;
        }

        @media (min-width: 1081px) {
            .container {
                flex-direction: row;
            }

            .flex-under-div {
                margin-top: 20px;
                margin: 0px;
                width: 50%;
            }

            .flex-div {
                width: 50%;
            }
        }

        li{
            list-style-type:square;
        }
        .form-control {
            margin-bottom: 1rem;
        }
        .form-control label,
        .form-control input,
        .form-control textarea,
        .form-control {
            display: block;
        }
        .form-control input[type="text"],
        .form-control input[type="range"],
        .form-control textarea,
        .form-control button {
            width: 100%;
            margin-top: 0.5rem;
            resize: none;
        }
        .form-control textarea{
            font-size: 20;
            overflow: hidden;
            height: 500px
        }
        .form-control span {
            margin-top: 0.5rem;
            font-weight: bold;
        }

        /* add onto the styling for the inline-slider range, with outlines and purple colours */
        .form-control.inline-slider {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        .form-control.inline-slider label {
            margin-right: 1rem; /* Adjust as needed */
        }
        .form-control.inline-slider input[type="range"] {
            width: 100%;
            margin-top: 0.5rem;
            padding: 0.5rem;
            border: transparent;
            border-radius: 4px;
            box-sizing: border-box;
            color: white;
            background-color: #ffffff15;
            font-size: 16px;
            outline: none;
            -webkit-appearance: none; /* Removes default styling */
        }
        /* slider thumb trail and white outline */
        .form-control.inline-slider input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none; /* Removes default styling */
            width: 1rem; /* Adjust as needed */
            height: 1rem; /* Adjust as needed */
            background-color: var(--highlight-colour-hover); /* Adjust as needed */
            border-radius: 50%;
            cursor: pointer;
            transform: translateY(-0.25rem);
            box-shadow: 0 0 0 0.075rem var(--text-colour); /* Adjust as needed */
        }
        .form-control.inline-slider input[type="range"]::-moz-range-thumb {
            width: 1rem; /* Adjust as needed */
            height: 1rem; /* Adjust as needed */
            background-color: var(--highlight-colour-hover); /* Adjust as needed */
            border-radius: 50%;
            cursor: pointer;
            transform: translateY(-0.25rem);
            box-shadow: 0 0 0 0.075rem var(--text-colour); /* Adjust as needed */
        }
        .form-control.inline-slider input[type="range"]::-ms-thumb {
            width: 1rem; /* Adjust as needed */
            height: 1rem; /* Adjust as needed */
            background-color: var(--highlight-colour-hover); /* Adjust as needed */
            border-radius: 50%;
            cursor: pointer;
            transform: translateY(-0.25rem);
            box-shadow: 0 0 0 0.075rem var(--text-colour); /* Adjust as needed */
        }


        .form-control.inline-slider input[type="range"]::-webkit-slider-runnable-track {
            width: 100%;
            height: 0.5rem; /* Adjust as needed */
            background-color: var(--highlight-colour); /* Adjust as needed */
            border-radius: 4px;
        }
        .form-control.inline-slider input[type="range"]::-moz-range-track {
            width: 100%;
            height: 0.5rem; /* Adjust as needed */
            background-color: var(--highlight-colour); /* Adjust as needed */
            border-radius: 4px;
        }
        .form-control.inline-slider input[type="range"]::-ms-track {
            width: 100%;
            height: 0.5rem; /* Adjust as needed */
            background-color: var(--highlight-colour); /* Adjust as needed */
            border-radius: 4px;
        }
        .form-control.inline-slider input[type="range"]::-ms-fill-lower {
            background-color: var(--highlight-colour); /* Adjust as needed */
            border-radius: 4px;
        }
        .form-control.inline-slider input[type="range"]::-ms-fill-upper {
            background-color: var(--highlight-colour); /* Adjust as needed */
            border-radius: 4px;
        }
        .form-control.inline-slider input[type="range"]::-ms-tooltip {
            display: none; /* Removes default styling */
        }
        .form-control.inline-slider .range-value {
            min-width: 3rem; /* Ensures that the value doesn't collapse */
            text-align: center;
        }
        

        /* custom styling for the select dropdowns, both for select and select multiple, transitions */
        .form-control select {
            width: 100%;
            margin-top: 0.5rem;
            padding: 0.5rem;
            border: transparent;
            border-radius: 4px;
            box-sizing: border-box;
            color: white;
            background-color: rgba(0, 0, 0, 0.103);
            font-size: 16px;
            outline: none;
        }
        /* for single select dropdowns */
        .form-control select option {
            color: rgb(255, 255, 255);
            background-color: rgba(0, 0, 0, 0.815);
            padding: 4px;
        }
        .form-control select option:checked {
            color: white;
            background-color: rgba(165, 68, 255, 0.473);
        }
        .form-control select option:hover {
            color: white;
            background-color: rgba(165, 68, 255, 0.507);
        }
        /* for multiple select dropdowns */
        .form-control select[multiple] {
            height: 16rem;
        }
        .form-control select[multiple] option {
            color: rgb(255, 255, 255);
            background-color: rgba(0, 0, 0, 0.103);
            padding: 0px !important;
        }
        .form-control select[multiple] option:checked {
            color: white;
            background-color: rgb(165, 68, 255);
        }
        .form-control select[multiple] option:hover {
            color: white;
            background-color: rgb(165, 68, 255);
        }




        /* Additional styling for dropdown arrow */
        .form-control select::after {
            content: '\25BC';  /* Unicode character for down arrow */
            position: absolute;
            top: 0.8rem;
            right: 1rem;
            font-size: 14px;
            pointer-events: none;
            color: white;
            background-color: #00000015;
        }


        .form-control select[multiple] option:checked {
            color: white;
            background-color: rgb(165, 68, 255);
        }

        .range-value {
            min-width: 3rem; /* Ensures that the value doesn't collapse */
            text-align: center;
        }
        /* generator form max-width based on screen size 750px: */
        @media screen and (max-width: 750px) {
            #generatorForm {
                max-width: 600px;
            }
        }
        @media screen and (min-width: 750px) {
            #generatorForm {
                max-width: 900px;
            }
        }
        #generatorForm {
            margin: auto;
        }
        .range-value {
            text-align: center;
        }
        #generateButton {
            background-color: #4caf4f95; /* Green */
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            transition: transform 0.7s, background-color 0.3s; /* Adjust time as needed */
            transform: scale(1) rotate(0deg); /* Default state */
            transform-origin: center; /* Ensures the scaling happens from the center */
        }

        #generateButton:hover {
            transform: scale(1.08) rotate(1deg); 
            background-color: #4CAF50; /* Green */
        }
        #generateButton:active {
            transform: scale(1.1);
            background-color: #ffe600; /* Red */
        }
        #generateButton.generating {
            background-color: #ff0000; /* Red */
            cursor:not-allowed;
        }
        #generateButton.generating:hover {
            transform: scale(0.7) rotate(-1deg); 
        }
        img#generatedImage {
            display: block;
            margin-top: 2rem;
            width: 100%;
            height: auto;
            object-fit: contain;
            background: #181818;
        }
        .instructions ul {
            text-align: left;
        }
        .center-content {
            text-align: center;
        }
        /* This will ensure your custom highlight styling has precedence */
        .ui-menu-item-wrapper{
            border-radius: 1px;
            border-color: rgba(0, 0, 0, 0.279);
            border-style: solid;
            width: fit-content;
        }
        .custom-highlight {
            background-color: rgba(229, 255, 0, 0.25) !important; /* Example color, use !important to ensure override */
            text-decoration: solid !important;
            border-color: gold !important;
            width: fit-content;
        }

        /* add transitions to the autocomplete-open that appears when it gets removed or added to autocomplete-space */

        .autocomplete-space {
            margin-top: 0px !important; /* Adjust this value based on your needs */
        }

        .imagesContainer {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(40%, 1fr));
            grid-template-rows: auto auto;
            grid-column-gap: 20px;
            grid-row-gap: 20px;
            min-height: 400px; /* Reserve space to reduce CLS */
        }

        .imagesContainer img {
            width: 100% !important;
            height: auto !important;
            object-fit: contain;
            aspect-ratio: 1 / 1; /* Fallback for unknown aspect ratio, prevents layout shift */
            background: rgba(0, 0, 0, 0);
            display: block;
        }

        .loraCardGrid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            grid-template-rows: auto;
            grid-column-gap: 5px;
            grid-row-gap: 5px;
            /* round the corners: */
            overflow: hidden;
        }

        .lorabox {
            border-radius: 20px;
            border: none;
        }

        /* .form-control { */
            /* display: flex; */
            /* flex-direction: column; */
            /* gap: 10px; Provides space between label and select box */
        /* } */


        #imageOverlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.7); /* Dim background */
            display: flex;
            justify-content: center; /* Centers horizontally */
            align-items: center;     /* Centers vertically */
            z-index: 800; /* Ensure it's above other elements */
        }

        #overlayImage {
            max-width: 80%;
            max-height: 80%;
            object-fit: contain; /* Adds support for maintaining aspect ratio */
        }

        /* add on hover styling, animations, etc to all the summaries in the doc */
        summary {
            cursor: pointer;
            transition: transform 0.7s, background-color 0.3s;
            transform: scale(1) rotate(0deg); /* Default state */
            transform-origin: center; /* Ensures the scaling happens from the center */
            padding: 8px;
        }
        summary:hover {
            transform: scale(1.08) rotate(1deg); 
            background-color: #a200ff4f; /* Red */
        }

        .autocomplete-open {
            margin-top: 130px !important; /* Adjust this value based on your needs */
        }

        .ui-helper-hidden-accessible {
            display: none !important;
        }


    </style>

    <!-- Google tag (gtag.js) -->


</head>
<body>

    <script>

        var userProfile = {
            favoriteLoras: <%- JSON.stringify(userProfile?.favoriteLoras || []) %>,
        }
    
        function observeChildChanges(targetNode, callback, customEventName = null) {
            if (!targetNode) {
                console.warn('Target node is not provided or does not exist.');
                return null;
            }

            const observer = new MutationObserver((mutationsList) => {
                for (const mutation of mutationsList) {
                    if (mutation.type === 'childList') {
                        callback(mutation);
                    }
                }
            });

            // Start observing the target node for childList changes
            observer.observe(targetNode, { childList: true });

            // Optionally attach a custom event listener
            if (customEventName) {
                targetNode.addEventListener(customEventName, () => callback({ type: 'customEvent' }));
            }

            // Return the observer instance to allow manual disconnection if needed
            return observer;
        }


    
    </script>

    <style>
    .modelSelectionDiv {
        display: none;
        position: fixed;
        z-index: 102235440 !important;
        width: 90%;
        max-height: calc(100vh - 20px); /* Ensures the modal fits within the viewport */
        top: 10px; /* Provides a small margin from the top */
        left: 50%;
        transform: translateX(-50%); /* Centers the modal horizontally */
        background-color: rgba(0, 0, 0, 0.8);
        overflow-y: auto; /* Enables vertical scrolling if content overflows */
        border-radius: 10px;
        box-sizing: border-box;
        padding: 10px;
    }

    .modelGrid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 10px;
        padding: 20px;
        max-width: 100%;
        width: 100%;
        margin: 0 auto;
    }

    .modelSelectionCard {
        background-color: #353535;
        padding: 10px;
        border-radius: 8px;
        border: 1px solid #888;
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        color: white;
        cursor: pointer;
        transition: transform 0.2s, border-color 0.2s;
    }

    .modelSelectionCard:hover {
        transform: translateY(-5px);
        border-color: #1e90ff;
    }

    .modelSelectionCard.selected {
        border-color: #1e90ff;
        border: 2px solid #1e90ff;
        box-shadow: 0 0 10px rgb(0, 128, 255);
    }

    .modelSelectionCard img {
        width: 100%;
        height: 150px;
        object-fit: cover;
        border-radius: 5px;
    }

    .closeButton {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 24px;
        color: white;
        cursor: pointer;
        background: transparent;
        border: none;
    }

    @media (max-width: 768px) {
        .modelGrid {
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            padding: 10px;
        }

        .modelSelectionCard {
            padding: 8px;
        }

        .modelSelectionCard img {
            height: 120px;
        }

        .closeButton {
            font-size: 20px;
        }
    }

    .modelOverlay {
        display: none;
        position: fixed;
        z-index: 102235439 !important;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }
</style>

    <div class="modelSelectionDiv" id="modelSelectionDiv">
        <span class="closeButton" onclick="closeModelSelectionPopup()">×</span>
        <div class="modelGrid">
            <!-- Model cards are dynamically generated by JavaScript -->
        </div>
    </div>

    <div id="modelOverlay" class="modelOverlay"></div>

    <script>

        // Model data structure
        const modelData = [
            {
                id: 'fluffysonic',
                name: 'SD 1.5 | FluffySonic',
                description: 'FluffySonic is a model that is based on Sonic the Hedgehog characters in a certain style.',
                author: 'Kitsune_Sage',
                authorLink: '',
                image: 'https://www.jscammie.com/modelImages/fluffysonic.png'
            },
            {
                id: 'realisticVision',
                name: 'SD 1.5 | RealisticVision',
                description: 'RealisticVision is a model that is based on realistic images.',
                author: 'SG_161222',
                authorLink: 'https://civitai.com/models/4201/realistic-vision-v60-b1',
                image: 'https://www.jscammie.com/modelImages/realisticvision.png'
            },
            
            {
                id: 'pdxl-autismmix',
                name: 'PDXL | AutismMix',
                description: 'AutismMix is a model that is based on PonyDiffusion and is more fine-tuned for better images.',
                author: 'Autismmix_anon',
                authorLink: 'https://civitai.com/models/288584/autismmix-sdxl',
                image: 'https://www.jscammie.com/modelImages/pdxl-autismmix.png'
            },

            {
                id: 'pdxl-ponyrealism',
                name: 'PDXL | PonyRealism',
                description: 'PonyRealism is a model that is based on realistic images.',
                author: "ZyloO",
                authorLink: 'https://civitai.com/models/372465/pony-realism',
                image: 'https://www.jscammie.com/modelImages/pdxl-ponyrealism.png'
            },

            {
                id: 'illustrious-wai',
                name: 'BEST | ILLUSTRIOUS | WAI',
                description: 'WAI is a model that is based on 2D, Anime, and Human images.',
                author: 'WAI0731',
                authorLink: 'https://civitai.com/models/827184?modelVersionId=1283437',
                image: 'https://www.jscammie.com/modelImages/illustrious-wai.png'
            },

            {
                id: 'illustrious-novafurry',
                name: 'ILLUSTRIOUS | NovaFurry',
                description: 'NovaFurry is a model that is based on 2D, 3D, and Furry images.',
                author: "Crody",
                authorLink: 'https://civitai.com/models/503815/nova-furry-xl',
                image: 'https://www.jscammie.com/modelImages/illustrious-novafurry.png'
            },


            {
                id: 'illustrious-novaanimal',
                name: 'ILLUSTRIOUS | NovaAnimal',
                description: 'NovaAnimal is a model that is based on 3d, Realistic, images of furries.',
                author: "Crody",
                authorLink: 'https://civitai.com/models/784543/nova-animal-xl',
                image: 'https://www.jscammie.com/modelImages/illustrious-novaanimal.png'
            },

            {
                id: 'illustrious-kiwimix',
                name: 'ILLUSTRIOUS | Kiwi Mix',
                description: 'Kiwi Mix is a model that is based on 2d, Cute, images.',
                author: "changkiwi",
                authorLink: 'https://civitai.com/models/264709/kiwimix-xl',
                image: 'https://www.jscammie.com/modelImages/illustrious-kiwimix.png'
            },




        ];

        // Get DOM elements
        let modal = null
        let modelSelect = null
        let modelGrid = null
        let currentModelText = null
        let valuesSetup = false

        function setupModelValues() {
            modal = document.getElementById('modelSelectionDiv');
            modelSelect = document.getElementById('model');
            modelGrid = modal.querySelector('.modelGrid');
            currentModelText = document.getElementById('currentModelText');

            // Close when clicking outside modal content
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    closeModelSelectionPopup();
                }
            });

            // Close when pressing the ESC key
            window.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && modal.style.display === 'flex') {
                    closeModelSelectionPopup();
                }
            });

            // set the currentModelText to be modelSelect selected model:
            currentModelText.innerText = `Current Model: ${modelData.find(model => model.id === modelSelect.value).name}`;
        }

        function modelOverlayShowHide() {
            const modelOverlay = document.getElementById('modelOverlay');
            modelOverlay.style.display = modelOverlay.style.display === 'block' ? 'none' : 'block';
        }

        // Initialize the modal content
        function initializeModelCards() {

            if (!valuesSetup) {
                setupModelValues();
                valuesSetup = true;
            }

            modelGrid.innerHTML = ''; // Clear existing content
            
            modelData.forEach(model => {
                const card = document.createElement('div');
                card.className = 'modelSelectionCard';
                card.dataset.modelId = model.id;
                
                card.innerHTML = `
                    <img src="${model.image}" alt="${model.name}" loading="lazy"> 
                    <div class="modelSelectionContainer">
                        <h4><b>${model.name}</b></h4>
                        <p>${model.description}</p>
                        <p>Model Author/Link: ${model.authorLink ? 
                            `<a href="${model.authorLink}" target="_blank">By ${model.author}</a>` : 
                            `<a>By ${model.author}</a>`}</p>
                    </div>
                `;
                
                // Add click handler to select model
                card.addEventListener('click', () => selectModel(model.id));
                
                modelGrid.appendChild(card);
            });
            
            // Highlight the currently selected model
            updateSelectedCard();
        }

        function keepModelCardsCentered() {
            const modelSelectionDiv = document.getElementById('modelSelectionDiv');
            if (modelSelectionDiv) {
                // modelSelectionDiv.style.top = `${window.scrollY + window.innerHeight / 2 - modelSelectionDiv.clientHeight / 2}px`; scrolls too much causing issues:
                modelSelectionDiv.style.top = `${window.innerHeight / 2 - modelSelectionDiv.clientHeight / 2}px`;
            }
        }

        // Keep the model selection modal centered
        setInterval(keepModelCardsCentered, 1000);


        // Select a model
        function selectModel(modelId) {
            modelSelect.value = modelId;
            
            // Trigger change event on select element
            const event = new Event('change', { bubbles: true });
            modelSelect.dispatchEvent(event);

            currentModelText.innerText = `Current Model: ${modelData.find(model => model.id === modelId).name}`;
            
            updateSelectedCard();
            closeModelSelectionPopup();
        }

        // Update the visual selection state of cards
        function updateSelectedCard() {
            const cards = document.querySelectorAll('.modelSelectionCard');
            cards.forEach(card => {
                card.classList.toggle('selected', card.dataset.modelId === modelSelect.value);
            });
        }

        // Open modal
        function openModelSelectionPopup() {
            modal.style.display = 'flex';
            modelOverlayShowHide();
            initializeModelCards();
        }

        // Close modal
        function closeModelSelectionPopup() {
            modal.style.display = 'none';
            modelOverlayShowHide();
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', () => {
            initializeModelCards();
        });
    </script>


    <div id="description" style="display: none;">
        JSCammie is a Free FLUX, PDXL and SD 1.5 Stable Diffusion Generator | Generate free images SFW & NSFW with multiple models, loras & more!
    </div>

    <!-- Tour button -->
    <button id="startTourButton" aria-label="Start guided tour">
        <i class="fas fa-map-marked-alt"></i> Guided Tour
    </button>

    <style>
        .loadingGradient {
            /* animate the gradient spinning: */
            background-color: var(--background-colour);
            /* Create a linear gradient at 45 degrees from pink to blue */
            background-image: linear-gradient(45deg, var(--bg-colour-1), var(--bg-colour-2));
            /* Repeat the gradient */
            background-repeat: repeat
        }
        .loadingBarGradient {
            /* Create a linear gradient at 45 degrees from pink to blue */
            background-image: linear-gradient(-45deg, rgb(73, 103, 255), rgb(255, 132, 234));
            /* Repeat the gradient */
            background-repeat: repeat
        }
    </style>

    <!-- add a loading screen that covers the whole page until all content is loaded, include a loading bar: -->
    <!-- loading screen div -->
    <div class="loadingGradient" id="loadingScreen" style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; display: flex; justify-content: center; align-items: center; z-index: 1000; transition: opacity 0.5s;">
        <!-- center of screen loading bar -->
        <div style="width: 40%; padding: 20px; border-radius: 10px; display: flex; flex-direction: column; align-items: center;">
            <h2>Loading...</h2>
            <div style="width: 100%; background-color: #00000015; border-radius: 10px;">
                <div class="loadingBarGradient" id="loadingBar" style="width: 0%; height: 20px; border-radius: 10px; transition: width 0.5s;"></div>
            </div>
        </div>
    </div>

    <!-- popup that displays how long it took to load, for example: 3.65s -->
    <div id="loadTimeDiv" style="position: fixed; top: 0; right: 0; padding: 10px; background-color: #00000015; border-radius: 0 0 0 10px; z-index: 1000;">
        <p id="loadTime">Loading...</p>
    </div>

    <script>
        // remove the loading screen when the page is fully loaded:

        window.addEventListener('load', function() {
            // get the loading screen element:
            const loadingScreen = document.getElementById('loadingScreen');
            // fade out the loading screen:
            loadingScreen.style.opacity = 0;

            // make it so they can click through the loading screen to the content below it:
            loadingScreen.style.pointerEvents = 'none';

            // get the load time element:
            const loadTime = document.getElementById('loadTime');
            // get the time it took to load the page:
            const loadTimeMS = new Date().getTime() - window.performance.timing.navigationStart;
            // set the load time text to the time it took to load the page in seconds (3.54s for example):
            loadTime.innerText = `Loaded in ${loadTimeMS / 1000}s`;

            // remove the loading screen after 3 second:
            setTimeout(() => {
                loadingScreen.remove();

                setTimeout(() => {
                    loadTime.remove();
                    document.getElementById('loadTimeDiv').remove();
                }, 500);
            }, 500);
        });

        // loading bar:
        let loadingBar = document.getElementById('loadingBar');
        document.onreadystatechange = function () {
            if (document.readyState == "interactive") {
                loadingBar.style.width = '50%';
            }
            if (document.readyState == "complete") {
                loadingBar.style.width = '100%';
                // fire events for the steps and cfguidance sliders to update the labels:
                document.getElementById('steps').dispatchEvent(new Event('input'));
                document.getElementById('cfguidance').dispatchEvent(new Event('input'));
            }
        }

        // spin the loading gradient
        let loadingGradient = document.getElementsByClassName('loadingGradient')[0];
        let loadingGradientDeg = 0;
        function spinLoadingGradient() {
            loadingGradient.style.backgroundImage = `linear-gradient(${loadingGradientDeg}deg, var(--bg-colour-1), var(--bg-colour-2))`;
            loadingGradientDeg += 1;
            requestAnimationFrame(spinLoadingGradient);
        }
        spinLoadingGradient();
        
    </script>

    <script>
        let loraDataKeys = ['style', 'effect', 'concept', 'clothing', 'character', 'pose', 'background']

    </script>

    <%- include('../partials/_navigation') %>

    <div class="center-fully-no-flex" style="margin-bottom: 1rem;">
        <%- include('../partials/_bannerAdvert') %>
    </div>

    <div class="container rounded page-content mw75-dynamic" style="margin-bottom: 12rem; min-height: 1200px;">
        
        <div class="flex-div" style="padding-left: 20px; padding-bottom: 0px; justify-content: center;">

            <h2>Welcome to the AI Image Generator!</h2>

            <style>
            
                .simpleAdvancedButton.active {
                    background-color: #4CAF50; 
                }
            
            </style>

            <details>
                <summary>Misc Options</summary>

                <div id="simpleAdvancedToggle">
                    <!-- tooltip: -->
                    <a class="tooltip" onclick="showTooltip(this)">❓</a>
                    <div class="tooltiptext">
                        <p>Simple Mode:</p>
                        <p>Simple mode is a more user-friendly version of the AI Image Generator, with less options and settings to configure.</p>
                        <p>Advanced Mode:</p>
                        <p>Advanced mode is a more complex version of the AI Image Generator, with more options and settings to configure.</p>
                    </div>
                    <button id="simpleToggle" class="simpleAdvancedButton">Simple</button>
                    <button id="advancedToggle" class="simpleAdvancedButton active">Advanced</button>
                </div>
            
            </details>

            




            <script>
            
                // get the simple and advanced toggle buttons:
                let simpleToggle = document.getElementById('simpleToggle');
                let advancedToggle = document.getElementById('advancedToggle');

                // get all the advancedElements
                let advancedElements = document.getElementsByClassName('advancedElement');

                // add event listeners to the simple and advanced toggle buttons:
                simpleToggle.addEventListener('click', function() {
                    // remove the active class from the advanced toggle button:
                    advancedToggle.classList.remove('active');
                    // add the active class to the simple toggle button:
                    simpleToggle.classList.add('active');

                    // hide all the advanced elements:
                    for (let i = 0; i < advancedElements.length; i++) {
                        advancedElements[i].style.display = 'none';
                    }

                    // depending on the model prefix pdxl- flux- or no prefix (doesnt have pdxl- or flux-) change the cfg, steps etc:

                    let model = document.getElementById('model').value;

                    // get the first 5 charcters of the model:
                    let modelPrefix = model.substring(0, 5);

                    function setSimpleDefaults(steps, cfg) {
                        // set the default values for the simple mode:
                        document.getElementById('steps').value = steps;
                        document.getElementById('cfguidance').value = cfg
                        document.getElementById('seed').value = '-1';
                    }

                    switch(modelPrefix) {
                        case 'pdxl-':
                            setSimpleDefaults(30, 3.5)
                            break;
                        case 'flux-':
                            setSimpleDefaults(20, 1)
                            break;
                        case 'illustrious-':
                            setSimpleDefaults(35, 6)
                            break;
                        default:
                            setSimpleDefaults(40, 6)
                            break;
                    }

                });

                advancedToggle.addEventListener('click', function() {
                    // remove the active class from the simple toggle button:
                    simpleToggle.classList.remove('active');
                    // add the active class to the advanced toggle button:
                    advancedToggle.classList.add('active');

                    // show all the advanced elements:
                    for (let i = 0; i < advancedElements.length; i++) {
                        advancedElements[i].style.display = 'block';
                    }
                });

            </script>




            <!-- style the save slot buttons, with on hover effects -->
            <style>
                .saveSlotButtonDiv {
                    display: flex;
                    justify-content: flex-start; /* Align buttons to the left */
                    gap: 8px; /* Space between buttons */
                    flex-wrap: wrap; /* Ensure buttons wrap if space is tight */
                }

                .saveSlotButton {
                    border: none;
                    color: white;
                    padding: 6px 10px; /* Adjust padding for a more compact button */
                    text-align: center;
                    text-decoration: none;
                    font-size: 14px; /* Slightly smaller text */
                    cursor: pointer;
                    transition: transform 0.3s, background-color 0.3s;
                    transform: scale(1) rotate(0deg);
                    transform-origin: center;
                    width: auto; /* Remove fixed width */
                    margin: 0; /* Remove margin */
                }

                .saveSlotButton:hover {
                    transform: scale(1.05); /* Smaller scale effect */
                    background-color: #555555; /* Subtle hover effect */
                }

                .saveSlotButton.Load {
                    background-color: #4c68af95; /* Blue */
                }

                .saveSlotButton.Load:hover {
                    background-color: #4c6aaf; /* Blue */
                }

                .saveSlotButton.Delete {
                    background-color: #ff000095; /* Red */
                }

                .saveSlotButton.Delete:hover {
                    background-color: #ff0000; /* Red */
                }

                .saveSlotButton.Update {
                    background-color: #2fa72d95; /* Green */
                }

                .saveSlotButton.Update:hover {
                    background-color: #5dbe40; /* Green */
                }

                .createSaveSlotButton {
                    background-color: #4caf4f95; /* Green */
                    border: none;
                    color: white;
                    padding: 6px 12px; /* Adjust padding for a more compact button */
                    text-align: center;
                    text-decoration: none;
                    font-size: 15px;
                    cursor: pointer;
                    transition: transform 0.3s, background-color 0.3s;
                }

                .createSaveSlotButton:hover {
                    transform: scale(1.05) rotate(1deg);
                    background-color: #4CAF50; /* Green */
                }

                .createSaveSlotButton:active {
                    transform: scale(1.1);
                    background-color: #ffe600; /* Yellow */
                }

                .createSaveSlotButton[disabled] {
                    background-color: #60606095; /* Disabled button color */
                    cursor: not-allowed;
                }

                .disabledSaveSlots {
                    text-align: center;
                }

                #saveSlotMasterDiv {
                    display: flex;
                    flex-direction: row;
                    gap: 10px;
                    flex-wrap: wrap;
                }

                .saveSlotDivClass {
                    border-radius: 10px;
                    border: 1px solid #00000015;
                    padding: 10px;
                    background-color: #00000015;
                    width: 25vh;
                }

            </style>


            

            <details>
                <% if (aiSaveSlots) { %>
                <summary>Save Slots (<%=aiSaveSlots.length%>) Click to View!</summary>
                <% } else { %>
                <summary>Save Slots (0) Click to View!</summary>
                <% } %>
                <div class="form-control">
                    <!-- Display Existing Save Slots -->
                    <% if (aiSaveSlots && aiSaveSlots.length > 0) { %>
                        <% timeSaveSlotsMS = new Date().getTime() %>
                        <div id="saveSlotMasterDiv"></div>
                        <script>
                            // fetch the users save slots from /ai-saves-get and display them:
                            window.refreshSaveSlots = window.refreshSaveSlots || async function() {
                                await fetch('/ai-saves-get')
                                .then(response => response.json())
                                .then(data => {
                                    // check if there are any save slots:
                                    if (!data.aiSaveSlots) {
                                        return;
                                    }
                                    // Handle loaded data
                                    // get the save slots from the data:
                                    const saveSlots = data.aiSaveSlots;
                                    // make a div inside of saveSlotMasterDiv with a details for each save slot, with the summary being the name of the save slot:
                                    const saveSlotMasterDiv = document.getElementById('saveSlotMasterDiv');
                                    finalHtml = ''
                                    saveSlots.forEach(saveSlot => {
                                        // made the div id the saveSlot id so it can be used to load the save slot:
                                        
                                        finalHtml += `<div id="saveSlot-${saveSlot.saveSlotId}" class="saveSlotDivClass">
                                            <details>
                                            <summary class="saveSlotButtonDiv">${saveSlot.name} <br>
                                                <button class="saveSlotButton Load" type="button" onclick="loadSlot('${saveSlot.saveSlotId}')">Load 💾</button>
                                                <button class="saveSlotButton Delete" type="button" onclick="deleteSlot('${saveSlot.saveSlotId}')">Delete 🗑️</button>
                                                <button class="saveSlotButton Update" type="button" onclick="updateSlot('${saveSlot.saveSlotId}')">Update ⬆️</button>
                                            </summary>
                                            <input id="saveSlot-${saveSlot.saveSlotId}-prompt" type="hidden" value="${saveSlot.prompt}"></input> 
                                            <input id="saveSlot-${saveSlot.saveSlotId}-negativeprompt" type="hidden" value="${saveSlot.negativeprompt}"></input>
                                            <input id="saveSlot-${saveSlot.saveSlotId}-aspectRatio" type="hidden" value="${saveSlot.aspectRatio}"></input>
                                            <input id="saveSlot-${saveSlot.saveSlotId}-model" type="hidden" value="${saveSlot.model}"></input>
                                            <input id="saveSlot-${saveSlot.saveSlotId}-loras" type="hidden" value="${saveSlot.loras}"></input>
                                            <input id="saveSlot-${saveSlot.saveSlotId}-lora_strengths" type="hidden" value="${saveSlot.lora_strengths}"></input>
                                            <input id="saveSlot-${saveSlot.saveSlotId}-steps" type="hidden" value="${saveSlot.steps}"></input>
                                            <input id="saveSlot-${saveSlot.saveSlotId}-cfg" type="hidden" value="${saveSlot.cfg}"></input>
                                            <input id="saveSlot-${saveSlot.saveSlotId}-seed" type="hidden" value="${saveSlot.seed}"></input>


                                            <p>Prompt: ${saveSlot.prompt}</p>
                                            <p>Negative Prompt: ${saveSlot.negativeprompt}</p>
                                            <p>Aspect Ratio: ${saveSlot.aspectRatio}</p>
                                            <p>Model: ${saveSlot.model}</p>
                                            <p>Lora's: ${saveSlot.loras}</p>
                                            <p>Lora Strengths: ${saveSlot.lora_strengths}</p>
                                            <p>Steps: ${saveSlot.steps}</p>
                                            <p>CFG: ${saveSlot.cfg}</p>
                                            <p>Seed: ${saveSlot.seed}</p>
                                            </details>
                                            </div>

                                            `  
                                    })
                                    finalHtml += ''
                                    saveSlotMasterDiv.innerHTML = finalHtml;
                                    
                                });
                            }

                            refreshSaveSlots();

                            
                            
                        </script>
                        <% timeSaveSlotsAfterMS = new Date().getTime() %>
                        <% timeSaveSlotsMS = timeSaveSlotsAfterMS - timeSaveSlotsMS %>
                        <p>Save Slots Loaded in <%=timeSaveSlotsMS%>ms</p>
                    <% } %>

                    <% if (session.loggedIn) { %>
                        <form id="createSlotForm">
                            <input type="text" id="saveSlotName" name="name" placeholder="Slot Name">
                            <button class="createSaveSlotButton" type="submit">Create Slot</button>
                        </form>
                    <% } else { %>
                        <form id="createSlotForm">
                            <input type="text" id="saveSlotName" name="name" placeholder="Slot Name" disabled>
                            <button class="createSaveSlotButton" type="submit" disabled>Create Slot</button>
                        </form>
                        <!-- center the <p>: -->
                        <style>
                            .disabledSaveSlots {
                                text-align: center;
                            }
                        </style>
                        <p class="disabledSaveSlots" >You must be logged in to create a save slot!</p>
                    <% } %>


                    <script>
                        document.getElementById('createSlotForm').addEventListener('submit', async function(event) {
                            event.preventDefault();

                            slotName = document.getElementById('saveSlotName').value

                            let options = {
                                message: "Are you sure you want to create the slot?",
                                question: true,
                                options: {
                                    yes: function() {
                                    },
                                    no: function() {
                                        return "no"
                                    }
                                }
                            }

                            let userResponse = await globalAlert(options)

                            if (userResponse == 'no') {
                                return; // Exit the function if the user clicks 'Cancel'
                            }

                            let selectedLoras = ''
                            let loraStrengths = []
                            
                            // use masterLoraData to get the lora selected and strength:
                            selectedLoras = Object.keys(masterLoraData).map(loraKey => {
                                return masterLoraData[loraKey].selected ? loraKey : ''
                            }).filter(lora => lora !== '')

                            // do the same for .strength only the ones that are selected:
                            loraStrengths = Object.keys(masterLoraData).map(loraKey => {
                                return masterLoraData[loraKey].selected ? masterLoraData[loraKey].strength : ''
                            }).filter(strength => strength !== '')


                            let savedata = {
                                name: document.getElementById('saveSlotName').value,
                                prompt: document.getElementById('prompt').value,
                                negativeprompt: document.getElementById('negativeprompt').value,
                                aspectRatio: document.getElementById('aspectRatio').value,
                                model: document.getElementById('model').value,
                                loras: selectedLoras,
                                lora_strengths: loraStrengths,
                                steps: document.getElementById('steps').value,
                                quantity: 2,
                                cfg: document.getElementById('cfguidance').value,
                                seed: document.getElementById('seed').value
                            }

                            // Send a request to the server to create a new slot
                            fetch('/ai-save-create', {
                                method: 'POST',
                                body: JSON.stringify(savedata),
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            }).then(response => response.json())
                            .then(data => {
                                // Handle response
                                refreshSaveSlots()
                            });
                        });

                        async function updateSlot(slotId) {
                            // add a popup asking for confirmation to update the slot:
                            const summaryElement = document.getElementById(`saveSlot-${slotId}`).getElementsByTagName('summary')[0];
                            const slotName = summaryElement.innerText.split('\n')[0].trim(); // Get only the name part before the buttons

                            let options = {
                                message: `Are you sure you want to update the slot: ${slotName}?`,
                                question: true,
                                options: {
                                    yes: function() {
                                    },
                                    no: function() {
                                    }
                                }
                            }

                            let userResponse = await globalAlert(options)

                            if (userResponse == 'no') {
                                return; // Exit the function if the user clicks 'Cancel'
                            }

                            event.preventDefault();

                            let selectedLoras = ''
                            let loraStrengths = []
                            
                            // use masterLoraData to get the lora selected and strength:
                            selectedLoras = Object.keys(masterLoraData).map(loraKey => {
                                return masterLoraData[loraKey].selected ? loraKey : ''
                            }).filter(lora => lora !== '')

                            // do the same for .strength only the ones that are selected:
                            loraStrengths = Object.keys(masterLoraData).map(loraKey => {
                                return masterLoraData[loraKey].selected ? masterLoraData[loraKey].strength : ''
                            }).filter(strength => strength !== '')


                            let savedata = {
                                saveSlotId: slotId,
                                prompt: document.getElementById('prompt').value,
                                negativeprompt: document.getElementById('negativeprompt').value,
                                aspectRatio: document.getElementById('aspectRatio').value,
                                model: document.getElementById('model').value,
                                loras: selectedLoras,
                                lora_strengths: loraStrengths,
                                steps: document.getElementById('steps').value,
                                quantity: 2,
                                cfg: document.getElementById('cfguidance').value,
                                seed: document.getElementById('seed').value
                            }

                            // get all loraSelectionsSummarys to get the lora strength from them:
                            document.querySelectorAll('#loraSelectionsSummary .lora-details input[type="range"]').forEach(slider => {
                                savedata.lora_strengths.push(slider.value)
                            })

                            fetch('/ai-save-update', {
                                method: 'POST',
                                body: JSON.stringify(savedata),
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            }).then(response => response.json())
                            .then(data => {
                                // Handle response
                                refreshSaveSlots()
                            });
                        }

                        async function loadSlot(slotId) {

                            // add a popup asking for confirmation to load the slot:
                            let options = {
                                message: `Are you sure you want to load the slot?`,
                                question: true,
                                options: {
                                    yes: function() {
                                    },
                                    no: function() {
                                    }
                                }
                            }

                            let userResponse = await globalAlert(options)

                            if (userResponse == 'no') {
                                return; // Exit the function if the user clicks 'Cancel'
                            }

                            slotName = document.getElementById(`saveSlot-${slotId}`).getElementsByTagName('summary')[0].innerText

                            // load the slot with the given slotId
                            let saveData = document.getElementById(`saveSlot-${slotId}`)

                            // set the generator form values to the save slot values:
                            // get the save slot details:
                            const saveSlotDetails = saveData.getElementsByTagName('details')[0];
                            const saveSlotDetailsParagraphs = saveSlotDetails.getElementsByTagName('p');


                            // selectedLoras is document

                            const saveSlotPrompt = document.getElementById(`saveSlot-${slotId}-prompt`).value
                            const saveSlotNegativePrompt = document.getElementById(`saveSlot-${slotId}-negativeprompt`).value
                            const saveSlotAspectRatio = document.getElementById(`saveSlot-${slotId}-aspectRatio`).value
                            const saveSlotModel = document.getElementById(`saveSlot-${slotId}-model`).value
                            const saveSlotLoras = document.getElementById(`saveSlot-${slotId}-loras`).value
                            const saveSlotSteps = document.getElementById(`saveSlot-${slotId}-steps`).value
                            const saveSlotCFG = document.getElementById(`saveSlot-${slotId}-cfg`).value
                            const saveSlotSeed = document.getElementById(`saveSlot-${slotId}-seed`).value

                            let saveSlotLoraStrengths = []

                            // const saveSlotLoraStrengths = document.getElementById(`saveSlot-${slotId}-lora_strengths`).value || [];
                            if (document.getElementById(`saveSlot-${slotId}-lora_strengths`)) {
                                saveSlotLoraStrengths = document.getElementById(`saveSlot-${slotId}-lora_strengths`).value
                                // split the string into an array:
                                saveSlotLoraStrengths = saveSlotLoraStrengths.split(',')
                            }

                            // set the generator form values to the save slot values:
                            document.getElementById('prompt').value = saveSlotPrompt;
                            document.getElementById('negativeprompt').value = saveSlotNegativePrompt;
                            document.getElementById('aspectRatio').value = saveSlotAspectRatio;
                            
                            // if the model value starts pdxl- AND isnt in the select box then default to pdxl-autismmix:
                            if (!document.getElementById('model').querySelector(`option[value="${saveSlotModel}"]`)) {
                                if (saveSlotModel.startsWith('pdxl-')) {
                                    document.getElementById('model').value = 'pdxl-autismmix';
                                }
                                if (saveSlotModel.startsWith('illustrious-')) {
                                    document.getElementById('model').value = 'illustrious-wai';
                                }
                                if (saveSlotModel.startsWith('flux-')) {
                                    document.getElementById('model').value = 'flux-unchained';
                                }
                                if (!saveSlotModel.startsWith('pdxl-') && !saveSlotModel.startsWith('flux-') && !saveSlotModel.startsWith('illustrious-')) {
                                    document.getElementById('model').value = 'fluffysonic';
                                }
                            } else {
                                document.getElementById('model').value = saveSlotModel
                            }
                            
                            // convert the loras string into an array:
                            saveSlotLorasArray = saveSlotLoras.split(',');


                            document.querySelectorAll('.loraGridContainer input[type="checkbox"]:checked').forEach(checkbox => {
                                checkbox.checked = false;
                                checkbox.dispatchEvent(new Event('change')); // Fire the change event if needed
                            });

                            for (let loraId in masterLoraData) {
                                masterLoraData[loraId].selected = false;
                                masterLoraData[loraId].strength = masterLoraData[loraId].defaultStrength;
                            }

                            // if there are no loras then dont do anything:
                            if (saveSlotLoras.length > 0) {
                                // check the checkboxes for the loras in the save slot:
                                for (let i = 0; i < saveSlotLorasArray.length;) {
                                    let loraId = saveSlotLorasArray[i];
                                    let loraStrength = saveSlotLoraStrengths[i];


                                    masterLoraData[loraId].selected = true;
                                    masterLoraData[loraId].strength = Number(loraStrength);
                                
                                    i++
                                }
                            }

                            

                            loadLoras();
                            updateLoraSelectionsSummary();

                            document.getElementById('steps').value = saveSlotSteps;
                            document.getElementById('cfguidance').value = saveSlotCFG;
                            document.getElementById('seed').value = saveSlotSeed;

                            // refresh prompt negpromt on input stuff:
                            document.getElementById('prompt').dispatchEvent(new Event('change'));
                            document.getElementById('negativeprompt').dispatchEvent(new Event('change'));

                            // fire the change event for the model select box and the aspect ratio select box:
                            document.getElementById('model').dispatchEvent(new Event('change'));
                            document.getElementById('aspectRatio').dispatchEvent(new Event('change'));
                            
                            // wait a seconds then trigger the saveLoadTextAreaHeight function to update the height of the textarea:
                            setTimeout(() => {
                                saveLoadTextAreaHeight();
                            }, 1000)
                            
                        }

                        async function deleteSlot(slotId) {
                            event.preventDefault();

                            const summaryElement = document.getElementById(`saveSlot-${slotId}`).getElementsByTagName('summary')[0];
                            const slotName = summaryElement.innerText.split('\n')[0].trim(); // Get only the name part before the buttons

                            let options = {
                                message: `Are you sure you want to DELETE the slot: "${slotName}"?`,
                                question: true,
                                options: {
                                    yes: function() {
                                    },
                                    no: function() {
                                    }
                                }
                            }

                            let userResponse = await globalAlert(options)

                            if (userResponse == 'no') {
                                return; // Exit the function if the user clicks 'Cancel'
                            }

                            // delete the slot with the given slotId
                            fetch('/ai-save-delete', {
                                method: 'POST',
                                body: JSON.stringify({saveSlotId: slotId}),
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            }).then(response => response.json())
                            .then(data => {
                                // Handle response
                                refreshSaveSlots()
                            });
                        }

                        function exportAIData() {
                            // Get the AI data from the form
                            let aiData = {
                                prompt: document.getElementById('prompt').value,
                                negativeprompt: document.getElementById('negativeprompt').value,
                                aspectRatio: document.getElementById('aspectRatio').value,
                                model: document.getElementById('model').value,
                                loras: [],
                                lora_strengths: [],
                                steps: document.getElementById('steps').value,
                                quantity: 2,
                                cfg: document.getElementById('cfguidance').value,
                                seed: document.getElementById('seed').value,
                            }

                            // Get the selected Loras from masterLoraData:
                            Object.keys(masterLoraData).forEach(loraId => {
                                if (masterLoraData[loraId].selected) {
                                    aiData.loras.push(loraId);
                                    aiData.lora_strengths.push(masterLoraData[loraId].strength);
                                }
                            });

                            // export it to a yaml file:
                            let yamlData = {
                                "prompt": aiData.prompt,
                                "negativeprompt": aiData.negativeprompt,
                                "aspectRatio": aiData.aspectRatio,
                                "model": aiData.model,
                                "loras": aiData.loras,
                                "lora_strengths": aiData.lora_strengths,
                                "steps": aiData.steps,
                                "quantity": aiData.quantity,
                                "cfg": aiData.cfg,
                                "seed": aiData.seed
                            }

                            // save it to a file and download it without jsyaml:
                            let yamlString = `${aiData.prompt}<SPLIT>${aiData.negativeprompt}<SPLIT>${aiData.aspectRatio}<SPLIT>${aiData.model}<SPLIT>${aiData.loras.join(',')}<SPLIT>${aiData.lora_strengths.join(',')}<SPLIT>${aiData.steps}<SPLIT>${aiData.quantity}<SPLIT>${aiData.cfg}<SPLIT>${aiData.seed}`

                            let blob = new Blob([yamlString], {type: 'text/yaml'});
                            let url = URL.createObjectURL(blob);
                            let a = document.createElement('a');
                            a.href = url;
                            a.download = `${aiData.model}.aidata`;
                            document.body.appendChild(a);
                            a.click();
                            window.URL.revokeObjectURL(url);
                            document.body.removeChild(a);


                        }

                        async function prepAiData(data) {

                            let options = {
                                message: `Are you sure you want to load this .aidata?`,
                                question: true,
                                options: {
                                    yes: function() {
                                    },
                                    no: function() {
                                    }
                                }
                            }

                            let userResponse = await globalAlert(options)

                            if (userResponse == 'no') {
                                return; // Exit the function if the user clicks 'Cancel'
                            }

                            // Split data lines and then extract values after colon and trim spaces
                            let yamlData = data.split('\n').map(line => line.includes(':') ? line.split(':')[1].trim() : '');

                            // yamlData.length() is not a function, use length instead

                            // if there isnt 10 values then the data is invalid, use <SPLIT> to split it instead, making sure <SPLIT> is removed from the data:
                            if (yamlData.length !== 10) {
                                yamlData = data.split('<SPLIT>').map(line => line.trim());
                            }

                            // if there still isnt 10 values then the data is invalid:
                            if (yamlData.length !== 10) {
                                return;
                            }

                            importAiData(yamlData);
                        }

                        function importAiData(yamlData) {

                            // if models starts with sdxl- then replace it with pdxl-:
                            if (yamlData[3].startsWith('sdxl-')) {
                                yamlData[3] = yamlData[3].replace('sdxl-', 'pdxl-');
                            }

                            // replace any -sdxl in loras with -pdxl:
                            let lorasString = yamlData[4].replace('[','').replace(']','').trim();
                            if (lorasString === '') {
                                loras = [];
                            } else {
                                loras = lorasString.split(',').map(lora => lora.replace(/'/g, '').trim()).filter(lora => lora !== '');
                                
                                for (let i = 0; i < loras.length; i++) {
                                    loras[i] = loras[i].replace('-sdxl', '-pdxl');
                                }
                            }

                            let aiData = {
                                prompt: yamlData[0],
                                negativeprompt: yamlData[1],
                                aspectRatio: yamlData[2],
                                model: yamlData[3],
                                loras: loras,
                                lora_strengths: yamlData[5] ? yamlData[5].replace('[','').replace(']','').trim() === '' ? [] : yamlData[5].replace('[','').replace(']','').split(',').map(strength => strength.replace(/'/g, '').trim()).filter(strength => strength !== '') : [],
                                steps: yamlData[6],
                                cfg: yamlData[8],
                                seed: yamlData[9]
                            };

                            function setValueSafely(elementId, value) {
                                const element = document.getElementById(elementId);
                                if (element) {
                                    element.value = value;
                                } else {
                                    console.warn(`Element with ID '${elementId}' not found.`);
                                }
                            }

                            // check if the value is undefined or null, if so then dont change it:
                            function setValueSafelyIfNotUndefinedOrNull(elementId, value) {
                                if (elementId == 'model') {
                                    // check if it exists in the model select box:
                                    if (!document.getElementById('model').querySelector(`option[value="${value}"]`)) {
                                        value = 'illustrious-novafurry';
                                    }
                                }
                                if (value !== undefined && value !== null) {
                                    setValueSafely(elementId, value);
                                }
                            }

                            // replace sdxl- with pdxl- in the model value:
                            if (aiData.model.startsWith('sdxl-')) {
                                aiData.model = aiData.model.replace('sdxl-', 'pdxl-');
                            }

                                        // Set the values in the form
            setValueSafelyIfNotUndefinedOrNull('prompt', aiData.prompt);
            setValueSafelyIfNotUndefinedOrNull('negativeprompt', aiData.negativeprompt);
            setValueSafelyIfNotUndefinedOrNull('aspectRatio', aiData.aspectRatio);
            setValueSafelyIfNotUndefinedOrNull('model', aiData.model);
            setValueSafelyIfNotUndefinedOrNull('steps', aiData.steps);
            setValueSafelyIfNotUndefinedOrNull('cfguidance', aiData.cfg);
            setValueSafelyIfNotUndefinedOrNull('seed', aiData.seed);

            // refresh prompt negpromt on input stuff:
            document.getElementById('prompt').dispatchEvent(new Event('change'));
            document.getElementById('negativeprompt').dispatchEvent(new Event('change'));

                            // if the model value starts pdxl- AND isnt in the select box then default to pdxl-autismmix:
                            if (!document.getElementById('model').querySelector(`option[value="${aiData.model}"]`)) {
                                if (aiData.model.startsWith('pdxl-') || aiData.model.startsWith('sdxl-')) {
                                    document.getElementById('model').value = 'pdxl-autismmix';
                                }
                                if (aiData.model.startsWith('illustrious-')) {
                                    document.getElementById('model').value = 'illustrious-wai';
                                }
                                if (aiData.model.startsWith('flux-')) {
                                    document.getElementById('model').value = 'flux-unchained';
                                }
                                if (!aiData.model.startsWith('pdxl-') || !aiData.model.startsWith('sdxl-') && !aiData.model.startsWith('flux-')) {
                                    document.getElementById('model').value = 'fluffysonic';
                                }
                            } else {
                                document.getElementById('model').value = aiData.model;
                            }

                            // fire the change event for the model select box and the aspect ratio select box:
                            document.getElementById('model').dispatchEvent(new Event('change'));
                            document.getElementById('aspectRatio').dispatchEvent(new Event('change'));

                            // set all masterDataLoras to be unselected first:
                            for (let loraId in masterLoraData) {
                                masterLoraData[loraId].selected = false;
                                masterLoraData[loraId].strength = masterLoraData[loraId].defaultStrength;
                            }

                            // if there are no loras then dont do anything:
                            if (aiData.loras.length > 0) {
                                // check the checkboxes for the loras in the save slot:
                                for (let i = 0; i < aiData.loras.length; i++) {
                                    let loraId = aiData.loras[i];
                                    let loraStrength = aiData.lora_strengths[i];

                                    if (!loraId) {
                                        continue;
                                    }

                                    if (masterLoraData[loraId]) {
                                        masterLoraData[loraId].selected = true;
                                        masterLoraData[loraId].strength = Number(loraStrength);
                                    }
                                }
                            }

                            // Load loras after setting all selections
                            loadLoras();
                            updateLoraSelectionsSummary();
                                
                        }

                    </script>







                    
                </div>
                <a>Save Slots Help:</a>
                <a class="tooltip" onclick="showTooltip(this)">❓</a>
                <div class="tooltiptext">
                    Save-Slots are a way of saving and loading the current settings, very good for saving templates to generate the best images for later use, this requires you to be logged in to use.<br><br>If you'd like to save your settings without logging in then you can use the "Export/Import .AIDATA" buttons beneath this text to save your settings to a file on your computer/phone!
                </div>

            </details>
            

            <style>
                /* Common styles for buttons */
                .button {
                    background-color: #4caf4f95; /* Light green with opacity */
                    color: white;
                    padding: 15px 32px;
                    text-align: center;
                    font-size: 16px;
                    border: none !important;
                    border-radius: 10px;
                    cursor: pointer;
                    display: inline-block;
                    margin: 4px 2px;
                    transition: background-color 0.3s, transform 0.7s !important;
                    transform-origin: center;
                }

                /* Hover effect for export button */
                .exportaidatabutton:hover {
                    background-color: #4CAF50; /* Slightly darker green */
                    transform: scale(1.08) rotate(1deg);
                }
        
                /* Hover effect for import label */
                .importaidatalabel:hover {
                    background-color: #4CAF50; /* Slightly darker green */
                    transform: scale(1.08) rotate(1deg);
                }
        
                /* Active effect for export button */
                .exportaidatabutton:active {
                    background-color: #ffe600; /* Yellow */
                    transform: scale(1.1);
                }
        
                /* Hide the file input field visually but remain accessible */
                .importaidatainput {
                    display: none;
                }
            </style>


            <script>
                function copyGeneratorLink() {
                // `https://jscammie.com/?prompt=${booruImage.prompt}&negativeprompt=${booruImage.negative_prompt}&aspectRatio=${booruImage.aspect_ratio}&model=${booruImage.model}&steps=${booruImage.steps}&cfguidance=${booruImage.cfg}&seed=${booruImage.seed}&loras=[${booruImage.loras}]&lora_strengths=[${booruImage.lora_strengths}]`

                // get the current values of the form:
                let prompt = document.getElementById('prompt').value;
                let negativeprompt = document.getElementById('negativeprompt').value;
                let aspectRatio = document.getElementById('aspectRatio').value;
                let model = document.getElementById('model').value;
                let steps = document.getElementById('steps').value;
                let cfg = document.getElementById('cfguidance').value;
                let seed = document.getElementById('seed').value;
                let loras = Object.keys(masterLoraData).map(loraKey => {
                    return masterLoraData[loraKey].selected ? loraKey : ''
                }).filter(lora => lora !== '')
                let lora_strengths = Object.keys(masterLoraData).map(loraKey => {
                    return masterLoraData[loraKey].selected ? masterLoraData[loraKey].strength : ''
                }).filter(strength => strength !== '')


                // replace spaces with %20:
                prompt = prompt.replace(/ /g, '%20');
                negativeprompt = negativeprompt.replace(/ /g, '%20');

                // create the link:
                let link = `https://jscammie.com/?prompt=${prompt}&negativeprompt=${negativeprompt}&aspectRatio=${aspectRatio}&model=${model}&steps=${steps}&cfguidance=${cfg}&seed=${seed}&loras=[${loras}]&lora_strengths=[${lora_strengths}]&`

                // copy the link to the clipboard:
                navigator.clipboard.writeText(link).then(function() {
                }, function(err) {
                });
            }
            </script>

            <details>
            
                <summary>Export / Import AI Settings</summary>

                <div style="flex: auto;">
                    <button class="button exportaidatabutton" type="button" onclick="exportAIData()">Export .AIDATA</button>
                    <label for="importAiData" class="button importaidatalabel">Import .AIDATA</label>
                    <input id="importAiData" class="importaidatainput" type="file" accept=".aidata">
                    <span class="tooltip" onclick="showTooltip(this)">❓</span>
                    <div class="tooltiptext">Import .AIDATA:<br>
                    Allows the user to import a .AIDATA file to load the settings into the AI Image Generator, this can be used to load settings like the loras used, the prompt, model, etc etc; to copy settings from booru posts and to use settings from other users.<br>
                    <br>Export .AIDATA:<br>
                    Allows the user to export the current settings to a .AIDATA file, this can be used to save settings for later use and share settings with other users.
                    </div>
                    <button onclick="copyGeneratorLink()">Copy Generator Link</button>
                    <div class="tooltip" onclick="showTooltip(this)">❓</div>
                    <div class="tooltiptext">Copy the current settings to the clipboard as a link to the generator, this can be used to share settings with other users and to save settings for later use.</div>
                </div>
            
            </details>
            
            
            <script>
                // get the user to upload a yaml file and then import it:
                document.getElementById('importAiData').addEventListener('change', function(event) {
                    const file = event.target.files[0];
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const text = e.target.result;
                        prepAiData(text);
                    }
                    reader.readAsText(file);
                });

                // reset the input value to allow the same file to be uploaded again:
                document.getElementById('importAiData').addEventListener('click', function(event) {
                    this.value = null;
                });

            </script>

                <style>
                    

                </style>

                <details open>
                    
                    <summary>Prompt & Negative Prompt</summary>
                        
                        <style>
                            .wordCountGreen {
                                color: green;
                            }
                            .wordCountYellow {
                                color: yellow;
                            }
                            .wordCountRed {
                                color: red;
                            }
                        </style>

                        <style>
                            #autocomplete-div {
                                display: none; /* Hidden by default */
                                z-index: 1000;
                                background-color: rgba(0, 0, 0, 0.2);
                                border: 1px solid black;
                                width: 100%;
                                max-height: 150px; /* Limit height */
                                height: auto;
                                overflow-y: auto; /* Add vertical scroll if items exceed height */
                            }

                            #autocomplete-div:empty {
                                display: none; /* Hide when empty */
                            }

                            #autocomplete-div.loading {
                                display: none; /* Hide when loading */
                            }

                            .autocomplete-item {
                                padding: 8px;
                                background-color: rgba(103, 131, 255, 0.3);
                                border: 1px solid black;
                                width: 100%;
                                cursor: pointer;
                                position: relative;
                                font-size: 16px;
                                text-align: left;
                                transition: background-color 0.2s ease;
                            }

                            .autocomplete-item.selected {
                                background-color: rgba(165, 68, 255, 0.5) !important;
                                border-color: rgba(165, 68, 255, 0.8);
                            }

                            .autocomplete-item:hover {
                                background-color: rgba(165, 68, 255, 0.3);
                            }

                            .autocomplete-item-1 {
                                background-color: rgba(255, 0, 0, 0.3) !important;
                            }

                            .autocomplete-item-5 {
                                background-color: rgba(238, 255, 0, 0.3) !important;
                            }

                            .autocomplete-item-10 {
                                background-color: rgba(0, 255, 0, 0.3) !important;
                            }

                            .autocomplete-loading {
                                padding: 10px;
                                text-align: center;
                                color: #fff;
                                font-style: italic;
                            }

                            .autocomplete-error {
                                padding: 10px;
                                text-align: center;
                                color: #ff6b6b;
                                font-style: italic;
                            }

                            .no-results {
                                padding: 10px;
                                text-align: center;
                                color: #aaa;
                                font-style: italic;
                            }

                            .regionalPromptDisplayText {
                                display: block;
                                background-color: rgba(0, 0, 0, 0.2);
                                border: 2px solid rgb(255, 255, 255);
                                padding: 4px;
                                border-radius: 5px;
                                font-size: 20px;
                                font-weight: bold;
                            }

                        </style>

                        

                        <div style="position: relative;" id="autocomplete-div"></div>

                        <div class="form-control" id="prompt-div">
                            <label for="prompt">
                                Prompt: <span id="promptWordCount">(70)</span>
                                <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">Type here what you want in the image.
                                You can use "," to separate different things you want in the image.
                                For example: "A cute cat, with a hat, in a forest"<br><br>
                                To adjust how much focus or Strength specific word(s) have you can use the following syntax:<br>
                                (word), ((word)), ((word1, word2))<br>(word:1.25), ((word:1.25)), ((word1, word2:1.25))<br>
                                (word:0.75), ((word:0.75)), ((word1, word2:0.75))<br><br>
                                These are just examples of setting the strength(s) of the word(s) in the prompt, you can use any number between 0.1 and 3.0 to adjust the strength of the word(s) in the prompt.
                                </div>
                            </label>
                            <textarea id="prompt" name="prompt" rows="2" required></textarea>
                        </div>
                        <span id="regionalPromptDisplayText" class="regionalPromptDisplayText"></span>

                        <script>
                            // make the regionalPromptDisplayText invisible unless it has something in it:
                            document.getElementById('regionalPromptDisplayText').style.display = 'none';

                            // make the regionalPromptDisplayText visible if the regionalPromptDisplayText has something in it:
                            document.getElementById('prompt').addEventListener('input', function() {
                                if (this.value.toLowerCase().includes('<rp>')) {
                                    document.getElementById('regionalPromptDisplayText').style.display = 'block';
                                } else {
                                    document.getElementById('regionalPromptDisplayText').style.display = 'none';
                                }
                            })
                        </script>

                        <div class="form-control">
                            <label for="negativeprompt">
                                Negative Prompt: <span id="negativePromptWordCount">(70)</span>
                                <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">Type here what you don't want in the image.
                                You can use "," to separate different things you don't want in the image.
                                For example: "ugly, dogs, no hat, no forest"<br><br>
                                To adjust how much focus or Strength specific word(s) have you can use the following syntax:<br>
                                (word), ((word)), ((word1, word2))<br>(word:1.25), ((word:1.25)), ((word1, word2:1.25))<br>
                                (word:0.75), ((word:0.75)), ((word1, word2:0.75))<br><br>
                                These are just examples of setting the strength(s) of the word(s) in the prompt, you can use any number between 0.1 and 3.0 to adjust the strength of the word(s) in the prompt.
                                </div>
                            </label>
                            <textarea id="negativeprompt" name="negativeprompt" rows="2">nsfw, monochrome, black and white, worst quality, low quality, watermark, signature, bad anatomy, bad hands, deformed limbs, blurry, cropped, cross-eyed, extra arms, extra legs, extra limbs, extra pupils, bad proportions, poorly drawn hands, simple background, bad background, bad lighting, bad perspective</textarea>
                        </div>

                </details>

                <script>
                    document.addEventListener('DOMContentLoaded', function() {

                        window.saveLoadTextAreaHeight = function() {
                            let textareas = document.querySelectorAll('textarea');

                            textareas.forEach(textarea => {
                                // Function to adjust height
                                textarea.style.height = 'auto'; // Reset height to recalculate
                                textarea.style.height = Number(textarea.scrollHeight) + 40 + 'px';

                            })
                        }

                        textareas = document.querySelectorAll('textarea');

                        textareas.forEach(textarea => {
                            textarea.addEventListener('input', saveLoadTextAreaHeight);
                            textarea.addEventListener('change', saveLoadTextAreaHeight);
                        })

                        saveLoadTextAreaHeight();

                        window.addEventListener('resize', saveLoadTextAreaHeight);



                    })

                </script>



                <details open>
                    <summary>Aspect Ratio & Model</summary>
                    <div class="form-control">
                        <label for="aspectRatio">
                            Aspect Ratio:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">Select the aspect ratio you want the image to be in, this will affect the dimensions of the image.</div>
                        </label>

                        <select id="aspectRatio" name="aspectRatio" value="square">
                            <option value="square">Square</option>
                            <option value="portrait">Portrait</option>
                            <option value="landscape">Landscape</option>
                            <option value="16:9">16:9 (Wide)</option>
                            <option value="9:16">9:16 (Tall)</option>
                            <option value="21:9">21:9 (Ultra-Wide)</option>
                            <option value="9:21">9:21 (Ultra-Tall)</option>
                        </select>
                    </div>

                    <div class="form-control">
                        <label for="model">
                            Model:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Select the model you want to use to generate the image.<br>
                                    Certain models have different architectures and will need different prompts to generate the desired image, this can be denoted by the keyword in brackets at the start of the model.<br>
                                    For example: "(PDXL) AutismMix" is an PDXL architecture model.
                                </div>
                        </label>
                        <select id="model" name="model" value="illustrious-novafurry" style="display: none;">
                            <option value="fluffysonic">(SD 1.5) FluffySonic (Sonic the Hedgehog)</option>
                            <option value="realisticVision">(SD 1.5) realisticVision (Realstic)</option>
                            <option value="pdxl-autismmix">(PDXL) Autism Mix (2D, 3D)</option>
                            <option value="pdxl-ponyrealism">(PDXL) Pony Realism (Realistic)</option>
                            <option value="illustrious-wai">BEST (ILLUSTRIOUS) WAI (2d, Anime, Human)</option>
                            <option value="illustrious-novafurry" selected>(ILLUSTRIOUS) Nova Furry (2d, 3d, Furry)</option>
                            <option value="illustrious-novaanimal">(ILLUSTRIOUS) Nova Animal (Realistic, 3d, Animal)</option>
                            <option value="illustrious-kiwimix">(ILLUSTRIOUS) Kiwi Mix (2d, Cute)</option>
                        </select>

                        <button onclick="openModelSelectionPopup()" class="model-select-button">Open Model Selection</button>
                        <p id="currentModelText"></p>

                    </div>
                </details>

                <script>
                    // on document load, if model is set to pdxl-ponydiffusion then set it to pdxl-autismmix:
                    document.addEventListener('DOMContentLoaded', function() {
                        if (document.getElementById('model').value === 'pdxl-ponydiffusion') {
                            document.getElementById('model').value = 'pdxl-autismmix';
                        }
                    })
                </script>

                <div class="advanced">
                    <div></div>
                    <div></div>

                    <% loraDataKeys = ['style', 'effect', 'concept', 'clothing', 'character', 'pose', 'background'] %>

                    <style>
                      
                        .loraContainer {
                            max-height: 750px !important; /* Adjust as needed for your layout */
                            height: fit-content; /* make sure the width is virtual width */
                            width: auto;
                            overflow-y: auto; /* Allows scrolling within the container */
                            border: 1px solid #00ff6a;
                            border-radius: 4px;
                            padding: 0px;
                            margin: 0px;
                        }

                      
                        .checkbox-container {
                          display: flex;
                          align-items: center;
                          margin-bottom: 2px; /* Adds space between checkbox lines */
                        }
                      
                        .checkbox-container label {
                          flex-grow: 1; /* Ensures the label takes up the available space */
                          margin-right: 8px; /* Space between label and favorite button */
                        }
                      
                        .favorite-btn {
                            background: none;
                            border: none !important;
                            color: #ccc;
                            cursor: pointer;
                            padding: 0; /* Removes extra space around the button */
                            margin-right: 8px; /* Space between label and favorite button */
                            transition: color 0.7s; /* Smooth transition for color change */
                            width: 30px !important;
                            font-size: 30px;  
                            margin-bottom: 2px;
                        }
                      
                        .favorite-btn:hover {
                            color: #ffec80; /* Gold color on hover to indicate interactivity */
                            transition: color 0.1s;
                        }
                      
                        .favorite-btn.favorite {
                            color: #ffd700; /* Gold color for active favorite */
                            transition: color 0.7s;
                        }

                        .loraGridContainer {
                            display: none;
                        }

                        .loraGridContainer.active {
                            background-color: rgba(255, 255, 255, 0.05);
                            padding: 4px;
                            width: 100%; /* Ensure select boxes take full width of their container */
                            max-width: 100%; /* Adjust as needed for your layout */
                            max-height: 500px;
                            height: fit-content;
                            overflow-y: auto; /* Adds scroll to selects if they exceed max height */
                            display: grid;
                            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); /* Adjust as needed */
                            gap: 4px; /* Space between select boxes */
                            /* make it so its left align: */
                            justify-content: flex-start;
                        }
                      
                        /* Additional styling for the search input for consistency */
                        #loraSearch {
                            width: 100%;
                            padding: 8px;
                            margin-bottom: 4px; /* Adds space between the search box and the first category */
                            box-sizing: border-box; /* Ensures padding does not affect the overall width */
                            border-color: #00ff6a;
                        }

                        #loraSelectionsSummaryDetails * {
                            -webkit-user-select: none; /* Safari */
                            -moz-user-select: none; /* Firefox */
                            -ms-user-select: none; /* IE10+/Edge */
                            user-select: none; /* Standard */
                        }
                        
                        /* Allow text selection for lora words */
                        #loraSelectionsSummaryDetails .lora-words {
                            -webkit-user-select: text !important;
                            -moz-user-select: text !important;
                            -ms-user-select: text !important;
                            user-select: text !important;
                            cursor: text !important;
                        }



                      </style>

                    <details id="loraSelectionsSummaryDetails" open>
                        <summary>Loras (<span id="totalLorasSelected"></span>/<span id="totalLoras"></span>)</summary>
                        <div class="form-control">
                            <label for="loraSearch">
                                Lora Search:
                                <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this field to search for a specific Lora by name, use the buttons below to search by category.
                                </div>
                            </label>
                            <input type="text" id="loraSearch" onkeyup="loadLoras()" placeholder="Search for a lora...">
                        </div>
                        <!-- Somewhere in your HTML -->

                        <style>
                            /* Modern Lora Selection Interface - Inspired by Credits Shop Design */
                            
                            /* Sorting Buttons */
                            .sorting-btn {
                                background: linear-gradient(135deg, #60a5fa, #3b82f6);
                                border: 1px solid #60a5fa;
                                color: white;
                                padding: 10px 16px;
                                text-align: center;
                                font-size: 14px;
                                font-weight: 500;
                                border-radius: 8px;
                                cursor: pointer;
                                display: inline-block;
                                margin: 4px 3px;
                                transition: all 0.3s ease;
                                box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                                position: relative;
                                overflow: hidden;
                            }

                            .sorting-btn::before {
                                content: '';
                                position: absolute;
                                top: 0;
                                left: -100%;
                                width: 100%;
                                height: 100%;
                                background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
                                transition: left 0.5s ease;
                            }

                            .sorting-btn:hover::before {
                                left: 100%;
                            }

                            .sorting-btn:hover {
                                background: linear-gradient(135deg, #3b82f6, #1d4ed8);
                                transform: translateY(-2px);
                                box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
                            }

                            .sorting-btn.active {
                                background: linear-gradient(135deg, #00ff88, #10b981);
                                border-color: #00ff88;
                                box-shadow: 0 0 20px rgba(0, 255, 136, 0.4);
                                transform: translateY(-2px);
                            }

                            /* Category Buttons */
                            .category-btn {
                                background: linear-gradient(135deg, #8b5cf6, #7c3aed);
                                border: 1px solid #8b5cf6;
                                color: white;
                                padding: 10px 16px;
                                text-align: center;
                                font-size: 14px;
                                font-weight: 500;
                                border-radius: 8px;
                                cursor: pointer;
                                display: inline-block;
                                margin: 4px 3px;
                                transition: all 0.3s ease;
                                box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                                position: relative;
                                overflow: hidden;
                            }

                            .category-btn::before {
                                content: '';
                                position: absolute;
                                top: 0;
                                left: -100%;
                                width: 100%;
                                height: 100%;
                                background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
                                transition: left 0.5s ease;
                            }

                            .category-btn:hover::before {
                                left: 100%;
                            }

                            .category-btn:hover {
                                background: linear-gradient(135deg, #7c3aed, #6d28d9);
                                transform: translateY(-2px);
                                box-shadow: 0 4px 12px rgba(139, 92, 246, 0.4);
                            }

                            .category-btn.active {
                                background: linear-gradient(135deg, #ffd700, #f59e0b);
                                border-color: #ffd700;
                                color: #1f2937;
                                box-shadow: 0 0 20px rgba(255, 215, 0, 0.4);
                                transform: translateY(-2px);
                            }

                            .category-btn.deactive {
                                background: linear-gradient(135deg, #374151, #1f2937);
                                border: 1px solid #4b5563;
                                color: #9ca3af;
                                cursor: not-allowed;
                                opacity: 0.6;
                                transform: none;
                                box-shadow: none;
                            }

                            .category-btn.deactive:hover {
                                background: linear-gradient(135deg, #374151, #1f2937);
                                transform: none;
                                box-shadow: none;
                            }

                            /* Dark Mode Support for Buttons */
                            body.dark-mode .sorting-btn {
                                background: linear-gradient(135deg, #475569, #334155);
                                border-color: #64748b;
                                box-shadow: 0 2px 4px rgba(0,0,0,0.4);
                            }

                            body.dark-mode .sorting-btn:hover {
                                background: linear-gradient(135deg, #334155, #1e293b);
                                box-shadow: 0 4px 12px rgba(0,0,0,0.6);
                            }

                            body.dark-mode .sorting-btn.active {
                                background: linear-gradient(135deg, #059669, #047857);
                                border-color: #10b981;
                                box-shadow: 0 0 20px rgba(16, 185, 129, 0.4);
                            }

                            body.dark-mode .category-btn {
                                background: linear-gradient(135deg, #6b21a8, #581c87);
                                border-color: #7c2d92;
                                box-shadow: 0 2px 4px rgba(0,0,0,0.4);
                            }

                            body.dark-mode .category-btn:hover {
                                background: linear-gradient(135deg, #581c87, #4c1d95);
                                box-shadow: 0 4px 12px rgba(107, 33, 168, 0.4);
                            }

                            body.dark-mode .category-btn.active {
                                background: linear-gradient(135deg, #f59e0b, #d97706);
                                border-color: #f59e0b;
                                color: #1f2937;
                                box-shadow: 0 0 20px rgba(245, 158, 11, 0.4);
                            }

                            /* Light Mode Support for Buttons */
                            body:not(.dark-mode) .sorting-btn {
                                background: linear-gradient(135deg, #dbeafe, #bfdbfe);
                                border-color: #93c5fd;
                                color: #1e40af;
                                box-shadow: 0 2px 4px rgba(59, 130, 246, 0.2);
                            }

                            body:not(.dark-mode) .sorting-btn:hover {
                                background: linear-gradient(135deg, #bfdbfe, #93c5fd);
                                box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
                            }

                            body:not(.dark-mode) .sorting-btn.active {
                                background: linear-gradient(135deg, #dcfce7, #bbf7d0);
                                border-color: #16a34a;
                                color: #15803d;
                                box-shadow: 0 0 20px rgba(34, 197, 94, 0.3);
                            }

                            body:not(.dark-mode) .category-btn {
                                background: linear-gradient(135deg, #ede9fe, #ddd6fe);
                                border-color: #c4b5fd;
                                color: #6d28d9;
                                box-shadow: 0 2px 4px rgba(139, 92, 246, 0.2);
                            }

                            body:not(.dark-mode) .category-btn:hover {
                                background: linear-gradient(135deg, #ddd6fe, #c4b5fd);
                                box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
                            }

                            body:not(.dark-mode) .category-btn.active {
                                background: linear-gradient(135deg, #fef3c7, #fde68a);
                                border-color: #f59e0b;
                                color: #92400e;
                                box-shadow: 0 0 20px rgba(245, 158, 11, 0.3);
                            }
                            
                        </style>

                        <style>
                            .safetyRatingCheckbox {
                                display: none; /* Hide the checkbox */
                            }

                            .safetyRatingLabel {
                                color: gray; /* Gray out the labels */
                                cursor: pointer; /* Change cursor to indicate interactivity */
                                opacity: 0.7; /* Semi-transparent for disabled appearance */
                                transition: color 0.5s, opacity 0.5s, font-size 0.5s; /* Smooth transition for color change */
                                padding: 5px; /* Padding to make labels clickable */
                                background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
                                border-radius: 5px; /* Rounded corners */
                            }

                            .safety-checkbox-container {
                                margin: 10px;
                            }

                            /* make them dark ver of the colour when not checked: */
                            .safetyRatingLabel[for="showSafeCheckbox"] {
                                text-shadow: 0 0 5px rgb(0, 255, 0);
                            }

                            .safetyRatingLabel[for="showSuggestiveCheckbox"] {
                                text-shadow: 0 0 5px rgb(255, 166, 0);
                            }

                            .safetyRatingLabel[for="showNSFWCheckbox"] {
                                text-shadow: 0 0 5px rgb(255, 0, 0);
                            }

                            .safetyRatingLabel:hover {
                                opacity: 1; /* Full opacity on hover */
                                font-size: 18px;
                            }

                            .safetyRatingCheckbox:checked + .safetyRatingLabel {
                                opacity: 1; /* Make label fully visible */
                                font-size: 18px;
                            }

                            .safetyRatingCheckbox:checked + .safetyRatingLabel[for="showSafeCheckbox"] {
                                color: rgb(0, 255, 0);
                                text-shadow: 0 0 5px rgb(0, 255, 0);
                            }

                            .safetyRatingCheckbox:checked + .safetyRatingLabel[for="showSuggestiveCheckbox"] {
                                color: rgb(255, 166, 0);
                                text-shadow: 0 0 5px rgb(255, 166, 0);
                            }

                            .safetyRatingCheckbox:checked + .safetyRatingLabel[for="showNSFWCheckbox"] {
                                color: rgb(255, 0, 0);
                                text-shadow: 0 0 5px rgb(255, 0, 0);
                            }
                            
                        </style>

                        
                        <div>
                            Lora Safety Ratings:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                            <div class="tooltiptext">
                            Use these checkboxes to filter Loras by their safety ratings, with explicit loras being hidden behind the "suggestive" and "nsfw" ratings.
                            </div>
                        </div>

                        <div class="safety-checkbox-container">

                            <input style="display:none" class="safetyRatingCheckbox" type="checkbox" id="showNACheckbox" name="showNACheckbox" value="showNACheckbox" checked>
                            <label style="display:none" class="safetyRatingLabel" for="showNACheckbox">N/A</label>
                            
                            <input class="safetyRatingCheckbox" type="checkbox" id="showSafeCheckbox" name="showSafeCheckbox" value="showSafeCheckbox" checked>
                            <label  class="safetyRatingLabel" for="showSafeCheckbox">Safe</label>

                            <input class="safetyRatingCheckbox" type="checkbox" id="showSuggestiveCheckbox" name="showSuggestiveCheckbox" value="showSuggestiveCheckbox">
                            <label class="safetyRatingLabel" for="showSuggestiveCheckbox">Suggestive</label>

                            <input class="safetyRatingCheckbox" type="checkbox" id="showNSFWCheckbox" name="showNSFWCheckbox" value="showNSFWCheckbox">
                            <label class="safetyRatingLabel" for="showNSFWCheckbox">NSFW</label>
                        </div>


                        <% loraDataKeys.forEach(category => { %>
                            <% if (lora_data[category]) { %>
                                <button id="<%=category%>-CategoryButton" type="button" class="category-btn"><%= category.charAt(0).toUpperCase() + category.slice(1) %></button>
                            <% } %>
                        <% }); %>

                        <div>
                            <div>Lora Sorting:
                                <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use these buttons to sort the Loras alphabetically or by newest added/updated.
                                </div>
                            </div>
                            <button class="sorting-btn" id="sortAlphaBtn" type="button">Sort Alphabetically</button>
                            <button class="sorting-btn" id="sortNewestBtn" type="button">Sort by Newest</button>
                            <button class="sorting-btn" id="sortUsesBtn" type="button">Sort by Uses</button>
                            <button class="sorting-btn" id="sortLastUsedBtn" type="button">Sort by Last Used</button>
                        </div>

                        <div id="loraContainer" class="loraContainer">
                            <div id="loraGridContainer" class="loraCardGrid">

                            </div>
                        </div>

                        <style>
                            /* Modern Lora Container - Matching Credits Shop Design */
                            .loraContainer {
                                background: linear-gradient(135deg, #1a1a2e, #16213e);
                                border: 1px solid #333;
                                border-radius: 10px;
                                padding: 20px;
                                margin: 15px 0;
                                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                                transition: all 0.3s ease;
                            }

                            .loraContainer:hover {
                                box-shadow: 0 6px 20px rgba(0,0,0,0.4);
                                transform: translateY(-2px);
                            }

                            .loraCardGrid {
                                display: grid;
                                grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
                                gap: 15px;
                                margin-top: 10px;
                            }

                            /* Individual Lora Cards */
                            .lorabox {
                                background: linear-gradient(135deg, rgba(255,255,255,0.05), rgba(255,255,255,0.02));
                                border: 1px solid rgba(255,255,255,0.1);
                                border-radius: 12px;
                                padding: 15px;
                                transition: all 0.3s ease;
                                position: relative;
                                overflow: hidden;
                                cursor: pointer;
                            }

                            .lorabox::before {
                                content: '';
                                position: absolute;
                                top: 0;
                                left: 0;
                                right: 0;
                                height: 3px;
                                background: linear-gradient(90deg, #60a5fa, #00ff88, #ffd700);
                                opacity: 0;
                                transition: opacity 0.3s ease;
                            }

                            .lorabox:hover {
                                transform: translateY(-4px);
                                border-color: #60a5fa;
                                box-shadow: 0 6px 20px rgba(96, 165, 250, 0.2);
                            }

                            .lorabox:hover::before {
                                opacity: 1;
                            }

                            /* Dark Mode Support for Lora Container */
                            body.dark-mode .loraContainer {
                                background: linear-gradient(135deg, #0f0f23, #1a1a2e);
                                border-color: #374151;
                                color: #e2e8f0;
                            }

                            body.dark-mode .lorabox {
                                background: linear-gradient(135deg, rgba(255,255,255,0.08), rgba(255,255,255,0.04));
                                border-color: rgba(255,255,255,0.15);
                                color: #e2e8f0;
                            }

                            body.dark-mode .lorabox:hover {
                                border-color: #60a5fa;
                                box-shadow: 0 6px 20px rgba(96, 165, 250, 0.3);
                            }

                            /* Light Mode Support for Lora Container */
                            body:not(.dark-mode) .loraContainer {
                                background: transparent;
                                border: 2px solid var(--light-highlight-colour);
                                color: var(--light-text-colour);
                            }

                            body:not(.dark-mode) .lorabox {
                                background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(59, 130, 246, 0.05));
                                border-color: rgba(59, 130, 246, 0.2);
                                color: #1e293b;
                            }

                            body:not(.dark-mode) .lorabox:hover {
                                border-color: #3b82f6;
                                box-shadow: 0 6px 20px rgba(59, 130, 246, 0.2);
                            }

                            /* Search Input Styling */
                            #loraSearch {
                                width: 100%;
                                padding: 12px 16px;
                                margin-bottom: 8px;
                                box-sizing: border-box;
                                border: 2px solid #60a5fa;
                                border-radius: 8px;
                                background: linear-gradient(135deg, rgba(96, 165, 250, 0.1), rgba(96, 165, 250, 0.05));
                                color: inherit;
                                font-size: 14px;
                                transition: all 0.3s ease;
                            }

                            #loraSearch:focus {
                                outline: none;
                                border-color: #00ff88;
                                box-shadow: 0 0 10px rgba(0, 255, 136, 0.3);
                                background: linear-gradient(135deg, rgba(0, 255, 136, 0.1), rgba(0, 255, 136, 0.05));
                            }

                            body.dark-mode #loraSearch {
                                background: linear-gradient(135deg, rgba(96, 165, 250, 0.1), rgba(96, 165, 250, 0.05));
                                border-color: #60a5fa;
                                color: #e2e8f0;
                            }

                            body:not(.dark-mode) #loraSearch {
                                background: linear-gradient(135deg, rgba(96, 165, 250, 0.15), rgba(96, 165, 250, 0.08));
                                border-color: #3b82f6;
                                color: #1e293b;
                            }

                            /* Safety Rating Checkboxes Container */
                            .safety-checkbox-container {
                                background: rgba(255,255,255,0.05);
                                border-radius: 8px;
                                padding: 12px;
                                margin: 10px 0;
                                border: 1px solid rgba(255,255,255,0.1);
                            }

                            body.dark-mode .safety-checkbox-container {
                                background: rgba(255,255,255,0.05);
                                border-color: rgba(255,255,255,0.1);
                            }

                            body:not(.dark-mode) .safety-checkbox-container {
                                background: rgba(59, 130, 246, 0.1);
                                border-color: rgba(59, 130, 246, 0.2);
                            }
                        </style>

                        <div id="loraSelectionsSummary">

                        </div>

                        <script>

                            
                            <% if (session.lastRequestSD) { %>
                                let lastRequestSD = <%- JSON.stringify(session.lastRequestSD) %>;
                            <% } else { %>
                                let lastRequestSD = {};
                            <% } %>

                            if (window.location.href.includes('prompt=')) {
                                lastRequestSD = {};
                            }

                            var favorites = {};

                            let savedFavoritedIds = lastRequestSD.favoriteLoras || [];

                            if (userProfile?.favoriteLoras ? userProfile.favoriteLoras : false) {
                                savedFavoritedIds = userProfile.favoriteLoras;
                            }

                            // replace any -sdxl with -pdxl in the savedFavoritedIds:
                            savedFavoritedIds = savedFavoritedIds.map(id => {
                                if (id.includes('-sdxl')) {
                                    return id.replace('-sdxl', '-pdxl');
                                } else {
                                    return id;
                                }
                            })

                            // Load the favorites from the last request
                            savedFavoritedIds.forEach(id => {
                                favorites[id] = true;
                            });

                            var masterLoraData = {}

                            <% loraDataKeys.forEach(category => { %>
                                <% if (lora_data[category]) { %>
                                    <% Object.entries(lora_data[category]).forEach(([key, value]) => { %>
                                        masterLoraData['<%= key %>'] = {
                                            strength: <%= value.strength || 'Null' %>,
                                            words: `<%= value.words || 'Null' %>`,
                                            description: `<%= value.description || 'Null' %>`,
                                            name: `<%= value.name || key %>`,
                                            link: `<%= value.link || 'Null' %>`,
                                            dateCreated: `<%= value.dateCreated || 'Null' %>`,
                                            rating: `<%= value.rating || 'n/a' %>`,
                                            image: `<%= value.image %>`,
                                            selected: false,
                                            defaultStrength: <%= value.strength || 'Null' %>,
                                            usesCount: parseInt(`<%= value.usesCount || '0' %>`),
                                            lastUsed: `<%= value.lastUsed || '0' %>`
                                        }
                                    <% }); %>
                                <% } %>
                            <% }); %>

                            var lastSelectedCategory = 'style';

                            function toggleFavorite(loraId) {
                                favorites[loraId] = !favorites[loraId];
                                // remove the loraId from the favorites if it is false:
                                if (!favorites[loraId]) {
                                    delete favorites[loraId];
                                }

                                // do a post request to generator-set-favorite-loras with body.favoriteLoras = Object.keys(favorites) to save the favorites to the session:
                                fetch('/generator-set-favorite-loras', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        favoriteLoras: Object.keys(favorites)
                                    })
                                })

                                loadLoras();
                            }

                            function loraChecks(key, value, model, showSafe, showSuggestive, showNSFW, showNA, loraSearch, name) {
                                // Model is PDXL and lora isnt PDXL
                                if (model.startsWith("pdxl") && !key.includes("-pdxl")) {
                                    masterLoraData[key].selected = false;
                                    return false;
                                } 
                                if (model.startsWith("flux") && !key.includes("-flux")) {
                                    masterLoraData[key].selected = false;
                                    return false;
                                } 
                                if (model.startsWith("illustrious") && !key.includes("-illustrious")) {
                                    masterLoraData[key].selected = false;
                                    return false;
                                }
                                if (!model.startsWith("pdxl") && !model.startsWith("flux") && !model.startsWith('illustrious')) {
                                    if (key.includes("-pdxl") || key.includes("-flux") || key.includes('-illustrious')) {
                                        masterLoraData[key].selected = false;
                                        return false;
                                    }
                                }

                                // Check if the Lora is safe, suggestive, nsfw, or n/a
                                if (value.rating === 'safe' && !showSafe) {
                                    return false;
                                } else if (value.rating === 'suggestive' && !showSuggestive) {
                                    return false;
                                } else if (value.rating === 'nsfw' && !showNSFW) {
                                    return false;
                                } else if (value.rating === 'n/a' && !showNA) {
                                    return false;
                                }

                                // Check if the Lora .name or any .words matches the search query:
                                // if (!name.includes(loraSearch) && !value.words.includes(loraSearch) && !key.includes(loraSearch) && !value.description.includes(loraSearch)) {
                                //     return false; 
                                // }

                                // split the loraSearch into an array of words by spaces and commas:
                                const loraSearchArray = loraSearch.split(/[\s,]+/);
                                
                                // check if the lora .name, .words, .description, key, have all of the words in the loraSearchArray anywhere in them:
                                if (!loraSearchArray.every(word => name.includes(word) || value.words.includes(word) || key.includes(word) || value.description.includes(word))) {
                                    return false;
                                }

                                return true
                            }

                            // recreate the above code, using filtering from the model select box to show only the loras that are compatible with the selected model, and the safety ratings checkboxes to show only the loras that are safe, suggestive, nsfw, or n/a:
                            function loadLoras() {
                                // Clear the loraContainer
                                let loraGridContainer = document.getElementById('loraGridContainer');
                                loraGridContainer.innerHTML = '';

                                const modelRaw = document.getElementById('model');

                                const model = modelRaw.options[modelRaw.selectedIndex].value;
                                
                                const showSafe = document.getElementById('showSafeCheckbox').checked;
                                const showSuggestive = document.getElementById('showSuggestiveCheckbox').checked;
                                const showNSFW = document.getElementById('showNSFWCheckbox').checked;
                                const showNA = document.getElementById('showNACheckbox').checked; 

                                const loraSearch = document.getElementById('loraSearch').value.toLowerCase();

                                // sorting logic:
                                let sortAlphaBtn = document.getElementById('sortAlphaBtn');
                                let sortNewestBtn = document.getElementById('sortNewestBtn');
                                let sortUsesBtn = document.getElementById('sortUsesBtn');
                                let sortLastUsedBtn = document.getElementById('sortLastUsedBtn');

                                if (sortAlphaBtn.classList.contains('active')) {
                                    // sort the loras alphabetically:
                                    masterLoraData = Object.fromEntries(Object.entries(masterLoraData).sort());
                                } else if (sortNewestBtn.classList.contains('active')) {
                                    // sort the loras by newest ms timestamp "1717352144698.4163" as example:
                                    masterLoraData = Object.fromEntries(Object.entries(masterLoraData).sort((a, b) => {
                                        return parseFloat(b[1].dateCreated) - parseFloat(a[1].dateCreated);
                                    }));
                                } else if(sortUsesBtn.classList.contains('active')) {
                                    // sort the loras by uses count:
                                    masterLoraData = Object.fromEntries(Object.entries(masterLoraData).sort((a, b) => {
                                        return parseFloat(b[1].usesCount) - parseFloat(a[1].usesCount);
                                    }));
                                } else if (sortLastUsedBtn.classList.contains('active')) {
                                    // sort the loras by last used ms timestamp "1717352144698" as example:
                                    masterLoraData = Object.fromEntries(Object.entries(masterLoraData).sort((a, b) => {
                                        return parseFloat(b[1].lastUsed) - parseFloat(a[1].lastUsed);
                                    }));
                                }

                                // if there's a search term, prioritize direct word matches at the top
                                if (loraSearch.trim()) {
                                    masterLoraData = Object.fromEntries(Object.entries(masterLoraData).sort((a, b) => {
                                        // Split names into words and check for exact word matches
                                        const aWords = a[1].name.toLowerCase().split(/[\s\(\)\-_,\.]+/).filter(word => word.length > 0);
                                        const bWords = b[1].name.toLowerCase().split(/[\s\(\)\-_,\.]+/).filter(word => word.length > 0);
                                        
                                        const aNameMatch = aWords.includes(loraSearch);
                                        const bNameMatch = bWords.includes(loraSearch);
                                        
                                        if (bNameMatch && !aNameMatch) {
                                            return 1;
                                        } else if (aNameMatch && !bNameMatch) {
                                            return -1;
                                        } else {
                                            return 0;
                                        }
                                    }));
                                }

                                // sort any loras that are favorited or have .selected true to the top of the list, with favorited loras being at the very top:
                                masterLoraData = Object.fromEntries(Object.entries(masterLoraData).sort((a, b) => {
                                    if (favorites[b[0]] && !favorites[a[0]]) {
                                        return 1;
                                    } else if (favorites[a[0]] && !favorites[b[0]]) {
                                        return -1;
                                    } else if (b[1].selected && !a[1].selected) {
                                        return 1;
                                    } else if (a[1].selected && !b[1].selected) {
                                        return -1;
                                    } else {
                                        return 0;
                                    }
                                }));



                                // Create the Lora elements
                                Object.entries(masterLoraData).forEach(([key, value]) => {

                                    const name = value.name.toLowerCase();

                                    // Check if the Lora is compatible with the selected model

                                    // if loraChecks returns false then continue to the next lora:
                                    if (!loraChecks(key, value, model, showSafe, showSuggestive, showNSFW, showNA, loraSearch, name)) {
                                        return;
                                    } else {
                                        // only show the loras in the selected category:
                                        if (lastSelectedCategory.toLowerCase() !== key.split('-')[0]) {
                                            return false;
                                        }
                                    }

                                    let loraElement = document.createElement('div');
                                    loraElement.classList.add('lorabox');
                                    loraElement.innerHTML = `
                                        <div class="checkbox-container" ${favorites[key] ? 'style="border: 2px solid rgba(255, 255, 0, 0.7);"' : ''}>
                                            <input class="loraCheckboxDirect" type="checkbox" id="${key}" name="${key.split('-')[0]}" value="${key}" ${value.selected ? 'checked' : ''}>
                                            <label id="label-rating-${key}" for="${key}" style="color: ${value.rating === 'safe' ? 'green' : value.rating === 'suggestive' ? 'yellow' : value.rating === 'nsfw' ? 'red' : 'white'};">${value.rating.toUpperCase()}</label>
                                            <label ${favorites[key] ? 'style="color: yellow; font-weight: bold;"' : ''} for="${key}">${value.name}</label>
                                            <button type="button" style="z-index: 123" class="favorite-btn ${favorites[key] ? 'favorite' : ''}" onclick="toggleFavorite('${key}')">${favorites[key] ? '★' : '☆'}</button>
                                        </div>
                                        <img loading="lazy" id="${key}-image" width="256" height="384" src="${value.image || 'default-image.jpg'}" onclick="document.getElementById('${key}').checked = !document.getElementById('${key}').checked; document.getElementById('${key}').dispatchEvent(new Event('change'));">
                                    `;
                                    loraGridContainer.appendChild(loraElement);
                                });

                                // add event listener for every class="loraCheckboxDirect" to toggle the selected state of the lora inside the masterLoraData object:
                                document.querySelectorAll('.loraCheckboxDirect').forEach(checkbox => {
                                    checkbox.addEventListener('change', function() {
                                        let loraId = this.value;
                                        masterLoraData[loraId].selected = this.checked;
                                        updateLoraSelectionsSummary();
                                    })
                                })

                                // if a category button has no loras then add class deactive to it:
                                document.querySelectorAll('.category-btn').forEach(button => {
                                    let category = button.innerText.toLowerCase();
                                    let categoryLoras = Object.entries(masterLoraData).filter(([key, value]) => key.split('-')[0] === category);
                                    let categoryLorasArrays = {}
                                    // check loras in the category:
                                    categoryLoras.forEach(([key, value]) => {
                                        name = value.name.toLowerCase();
                                        if (loraChecks(key, value, model, showSafe, showSuggestive, showNSFW, showNA, loraSearch, name)) {
                                            categoryLorasArrays[key] = value;
                                        }
                                    })

                                    if (Object.keys(categoryLorasArrays).length === 0) {
                                        button.classList.add('deactive');
                                        // button.classList.remove('active');
                                        button.disabled = true;
                                    } else {
                                        button.classList.remove('deactive');
                                        // button.classList.add('active');
                                        button.disabled = false;
                                    }
                                    
                                })

                            }

                            // add window onload function:
                            document.addEventListener('DOMContentLoaded', function() {       

                                // on model change:
                                document.getElementById('model').addEventListener('change', function() {
                                    // load the loras:
                                    loadLoras();
                                    updateLoraSelectionsSummary();
                                })

                                // if lastRequestSD model has sdxl- then replace it with pdxl-:
                                if (lastRequestSD.model && lastRequestSD.model.startsWith('sdxl-')) {
                                    lastRequestSD.model = lastRequestSD.model.replace('sdxl-', 'pdxl-');
                                }

                               
                                
                                // Set form values to the last request values
                                document.getElementById('prompt').value = lastRequestSD.prompt || 'masterpiece, best quality, amazing quality, ';
                                document.getElementById('negativeprompt').value = lastRequestSD.negativeprompt || 'nsfw, bad quality, worst quality, worst detail, sketch, censor, ';
                                document.getElementById('aspectRatio').value = lastRequestSD.aspectRatio || 'portrait';
                                document.getElementById('model').value = lastRequestSD.model || 'illustrious-novafurry';
                                document.getElementById('steps').value = lastRequestSD.steps || '25';
                                document.getElementById('cfguidance').value = lastRequestSD.cfguidance || '5';
                                document.getElementById('seed').value = lastRequestSD.seed || '-1';
                                document.getElementById('scheduler').value = lastRequestSD.scheduler || "eulera";


                                // refresh prompt negpromt on input stuff:
                                document.getElementById('prompt').dispatchEvent(new Event('change'));
                                document.getElementById('negativeprompt').dispatchEvent(new Event('change'));

                                // fire the change event for the model select box and the aspect ratio select box:
                                document.getElementById('model').dispatchEvent(new Event('change'));
                                document.getElementById('aspectRatio').dispatchEvent(new Event('change'));

                                // set the loras as selected inside of the masterLoraData object:
                                if (!lastRequestSD.loras) {
                                    lastRequestSD.loras = [];
                                }
                                lastRequestSD.loras.forEach(loraId => {
                                    // check if the loraId exists in the masterLoraData object:
                                    if (loraId.includes('-sdxl')) {
                                        loraId = loraId.replace('-sdxl', '-pdxl');
                                    }
                                    if (masterLoraData[loraId]) {
                                        masterLoraData[loraId].selected = true;
                                    }
                                });

                                // category button logic, if the button is clicked then show only the loras in that category:
                                document.querySelectorAll('.category-btn').forEach(button => {
                                    button.addEventListener('click', function() {
                                        lastSelectedCategory = button.innerText;
                                        // set class to active for the button that was clicked:
                                        document.querySelectorAll('.category-btn').forEach(button => {
                                            button.classList.remove('active');
                                        })
                                        button.classList.add('active');
                                        // load the loras:
                                        loadLoras();
                                    })
                                })

                                // sorting button logic, if the button is clicked then sort the loras alphabetically or by newest:
                                // document.getElementById('sortAlphaBtn').addEventListener('click', function() {
                                //     document.getElementById('sortAlphaBtn').classList.add('active');
                                //     document.getElementById('sortNewestBtn').classList.remove('active');
                                //     // load the loras:
                                //     loadLoras();
                                // })

                                // document.getElementById('sortNewestBtn').addEventListener('click', function() {
                                //     document.getElementById('sortNewestBtn').classList.add('active');
                                //     document.getElementById('sortAlphaBtn').classList.remove('active');
                                //     // load the loras:
                                //     loadLoras();
                                // })

                                // new code that uses the class of .sorting-btn to add event listeners to all of them:
                                document.querySelectorAll('.sorting-btn').forEach(button => {
                                    button.addEventListener('click', function() {
                                        document.querySelectorAll('.sorting-btn').forEach(button => {
                                            button.classList.remove('active');
                                        })
                                        button.classList.add('active');
                                        // load the loras:
                                        loadLoras();
                                    })
                                })

                                // using class="safetyRatingCheckbox" to filter the loras by their safety ratings:
                                document.querySelectorAll('.safetyRatingCheckbox').forEach(checkbox => {
                                    checkbox.addEventListener('change', function() {
                                        // load the loras:
                                        loadLoras();
                                        updateLoraSelectionsSummary()
                                    })
                                })

                                document.getElementById('sortUsesBtn').classList.add('active');
                                document.getElementById('style-CategoryButton').classList.add('active');

                                // trigger model change event:

                                if (window.location.href.includes('prompt=')) {

                                    let urlParams = new URLSearchParams(window.location.search);

                                    // jscammie.com/?prompt=hello&negativeprompt=world&aspectRatio=square&model=fluffysonic&steps=20&cfguidance=3&seed=-1&scheduler=eulera&loras=[]&lora_strengths=[]

                                    // prompt/negative prompt might contain < or > or &lt; and &gt;:, replace them with < and > AND make sure you get the whole string:

                                    let prompt = urlParams.get('prompt').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');

                                    let negativeprompt = urlParams.get('negativeprompt').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');

                                    let data = [
                                        prompt,
                                        negativeprompt,
                                        urlParams.get('aspectRatio'),
                                        urlParams.get('model'),
                                        urlParams.get('loras'),
                                        urlParams.get('lora_strengths'),
                                        urlParams.get('steps'),
                                        urlParams.get('cfguidance'),
                                        urlParams.get('seed'),
                                    ]

                                    importAiData(data)

                                }

                                document.getElementById('model').dispatchEvent(new Event('change'));
                                
                                // Initial call to updateLoraSelectionsSummary with a small delay to ensure DOM is ready
                                setTimeout(() => {
                                    updateLoraSelectionsSummary();
                                }, 100);
      
                            })

                        </script>

                        <script>
                            function setStrength(loraId, strength) {
                                event.preventDefault();
                                document.getElementById(`strength-${loraId}`).value = strength;
                                document.getElementById(`strength-${loraId}-value`).innerText = strength;
                                masterLoraData[loraId].strength = strength;
                            }

                            // Function to detect if device is phone
                            function isPhoneDevice() {
                                return window.innerWidth < 768; // Common breakpoint for phones
                            }

                            // Function to show lora popup with traditional detailed information
                            function showLoraPopup(loraId, loraData) {
                                const popup = document.getElementById('loraPopupOverlay');
                                const content = document.getElementById('loraPopupContent');
                                
                                let wordsFormatted = "";
                                
                                // Format words (same as traditional layout)
                                loraData.words = loraData.words.replace(/&#39;/g, "'");
                                loraData.words = loraData.words.replace(/&quot;/g, '"');
                                loraData.words = loraData.words.replace(/&lt;/g, '<');
                                loraData.words = loraData.words.replace(/&gt;/g, '>');
                                loraData.words = loraData.words.replace(/&amp;/g, '&');

                                loraData.words.split(';').map((word, index) => {
                                    let noWhitespaceWord = word.trim();
                                    if (noWhitespaceWord.startsWith(',')) {
                                        noWhitespaceWord = noWhitespaceWord.slice(1);
                                    }
                                    if (noWhitespaceWord.endsWith(',')) {
                                        noWhitespaceWord = noWhitespaceWord.slice(0, -1);
                                    }
                                    if (noWhitespaceWord.toLowerCase() === "n/a") {
                                        wordsFormatted += `<a class="lora-words"></a>`;
                                    } else {
                                        wordsFormatted += `<a class="lora-words">
                                            Words ${index + 1}: ${noWhitespaceWord}<br>
                                            <button class="lora-words-copy-button" onclick="copyXWordsToClipboard('${noWhitespaceWord}')">Copy Words</button>
                                        </a><br>`;
                                    }
                                });

                                let loraIdFormatted = "";
                                const allowedUsers = ['1039574722163249233', '550239177837379594'];
                                if (allowedUsers.includes(document.getElementById('user-session').value)) {
                                    loraIdFormatted = `<a class="lora-id"><strong>ID:</strong> ${loraId}<br><button class="lora-words-copy-button" onclick="copyXWordsToClipboard('${loraId}')">Copy ID</button></a>`;
                                }

                                const lastUsed = loraData.lastUsed == '0' ? 'Never Used' : new Date(parseFloat(loraData.lastUsed)).toLocaleString();

                                // Create traditional detailed layout in popup
                                content.innerHTML = `
                                    <div class="lora-popup-header">
                                        <h3>${loraData.name || 'Null'}</h3>
                                        <button class="close-popup-btn" onclick="closeLoraPopup()">×</button>
                                    </div>
                                    <div class="lora-popup-body">
                                        <div class="lora-toggle">
                                            <input id="popup-enable-${loraId}" type="checkbox" value="${loraId}" checked onchange="masterLoraData['${loraId}'].selected = this.checked; loadLoras(); updateLoraSelectionsSummary();">
                                            <label for="popup-enable-${loraId}">
                                                <span class="lora-category">${loraId.split('-')[0].charAt(0).toUpperCase() + loraId.split('-')[0].slice(1)}</span> | ${loraData.name || 'Null'} | Uses: ${loraData.usesCount}
                                            </label>
                                        </div>
                                        <div class="lora-info">
                                            ${loraIdFormatted}
                                            <p class="lora-description"><strong>Description:</strong> ${loraData.description || 'Null'}</p>
                                            <p class="lora-strength"><strong>Default Strength:</strong> ${loraData.strength || 'Null'}</p>
                                            ${wordsFormatted}
                                            <p class="lora-strength-slider"> 
                                                <input type="range" id="popup-strength-${loraId}" name="popup-strength-${loraId}" min="-3" max="3" step="0.05" value="${loraData.strength}" style="width: 90%;">
                                                <a id="popup-strength-${loraId}-value" style="transform: translateY(-32px) !important; margin: 4px; font-size: 28px">${loraData.strength}</a>
                                            </p>
                                            <button class="lora-reset-strength-button" onclick="setStrength('${loraId}', '${loraData.defaultStrength}')">Reset Strength</button>
                                            <p class="lora-date"><strong>Date Created/Updated:</strong> ${new Date(parseFloat(loraData.dateCreated)).toLocaleString()} | Last Used: ${lastUsed}</p>
                                            <p class="lora-link"><strong>Link:</strong> <a href="${loraData.link || '#'}">Clickable Link</a></p>
                                        </div>
                                    </div>
                                `;

                                // Add event listener for strength slider in popup
                                const slider = document.getElementById(`popup-strength-${loraId}`);
                                slider.addEventListener('input', function() {
                                    setStrength(loraId, slider.value);
                                    document.getElementById(`popup-strength-${loraId}-value`).innerText = slider.value;
                                    // Also update the main slider if it exists
                                    const mainSlider = document.getElementById(`strength-${loraId}`);
                                    if (mainSlider) {
                                        mainSlider.value = slider.value;
                                        const mainValueSpan = document.getElementById(`strength-${loraId}-value`);
                                        if (mainValueSpan) mainValueSpan.innerText = slider.value;
                                    }
                                });

                                popup.style.display = 'block';
                                document.body.style.overflow = 'hidden';
                            }

                            // Function to close lora popup
                            function closeLoraPopup() {
                                const popup = document.getElementById('loraPopupOverlay');
                                popup.style.display = 'none';
                                document.body.style.overflow = 'auto';
                            }

                            // Function to position lora buttons near prompt box
                            function positionLoraButtonsNearPrompt() {
                                const promptBox = document.getElementById('prompt');
                                const loraButtonsContainer = document.getElementById('loraButtonsFloatingContainer');
                                
                                if (promptBox && loraButtonsContainer) {
                                    const promptRect = promptBox.getBoundingClientRect();
                                    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                                    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
                                    const containerWidth = loraButtonsContainer.offsetWidth || 80; // Fallback width
                                    
                                    // Position containers properties
                                    loraButtonsContainer.style.position = 'absolute';
                                    loraButtonsContainer.style.top = (promptRect.top + scrollTop) + 'px';
                                    loraButtonsContainer.style.zIndex = '999';
                                    loraButtonsContainer.style.transition = 'left 0.3s ease-in-out';
                                    
                                    // Check if prompt is hovered/focused OR lora buttons are hovered
                                    const isPromptActive = promptBox.matches(':hover, :focus');
                                    const isLoraContainerHovered = loraButtonsContainer.matches(':hover');
                                    
                                    if (isPromptActive || isLoraContainerHovered) {
                                        // Move to the right of the prompt box when active
                                        loraButtonsContainer.style.left = (promptRect.right + scrollLeft + 10) + 'px';
                                        loraButtonsContainer.classList.add('lora-buttons-visible');
                                    } else {
                                        // Position on top of the prompt box, offset by lora buttons width so they're mostly hidden
                                        loraButtonsContainer.style.left = (promptRect.left + scrollLeft + promptRect.width - containerWidth + 20) + 'px';
                                        loraButtonsContainer.classList.remove('lora-buttons-visible');
                                    }
                                }
                            }

                            // Function to setup prompt box event listeners
                            function setupPromptBoxListeners() {
                                const promptBox = document.getElementById('prompt');
                                
                                if (promptBox) {
                                    // Add event listeners for hover and focus on prompt
                                    promptBox.addEventListener('mouseenter', positionLoraButtonsNearPrompt);
                                    promptBox.addEventListener('mouseleave', positionLoraButtonsNearPrompt);
                                    promptBox.addEventListener('focus', positionLoraButtonsNearPrompt);
                                    promptBox.addEventListener('blur', positionLoraButtonsNearPrompt);
                                }
                            }

                            // Function to setup lora container event listeners (called after container is created)
                            function setupLoraContainerListeners() {
                                const loraButtonsContainer = document.getElementById('loraButtonsFloatingContainer');
                                
                                if (loraButtonsContainer) {
                                    // Add event listeners for hover on lora buttons container
                                    loraButtonsContainer.addEventListener('mouseenter', positionLoraButtonsNearPrompt);
                                    loraButtonsContainer.addEventListener('mouseleave', positionLoraButtonsNearPrompt);
                                }
                            }

                            function updateLoraSelectionsSummary() {
                                const loraSelectionsSummary = document.getElementById('loraSelectionsSummary');
                                if (!loraSelectionsSummary) {
                                    console.error('loraSelectionsSummary element not found');
                                    return;
                                }
                                loraSelectionsSummary.innerHTML = '';
                                const selectedLoras = Object.entries(masterLoraData).filter(([key, value]) => value.selected);
                                
                                // total loras needs to respect the model type
                                const totalLoras = Object.entries(masterLoraData).filter(([key, value]) => {
                                    if (document.getElementById('model').value.startsWith("pdxl")) {
                                        return key.includes("-pdxl");
                                    } else if (document.getElementById('model').value.startsWith("flux")) {
                                        return key.includes("-flux");
                                    } else if (document.getElementById('model').value.startsWith("illustrious")) {
                                        return key.includes("-illustrious");
                                    } else {
                                        return !key.includes("-pdxl") && !key.includes("-flux") && !key.includes("-illustrious");
                                    }
                                }).length;

                                document.getElementById('totalLorasSelected').innerText = selectedLoras.length;
                                document.getElementById('totalLoras').innerText = totalLoras;

                                if (selectedLoras.length === 0) {
                                    loraSelectionsSummary.innerHTML = '<p>No Loras selected</p>';
                                    console.log('Safari Debug: Set loraSelectionsSummary to "No Loras selected"');
                                    // Remove floating buttons if no loras selected
                                    const floatingContainer = document.getElementById('loraButtonsFloatingContainer');
                                    if (floatingContainer) {
                                        floatingContainer.remove();
                                    }
                                    return;
                                }

                                // Check if device is phone to determine layout
                                if (isPhoneDevice()) {
                                    // Traditional layout for phones
                                    renderTraditionalLoraLayout(selectedLoras, loraSelectionsSummary);
                                    // Remove floating buttons on phones
                                    const floatingContainer = document.getElementById('loraButtonsFloatingContainer');
                                    if (floatingContainer) {
                                        floatingContainer.remove();
                                    }
                                } else {
                                    // Show traditional layout in summary AND create floating buttons for PC/Tablet
                                    console.log('Safari Debug: Rendering traditional layout for desktop/tablet');
                                    renderTraditionalLoraLayout(selectedLoras, loraSelectionsSummary);
                                    createFloatingLoraButtons(selectedLoras);
                                }
                            }

                            function renderTraditionalLoraLayout(selectedLoras, container) {
                                console.log('Safari Debug: renderTraditionalLoraLayout called with', selectedLoras.length, 'loras');
                                selectedLoras.forEach(([key, value]) => {
                                    const loraSummary = document.createElement('div');
                                    loraSummary.classList.add('lora-details');

                                    let wordsFormatted = ""

                                    console.log(value.words)

                                    // format any unicode ' to normal ':
                                    value.words = value.words.replace(/&#39;/g, "'");
                                    value.words = value.words.replace(/&quot;/g, '"');
                                    value.words = value.words.replace(/&lt;/g, '<');
                                    value.words = value.words.replace(/&gt;/g, '>');
                                    value.words = value.words.replace(/&amp;/g, '&');

                                    console.log(value.words)

                                    value.words.split(';').map((word, index) => {
                                        let noWhitespaceWord = word.trim()
                                        // remove any start or end commas:
                                        if (noWhitespaceWord.startsWith(',')) {
                                            noWhitespaceWord = noWhitespaceWord.slice(1)
                                        }
                                        if (noWhitespaceWord.endsWith(',')) {
                                            noWhitespaceWord = noWhitespaceWord.slice(0, -1)
                                        }
                                        // if the word is "N/A" then dont add it to the list:
                                        if (noWhitespaceWord.toLowerCase() === "n/a") {
                                            wordsFormatted += `<a class="lora-words">
                                            </a>`
                                        } else {
                                            wordsFormatted += `<a class="lora-words">
                                                Words ${index + 1}: ${noWhitespaceWord}<br>
                                                <button class="lora-words-copy-button" onclick="copyXWordsToClipboard('${noWhitespaceWord.replace(/'/g, "\\'")}')">Copy Words</button>
                                            </a><br>`
                                        }
                                    })

                                    if (value.lastUsed == '0') {
                                        value.lastUsed = 'Never Used'
                                    } else {
                                        value.lastUsed = new Date(parseFloat(value.lastUsed)).toLocaleString()
                                    }

                                    let loraIdFormatted = ""

                                    const allowedUsers = ['1039574722163249233', '550239177837379594']

                                    if (allowedUsers.includes(document.getElementById('user-session').value)) {
                                        loraIdFormatted = `<a class="lora-id"><strong>ID:</strong> ${key}<br><button class="lora-words-copy-button" onclick="copyXWordsToClipboard('${key}')">Copy ID</button></a>`
                                    }

                                    loraSummary.innerHTML = `
                                        <div class="lora-toggle">
                                            <input id="enable-${key}" type="checkbox" value="${key}" checked onchange="masterLoraData['${key}'].selected = this.checked; loadLoras(); updateLoraSelectionsSummary();">
                                            <label for="enable-${key}">
                                                <span class="lora-category">${key.split('-')[0].charAt(0).toUpperCase() + key.split('-')[0].slice(1)}</span> | ${value.name || 'Null'} | Uses: ${value.usesCount}
                                            </label>
                                        </div>
                                        <div class="lora-info">
                                            ${loraIdFormatted}
                                            <p class="lora-description"><strong>Description:</strong> ${value.description || 'Null'}</p>
                                            <p class="lora-strength"><strong>Default Strength:</strong> ${value.strength || 'Null'}</p>
                                            ${wordsFormatted}
                                            <p class="lora-strength-slider"> 
                                                <input type="range" id="strength-${key}" name="strength-${key}" min="-3" max="3" step="0.05" value="${value.strength}" style="width: 85%;">
                                                <a id="strength-${key}-value" style="transform: translateY(-32px) !important; margin: 4px; font-size: 28px">${value.strength}</a>
                                            </p>
                                            <button class="lora-reset-strength-button" onclick="setStrength('${key}', '${value.defaultStrength}')">Reset Strength</button>

                                            <p class="lora-date"><strong>Date Created/Updated:</strong> ${new Date(parseFloat(value.dateCreated)).toLocaleString()} | Last Used: ${value.lastUsed}</p>
                                            <p class="lora-link"><strong>Link:</strong> <a href="${value.link || '#'}">Clickable Link</a></p>
                                        </div>
                                    `;
                                    container.appendChild(loraSummary);
                                });

                                // Add event listeners for the strength sliders
                                document.querySelectorAll('.lora-strength-slider input').forEach(slider => {
                                    slider.addEventListener('input', function() {
                                        const loraId = slider.id.split('-').slice(1).join('-');
                                        setStrength(loraId, slider.value);
                                        document.getElementById(`strength-${loraId}-value`).innerText = slider.value;
                                    })
                                })
                            }

                            function createFloatingLoraButtons(selectedLoras) {
                                // Remove existing floating container
                                const existingContainer = document.getElementById('loraButtonsFloatingContainer');
                                if (existingContainer) {
                                    existingContainer.remove();
                                }

                                // Create floating container
                                const floatingContainer = document.createElement('div');
                                floatingContainer.id = 'loraButtonsFloatingContainer';
                                floatingContainer.className = 'lora-floating-buttons-container';
                                
                                selectedLoras.forEach(([key, value]) => {
                                    const loraButton = document.createElement('div');
                                    loraButton.className = 'lora-floating-button';
                                    loraButton.onclick = () => showLoraPopup(key, value);
                                    
                                    // Clean the lora name by removing model prefixes
                                    let cleanName = value.name || key;
                                    cleanName = cleanName.replace(/^(illustrious|pdxl|flux)\s*/i, '');
                                    
                                    loraButton.innerHTML = `
                                        <img src="${value.image}" alt="${cleanName}" class="lora-floating-image">
                                        <div class="lora-floating-overlay">
                                            <span class="lora-floating-name">${cleanName}</span>
                                        </div>
                                    `;
                                    
                                    floatingContainer.appendChild(loraButton);
                                });
                                
                                // Add to document body
                                document.body.appendChild(floatingContainer);
                                
                                // Setup event listeners for prompt box interactions
                                setupPromptBoxListeners();
                                
                                // Setup event listeners for lora container interactions (after it's in DOM)
                                setTimeout(() => {
                                    setupLoraContainerListeners();
                                    positionLoraButtonsNearPrompt();
                                }, 100);
                            }

                            // Reposition on window resize and scroll
                            window.addEventListener('resize', positionLoraButtonsNearPrompt);
                            window.addEventListener('scroll', positionLoraButtonsNearPrompt);
                        </script>

                        <!-- <button type="button" id="loadAllLoras" onclick="loadLoras()">Load All Loras</button> -->

                                        </details>
                                    </details>
                                </details>
                            </details>
                        </details>
                    </details>
                    </details>

                    <style>
                        #clearAllLorasButton {
                            width: 100%;
                            background-color: #ff000085; /* Red */
                            border: none;
                            color: white;
                            padding: 15px 32px;
                            text-align: center;
                            text-decoration: none;
                            display: inline-block;
                            font-size: 16px;
                            margin: 4px 2px;
                            cursor: pointer;
                            transition: transform 0.7s, background-color 0.3s; /* Adjust time as needed */
                            transform: scale(1) rotate(0deg); /* Default state */
                            transform-origin: center; /* Ensures the scaling happens from the center */
                        }
                        #clearAllLorasButton:hover {
                            transform: scale(1.08) rotate(1deg); 
                            background-color: #ff0000; /* Red */
                        }
                    </style>

                    <button type="button" id="clearAllLorasButton" onclick="Object.entries(masterLoraData).forEach(([key, value]) => { value.selected = false; }); loadLoras(); updateLoraSelectionsSummary();">Clear All Loras</button>
                    <br>
                </div>

                <input name="user-session" id="user-session" value="<%=session.accountId%>" hidden>


                


                <style>
                    .canvas-container {
                        position: relative;
                        max-width: 100%; /* Adjust the max-width as per your layout */
                        margin: auto; /* Center align the container */
                        display: flex;
                        justify-content: center; /* Center horizontally */
                        align-items: center; /* Center vertically */
                    }

                    #maskCanvas, #displayCanvas {
                        max-width: 100%; /* This ensures that the canvas doesn't exceed the width of its container */
                        height: auto; /* Maintain the aspect ratio */
                        position: absolute; /* Position the canvases absolutely */
                        top: 0;
                        left: 0;
                        border: 1px solid black;
                    }

                    #maskCanvas {
                        z-index: 10; /* Ensures the maskCanvas is on top */
                    }

                    #displayCanvas {
                        z-index: 9; /* Below the maskCanvas */
                    }

                    .additionalSettings {
                        background-color: rgba(0, 0, 0, 0.2);
                        padding: 10px;
                        border-radius: 10px;
                        margin-top: 10px;
                        border: 2px solid rgb(255, 255, 255);
                    }
                </style>

            
                <details id="extrasDetails" class="left-align-no-flex" open>
                    <summary>Image2Image, Inpainting</summary>

                    <div class="form-control">
                        <label>
                            Enable Image2Image:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this checkbox to enable the Image2Image feature, which allows you to upload an image to be used by the AI Image Generator<br>
                                </div>
                        </label>
                        <input type="checkbox" id="img2imgCheckbox" name="img2imgCheckbox">
                    </div>
                    
                    <div class="form-control additionalSettings" id="img2imgControls" style="display: none;">
                        <label>
                            Upload Image:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    This is where you upload an image to be used by the AI Image Generator<br>
                                </div>
                        </label>
                        <input type="file" id="uploadedImage" name="uploadedImage" accept="image/*">
                        <br>
                        <label for="img2imgStrength">
                            img2img Strength:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this slider to adjust the strength of the Image2Image feature, the default is 70%<br>
                                    Higher values will make the image less like the original
                                </div>
                        </label>
                        <a><input type="range" id="img2imgStrength" name="img2imgStrength" min="0" max="100" step="1" value="70">
                        <span id="img2imgStrengthValue" class="range-value">70%</span></a>
                    </div>





                    <!-- inpainting checkbox -->
                    <div class="form-control">
                        <label>
                            Enable Inpainting:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this checkbox to enable the Inpainting feature, which allows you to upload an image to be used by the AI Image Generator<br>
                                    Inpainting lets you paint over an image to change the content that's painted over
                                </div>
                        </label>
                        <input type="checkbox" id="inpaintingCheckbox" name="inpaintingCheckbox">
                    </div>

                    

                    <div class="form-control additionalSettings" id="inpaintingControls" style="display: none;" >

                        <label for="inpaintingStrength">
                            Inpainting Strength:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this slider to adjust the strength of the Inpainting feature, the default is 70%<br>
                                    Higher values will make the inpainting less like the original, lower values will make it more like the original
                                </div>
                        </label>
                        <input type="range" id="inpaintingStrength" name="inpaintingStrength" min="0" max="100" step="1" value="70">
                        <span id="inpaintingStrengthValue" class="range-value">70%</span>

                        <label for="inpaintingImage">Upload Image:</label>
                        <input type="file" id="inpaintingImage" id="inpaintingImage" name="inpaintingImage" accept="image/*">

                        <!-- Pen Size Slider -->
                        <label for="penSize">
                            Pen Size (<span id="penSizeValue">20</span>)
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this slider to adjust the size of the pen used for inpainting, the default is 20<br>
                                    Higher values will make the pen larger, lower values will make it smaller
                                </div>
                        </label>
                        <input type="range" id="penSize" min="20" max="200" value="20">
                        
                        <!-- Eraser Checkbox -->
                        <label>
                            Eraser:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this checkbox to enable the eraser tool, which allows you to erase parts of the inpainting<br>
                                </div>
                        </label>
                        <input type="checkbox" id="eraserCheckbox">
                        <p>
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    <div>
                                        To paint on the canvas Touch and Drag on Mobile, or Click and Drag on Desktop<br>
                                        To erase parts of the inpainting, enable the eraser tool and paint over the parts you want to erase<br>
                                    </div>
                                </div>
                        </p>
                        <div class="canvas-container">
                            <canvas id="maskCanvas"></canvas>
                            <canvas id="displayCanvas"></canvas>
                        </div>
                        <script src="../scripts/ai-inpainting.js?v3" type="text/javascript" defer></script>

                        <script>
                            // get the penSize element
                            const penSize = document.getElementById('penSize');

                            // get the penSizeValue element
                            const penSizeValue = document.getElementById('penSizeValue');

                            // add an event listener for when the penSize changes
                            penSize.addEventListener('input', function() {
                                // update the penSizeValue
                                penSizeValue.innerText = this.value;
                            });
                            penSize.dispatchEvent(new Event('input'));
                        </script>

                    </div>

                    <div class="form-control advancedElement">
                        <label>
                            Enable Regional Prompt:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this checkbox to enable the Regional Prompt feature, which allows you to split the image into regions and give each region a different prompt<br>
                                    This can be useful for creating images with different characters or objects in different regions<br>
                                    Use `&lt;rp&gt;` to split the prompt into regions, like so: <br>
                                    score_9, score_8_up, score_7_up, 2d, 2girls, duo, looking at viewer, in cabin, sofa, sitting &lt;rp&gt; amy rose, denim jeans, dark red sweater &lt;rp&gt; rouge the bat, black pants, black shirt
                                </div>
                        </label>
                        <input type="checkbox" id="regionalPromptCheckbox" name="regionalPromptCheckbox">
                    </div>

                    <div id="regionalPromptControls" class="form-control additionalSettings" style="display: none">

                        <label for="regionalPromptAStrength">
                            Regional Prompt A Strength:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this slider to adjust the strength of Regional Prompt A<br>
                                    Higher values will make the prompt more powerful but might have issues blending in with the rest of the image.
                                </div>
                                <input class="inline-slider" type="range" id="regionalPromptAStrength" name="regionalPromptAStrength" min="15" max="35" step="1" value="25">
                                <span id="regionalPromptAStrengthValue" class="range-value">25%</span>
                        </label>

                        <br>

                        <label for="regionalPromptBStrength">
                            Regional Prompt B Strength:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this slider to adjust the strength of Regional Prompt B<br>
                                    Higher values will make the prompt more powerful but might have issues blending in with the rest of the image.
                                </div>
                                <input class="inline-slider" type="range" id="regionalPromptBStrength" name="regionalPromptBStrength" min="15" max="35" step="1" value="25">
                                <span id="regionalPromptBStrengthValue" class="range-value">25%</span>
                        </label>

                        <br>

                        <label for="regionalPromptSplitPosition">   
                            Regional Prompt Split Position:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this slider to adjust the position of the split between the regions, the default is 50%<br>
                                    Higher values will move the split to the right, lower values will move it to the left
                                </div>
                                <input class="inline-slider" type="range" id="regionalPromptSplitPosition" name="regionalPromptSplitPosition" min="35" max="65" step="1" value="50">
                                <span id="regionalPromptSplitPositionValue" class="range-value">50%</span>
                        </label>
                        <br><br>

                        <!-- splitting logic and preview with a canvas showing the A/B/C etc with the aspectratio being used for the template: -->
                        
                        <div id="regionalPromptDisplay"></div>
                        
                        <script>
                        
                            function updateRegionalDisplay() {
                                // clear the regionalPromptDisplay
                                document.getElementById('regionalPromptDisplay').innerHTML = '';
                                document.getElementById('regionalPromptDisplayText').innerHTML = '';

                                if (!document.getElementById('regionalPromptCheckbox').checked) {
                                    document.getElementById('regionalPromptControls').style.display = 'none';
                                    return
                                }

                                canvas = document.createElement('canvas');

                                aspectRatio = document.getElementById('aspectRatio').value;
                                model = document.getElementById('model').value;

                                splitValue = document.getElementById('regionalPromptSplitPosition').value;

                                regionalPromptAStrength = document.getElementById('regionalPromptAStrength').value;
                                regionalPromptBStrength = document.getElementById('regionalPromptBStrength').value;

                                dimensions = {width:0,height:0}
                                if (model.startsWith('pdxl') || model.startsWith('flux') || model.startsWith('illustrious')) {
                                    switch(aspectRatio) {
                                        case 'square':
                                            dimensions = {width: 768, height: 768}
                                            break;
                                        case 'portrait':
                                            dimensions = {width: 768, height: 1024}
                                            break;
                                        case 'landscape':
                                            dimensions = {width: 1024, height: 768}
                                            break;
                                        case '16:9':
                                            dimensions = {width: 1024, height: 576}
                                            break;
                                        case '9:16':
                                            dimensions = {width: 576, height: 1024}
                                            break;
                                        case '21:9':
                                            dimensions = {width: 1344, height: 576}
                                            break;
                                        case '9:21':
                                            dimensions = {width: 576, height: 1344}
                                            break;
                                    }
                                } else {
                                    switch(aspectRatio) {
                                        case 'square':
                                            dimensions = {width: 512, height: 512}
                                            break;
                                        case 'portrait':
                                            dimensions = {width: 512, height: 768}
                                            break;
                                        case 'landscape':
                                            dimensions = {width: 768, height: 512}
                                            break;
                                        case '16:9':
                                            dimensions = {width: 768, height: 432}
                                            break;
                                        case '9:16':
                                            dimensions = {width: 432, height: 768}
                                            break;
                                        case '21:9':
                                            dimensions = {width: 1024, height: 432}
                                            break;
                                        case '9:21':
                                            dimensions = {width: 432, height: 1024}
                                            break;
                                    }
                                }

                                canvas.width = dimensions.width / 2;
                                canvas.height = dimensions.height /2

                                ctx = canvas.getContext('2d');

                                ctx.fillStyle = 'black';
                                ctx.fillRect(0, 0, canvas.width, canvas.height);

                                // Split the canvas into two regions with different colors
                                ctx.fillStyle = 'red';
                                ctx.fillRect(0, 0, canvas.width * (splitValue / 100), canvas.height);
                                ctx.fillStyle = 'blue';
                                ctx.fillRect(canvas.width * (splitValue / 100), 0, canvas.width, canvas.height);

                                // Set text properties
                                ctx.fillStyle = 'white';
                                ctx.font = '48px Arial';
                                ctx.textAlign = 'center';
                                ctx.textBaseline = 'middle';

                                // Calculate center positions for 'A' and 'B'
                                const centerA = (canvas.width * (splitValue / 100)) / 2;
                                const centerB = canvas.width * (splitValue / 100) + (canvas.width * (1 - splitValue / 100)) / 2;

                                // Draw letters in the centers of each region
                                ctx.fillText('A', centerA, canvas.height / 2);
                                ctx.fillText('B', centerB, canvas.height / 2);

                                // add text beneath the prompt id for the different splits

                                

                                promptText = document.getElementById('prompt').value;
                                // promptSplits = promptText.split('<rp>');

                                // needs to work with capitals and/or lowercase <rp> / <RP>:
                                promptSplits = promptText.split(/<rp>/i);

                                // remove the first element:
                                promptSplits.shift();

                                // add the promptSplits to the regionalPromptDisplayText with the appropriate color:
                                // its just 2 so DONT do a loop:\
                                newDiv = document.createElement('div');

                                // add the text to the newDiv
                                split1 = "<p style='color: rgb(255, 100, 100)'>A: " + promptSplits[0] + "</p>";
                                split2 = "<p style='color: rgb(100, 100, 255)'>B: " + promptSplits[1] + "</p>";

                                newDiv.innerHTML = split1 + split2;



                                // Append newDiv to the 'regionalPromptDisplay' div
                                document.getElementById('regionalPromptDisplay').appendChild(newDiv);
                                document.getElementById('regionalPromptDisplayText').appendChild(newDiv);

                                // Append the canvas to 'regionalPromptDisplay'
                                document.getElementById('regionalPromptDisplay').appendChild(canvas);
                            

                            }

                            document.getElementById('regionalPromptCheckbox').addEventListener('change', function() {
                                updateRegionalDisplay();
                            });

                            document.getElementById('regionalPromptSplitPosition').addEventListener('input', function() {
                                document.getElementById('regionalPromptSplitPositionValue').innerText = this.value + '%';
                                updateRegionalDisplay();
                            });

                            document.getElementById('regionalPromptAStrength').addEventListener('input', function() {
                                document.getElementById('regionalPromptAStrengthValue').innerText = this.value + '%';
                            });

                            document.getElementById('regionalPromptBStrength').addEventListener('input', function() {
                                document.getElementById('regionalPromptBStrengthValue').innerText = this.value + '%';
                            });



                            document.getElementById('prompt').addEventListener('change', function() {
                                updateRegionalDisplay();
                            });
                            document.getElementById('prompt').addEventListener('input', function() {
                                updateRegionalDisplay();
                            });

                            


                            document.getElementById('regionalPromptSplitPosition').dispatchEvent(new Event('input'));

                            document.getElementById('aspectRatio').addEventListener('change', function() {
                                updateRegionalDisplay();
                            });

                            document.getElementById('model').addEventListener('change', function() {
                                updateRegionalDisplay();
                            });
                            
                            

                        </script>
                            
                    </div>

                </details>


            <!-- <script> to make inpaintingCheckbox and img2imgCheckbox exclusive: -->
            <script>
                // get the inpaintingCheckbox and img2imgCheckbox elements
                const inpaintingCheckbox = document.getElementById('inpaintingCheckbox');
                const img2imgCheckbox = document.getElementById('img2imgCheckbox');
                const regionalPromptCheckbox = document.getElementById('regionalPromptCheckbox');

                // get the inpaintingControls and img2imgControls elements
                const inpaintingControls = document.getElementById('inpaintingControls');
                const img2imgControls = document.getElementById('img2imgControls');
                const regionalPromptControls = document.getElementById('regionalPromptControls');
        
                function disableCheckboxes(target) {
                    
                    extrasDetails = document.getElementById('extrasDetails');
                    extrasDetails.open = true;

                    switch(target) {
                        case "inpaintingCheckbox":
                            inpaintingCheckbox.checked = true;
                            inpaintingControls.style.display = 'block';

                            img2imgCheckbox.checked = false;
                            img2imgControls.style.display = 'none';
                            regionalPromptCheckbox.checked = false;
                            regionalPromptControls.style.display = 'none';

                            break;
                        case "img2imgCheckbox":
                            img2imgCheckbox.checked = true;
                            img2imgControls.style.display = 'block';

                            inpaintingCheckbox.checked = false;
                            inpaintingControls.style.display = 'none';
                            regionalPromptCheckbox.checked = false;
                            regionalPromptControls.style.display = 'none';
                            break;
                        case "regionalPromptCheckbox":

                            regionalPromptCheckbox.checked = true;
                            regionalPromptControls.style.display = 'block';

                            inpaintingCheckbox.checked = false;
                            inpaintingControls.style.display = 'none';
                            img2imgCheckbox.checked = false;
                            img2imgControls.style.display = 'none';
                            break;
                        
                    }
                }

                inpaintingCheckbox.addEventListener('change', function() {
                    if (this.checked) {
                        disableCheckboxes("inpaintingCheckbox")
                    }
                });

                img2imgCheckbox.addEventListener('change', function() {
                    if (this.checked) {
                        disableCheckboxes("img2imgCheckbox")
                    }
                });

                regionalPromptCheckbox.addEventListener('change', function() {
                    if (this.checked) {
                        disableCheckboxes("regionalPromptCheckbox")
                    }
                });

            </script>
        
        </div>

        <div class="flex-under-div" style="margin: 20px;">

            <style>
                /* remove the up down arrows */
                .sliderInputBox {
                    width: 70px;
                    height: auto;
                    padding: 5px;
                    margin: 0;
                    border: none;
                    border-radius: 4px;
                    text-align: center;
                }
                .sliderInputBox:focus {
                    outline: none;

                }
            </style>

                <details open class="advancedElement">
                    <summary>Settings (CFG)</summary>
                    <label style="display: none;" for="steps">
                        Steps:
                        <span class="tooltip" onclick="showTooltip(this)">❓</span>
                            <div class="tooltiptext">
                                Use this slider to adjust the number of steps the AI will take to generate the image<br>
                                Higher values will make the image more detailed, but will take longer to generate
                            </div>
                    </label>
                    <div style="display: none;" class="form-control inline-slider">
                        <input form="generatorForm" type="range" id="steps" name="steps" min="5" max="75" step="1" value="20">
                        <!-- <span id="stepsValue" class="range-value">15</span> -->
                        <input form="generatorForm" type="number" class="sliderInputBox" id="stepsInput" name="stepsInput" value="15"><a id="stepsMax"></a>
                    </div>

                    <label for="cfguidance">
                        CFG:
                        <span class="tooltip" onclick="showTooltip(this)">❓</span>
                            <div class="tooltiptext">
                                Use this slider to adjust the CFG guidance value<br>
                                Here are the recommended values for the different model architectures:<br>
                                SD 1.5: 4-8<br>
                                PDXL: 3-5<br>
                                FLUX: 1<br>
                            </div>
                    </label>
                    <div class="form-control inline-slider" style="background-color: rgba(0, 0, 0, 0.25); border-radius: 10px; padding: 5px;">
                        <style>
                            /* Reset and override any global styles for this specific slider */
                            #cfguidance {
                                -webkit-appearance: none;
                                appearance: none;
                                height: 6px;
                                width: 100%;
                                background: #2d2d2d;
                                border-radius: 5px;
                                outline: none;
                                margin: 10px 0;
                                padding: 0;
                                position: relative;
                            }
                            
                            /* Middle gradient line */
                            #cfguidance:before {
                                content: '';
                                position: absolute;
                                left: 0;
                                top: 50%;
                                right: 0;
                                height: 2px;
                                background: linear-gradient(to right, #6a11cb, #c259ff);
                                transform: translateY(-50%);
                                border-radius: 5px;
                                z-index: 0;
                                pointer-events: none;
                            }
                            
                            /* CFG slider styling to match lora strength slider */
                            #cfguidance {
                                background: var(--highlight-colour);
                                border-radius: 4px;
                                outline: none;
                                -webkit-appearance: none;
                                height: 6px;
                                cursor: pointer;
                                accent-color: var(--highlight-colour-hover);
                            }
                            
                            /* Override webkit track styling */
                            #cfguidance::-webkit-slider-runnable-track {
                                background: var(--highlight-colour) !important;
                                height: 6px !important;
                                border-radius: 4px !important;
                                border: none !important;
                            }
                            
                            /* Override moz track styling */
                            #cfguidance::-moz-range-track {
                                background: var(--highlight-colour) !important;
                                height: 6px !important;
                                border-radius: 4px !important;
                                border: none !important;
                            }
                            
                            /* Override webkit thumb styling */
                            #cfguidance::-webkit-slider-thumb {
                                -webkit-appearance: none !important;
                                appearance: none !important;
                                background: var(--highlight-colour-hover) !important;
                                border: none !important;
                                border-radius: 50% !important;
                                cursor: pointer !important;
                            }
                            
                            /* Override moz thumb styling */
                            #cfguidance::-moz-range-thumb {
                                background: var(--highlight-colour-hover) !important;
                                border: none !important;
                                border-radius: 50% !important;
                                cursor: pointer !important;
                            }
                            
                            /* Tick marks */
                            .tick-marks {
                                display: flex;
                                justify-content: space-between;
                                margin-top: -2px;
                                padding: 0 10px;
                                position: relative;
                                z-index: 1;
                            }
                            
                            .tick {
                                width: 1px;
                                height: 5px;
                                background-color: var(--text-colour);
                                opacity: 0.5;
                            }
                        </style>
                        <input form="generatorForm" type="range" id="cfguidance" name="cfguidance" min="1" max="24" step="0.5" value="6">
                        <div class="tick-marks">
                            <div class="tick"></div>
                            <div class="tick"></div>
                            <div class="tick"></div>
                            <div class="tick"></div>
                            <div class="tick"></div>
                        </div>
                        <input form="generatorForm" type="number" class="sliderInputBox" id="cfguidanceInput" name="cfguidanceInput" value="6"><a id="cfguidanceMax"></a>
                    </div>
    
                    <div class="form-control">
                        <label for="seed">
                            Seed: (-1 = random)
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this input to set the seed for the AI, -1 is random<br>
                                    The seed is used to generate the image, so the same seed will always generate the same image aslong as the other settings are the same
                                </div>
                        </label>
                        
                        <input form="generatorForm" type="number" id="seed" name="seed" min="-1999999999999" max="18446744073709551615" value="-1">
    
                    </div>

                    <div class="form-control">
                        <label for="scheduler">
                            Scheduler:
                            <span class="tooltip" onclick="showTooltip(this)">❓</span>
                                <div class="tooltiptext">
                                    Use this dropdown to select the scheduler to use for the AI<br>
                                    The scheduler is used to determine how the AI will generate the image, each scheduler has different strengths and weaknesses<br>
                                    The default scheduler is the Euler Ancestral scheduler, is good at low steps, dimminishing returns at higher steps<br>
                                    The Dppm_2m scheduler is good at high steps, but can be slower<br>
                                    The DDIM scheduler is weird, but was suggested by a few users
                                </div>
                        </label>
                        <select name="scheduler" id="scheduler">
                            <option value="eulera">Euler Ancestral</option>
                            <option value="dpm">Dppm_2m</option>
                            <option value="ddim">DDIM</option>
                        </select>
                    </div>
                    
                </details>


            <script>
                // Function to update the steps, and cfguidance labels based on the current slider values
                function updateLabels() {
                    let steps = document.getElementById('steps');
                    let stepsInput = document.getElementById('stepsInput');
                    let cfguidance = document.getElementById('cfguidance');
                    let cfguidanceInput = document.getElementById('cfguidanceInput');
                    let model = document.getElementById('model');
            
                    function setSteps(min, max) {
                        steps.min = min;
                        steps.max = max;
                        stepsInput.min = min;
                        stepsInput.max = max;
                    }
            
                    function setCfguidance(min, max) {
                        cfguidance.min = min;
                        cfguidance.max = max;
                        cfguidanceInput.min = min;
                        cfguidanceInput.max = max;
                    }
                        
                    if (model.value.includes('pdxl')) {
                        setCfguidance(2, 5)
                    } else if (model.value.startsWith('illustrious-')) {
                        setCfguidance(2, 5);
                    } else if (model.value.includes('flux')) {
                        setCfguidance(1, 1);
                    } else if (!model.value.includes('pdxl') && !model.value.includes('flux') && !model.value.includes('illustrious')) {
                        setCfguidance(3, 10);
                    }
                        
                    document.getElementById('stepsMax').innerText = `/${steps.max}`;
                    document.getElementById('cfguidanceMax').innerText = `/${cfguidance.max}`;
            
                }

                document.getElementById('steps').addEventListener('input', function() {
                    document.getElementById('stepsInput').value = this.value;
                });

                document.getElementById('stepsInput').addEventListener('input', function() {
                    document.getElementById('steps').value = this.value;
                });

                document.getElementById('cfguidance').addEventListener('input', function() {
                    document.getElementById('cfguidanceInput').value = this.value;
                });

                document.getElementById('cfguidanceInput').addEventListener('input', function() {
                    document.getElementById('cfguidance').value = this.value;
                });

                // Update the labels on document load
                document.addEventListener('DOMContentLoaded', function() {
                    updateLabels();
                });

                // Update the labels when the model changes
                document.getElementById('model').addEventListener('change', function() {
                    updateLabels();
                });

            </script>
                
            <div class="form-control">

                <label for="creditsShop">
                    Credits Shop:
                    <span class="tooltip" onclick="showTooltip(this)">❓</span>
                        <div class="tooltiptext">
                            Use the credits shop to purchase additional temporary features for the AI Image Generator<br>
                            You can remove the watermark, upscale the image, and apply the fast queue for your generation<br><br>
                            You can earn credits for free by participating in the community, posting on the booru, liking booru posts, posting suggestions, and more!
                        </div>
                </label>
                
                <!-- Credits Shop with ETA-style design -->
                <div class="credits-shop-container" id="creditsShop">
                    <% if (session.loggedIn) { %>
                        <div class="credits-shop-header">
                            <div class="credits-total-cost">
                                💳 Total Cost: <span class="credits-price-highlight" id="currentCreditsPrice">0</span> Credits
                            </div>
                        </div>
                    <% } else { %>
                        <div class="credits-shop-header">
                            <div class="credits-total-cost">
                                💳 Total Cost: <span class="credits-price-highlight" id="currentCreditsPrice">0</span> Credits
                                <span class="login-required">(Login Required)</span>
                            </div>
                        </div>
                    <% } %>

                    <div class="credits-shop-content">
                        <!-- Remove Watermark -->
                        <div class="credit-option<% if (!session.loggedIn) { %> disabled<% } %>" data-checkbox="removeWatermarkCheckbox">
                            <input type="checkbox" id="removeWatermarkCheckbox" class="credit-checkbox"<% if (!session.loggedIn) { %> disabled<% } %>>
                            <span class="credit-option-title">🏷️ Remove Watermark</span>
                            <span class="credit-option-price"><span class="credits-price-highlight" id="removeWatermarkCreditsPrice">25</span> Credits</span>
                        </div>

                        <!-- Upscale Image -->
                        <div class="credit-option<% if (!session.loggedIn) { %> disabled<% } %>" data-checkbox="upscaleCheckbox">
                            <input type="checkbox" id="upscaleCheckbox" class="credit-checkbox"<% if (!session.loggedIn) { %> disabled<% } %>>
                            <span class="credit-option-title">📈 Upscale Image</span>
                            <span class="credit-option-price"><span class="credits-price-highlight" id="upscaleCreditsPrice">25</span> Credits</span>
                        </div>

                        <!-- Double Images -->
                        <div class="credit-option<% if (!session.loggedIn) { %> disabled<% } %>" data-checkbox="doubleImagesCheckbox">
                            <input type="checkbox" id="doubleImagesCheckbox" class="credit-checkbox"<% if (!session.loggedIn) { %> disabled<% } %>>
                            <span class="credit-option-title">🖼️ 2× Images</span>
                            <span class="credit-option-price"><span class="credits-price-highlight" id="doubleImagesCreditsPrice">25</span> Credits</span>
                        </div>

                        <!-- Remove Background -->
                        <div class="credit-option<% if (!session.loggedIn) { %> disabled<% } %>" data-checkbox="removeBackgroundCheckbox">
                            <input type="checkbox" id="removeBackgroundCheckbox" class="credit-checkbox"<% if (!session.loggedIn) { %> disabled<% } %>>
                            <span class="credit-option-title">🎭 Remove Background</span>
                            <span class="credit-option-price"><span class="credits-price-highlight" id="removeBackgroundCreditsPrice">25</span> Credits</span>
                        </div>

                        <!-- Fast Queue  -->
                        <% if (session.loggedIn) { %>
                        <div class="credit-option fast-queue-option" id="fastqueueCard">
                            <span class="credit-option-title">⚡ Fast Queue</span>
                            <span class="credit-option-price"><span class="credits-price-highlight" id="fastqueueCreditsPrice">25</span> Credits</span>
                            <button class="fastqueue-toggle-button" id="fastqueueButton" type="button"><span class="toggle-text">Enable</span></button>
                        </div>
                        <% } else { %>
                        <div class="credit-option fast-queue-option disabled">
                            <span class="credit-option-title">⚡ Fast Queue</span>
                            <span class="credit-option-price"><span class="credits-price-highlight" id="fastqueueCreditsPrice">25</span> Credits</span>
                            <button class="fastqueue-toggle-button disabled" disabled>Login Required</button>
                        </div>
                        <% } %>
                    </div>
                </div>

                <% if (!session.loggedIn) { %>
                <script>
                    // disable the checkboxes when the user is logged out:
                    document.querySelectorAll('.credit-checkbox').forEach(checkbox => {
                        checkbox.disabled = true;
                    });
                </script>
                <% } %>

                <style>
                    /* Credits Shop Container - matching ETA display style */
                    .credits-shop-container {
                        background: var(--darker-background-colour);
                        padding: 15px;
                        border-radius: 10px;
                        border: 1px solid var(--border-colour);
                        margin: 10px 0;
                        color: var(--text-colour);
                    }
                    
                    /* Light mode specific adjustments for credits shop */
                    body:not(.dark-mode) .credits-shop-container {
                        background: rgba(0, 0, 0, 0.1);
                        border: 2px solid var(--light-highlight-colour);
                        color: var(--light-text-colour);
                    }

                    .credits-shop-header {
                        text-align: center;
                        margin-bottom: 15px;
                        padding-bottom: 10px;
                        border-bottom: 1px solid var(--border-colour);
                    }
                    
                    body:not(.dark-mode) .credits-shop-header {
                        border-bottom: 1px solid var(--light-highlight-colour);
                    }

                    .credits-total-cost {
                        color: #ffd700;
                        font-weight: bold;
                        font-size: 16px;
                    }

                    .credits-price-highlight {
                        color: #00ff88;
                        font-weight: bold;
                        text-shadow: 0 0 5px rgba(0, 255, 136, 0.3);
                    }

                    .login-required {
                        color: #ff8844;
                        font-size: 14px;
                        font-weight: normal;
                    }

                    .credits-shop-content {
                        display: flex;
                        flex-direction: column;
                        gap: 10px;
                    }

                    .credit-option {
                        background: rgba(255, 255, 255, 0.05);
                        padding: 12px;
                        border-radius: 8px;
                        border-left: 3px solid #60a5fa;
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        transition: all 0.3s ease;
                    }

                    .credit-option:hover {
                        background: rgba(255, 255, 255, 0.08);
                        transform: translateY(-1px);
                    }

                    .credit-option.fast-queue-option {
                        border-left-color: #fbbf24;
                    }

                    .credit-option.disabled {
                        opacity: 0.6;
                        border-left-color: #64748b;
                    }

                    .credit-option-info {
                        display: flex;
                        flex-direction: column;
                        gap: 4px;
                    }

                    .credit-option-title {
                        color: var(--text-colour);
                        font-weight: 500;
                        font-size: 14px;
                    }

                    .credit-option-price {
                        font-size: 12px;
                        color: var(--text-colour);
                        opacity: 0.7;
                    }
                    
                    body:not(.dark-mode) .credit-option-title {
                        color: var(--light-text-colour);
                    }
                    
                    body:not(.dark-mode) .credit-option-price {
                        color: var(--light-text-colour);
                        opacity: 0.7;
                    }

                    .credit-option-controls {
                        display: flex;
                        align-items: center;
                        gap: 8px;
                    }

                    .credit-checkbox {
                        width: 18px;
                        height: 18px;
                        cursor: pointer;
                        accent-color: #00ff88;
                    }

                    .credit-checkbox:disabled {
                        opacity: 0.5;
                        cursor: not-allowed;
                    }

                    .fastqueue-toggle-button {
                        background: linear-gradient(135deg, #fbbf24, #f59e0b);
                        color: white;
                        border: none;
                        padding: 6px 12px;
                        border-radius: 6px;
                        font-size: 12px;
                        font-weight: bold;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
                    }

                    .fastqueue-toggle-button:hover {
                        transform: translateY(-1px);
                        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
                    }

                    .fastqueue-toggle-button.active {
                        background: linear-gradient(135deg, #10b981, #059669);
                        box-shadow: 0 0 10px rgba(16, 185, 129, 0.4);
                    }

                    .fastqueue-toggle-button.disabled {
                        background: #64748b;
                        cursor: not-allowed;
                        transform: none;
                    }

                    .fastqueue-toggle-button.disabled:hover {
                        transform: none;
                        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
                    }

                    /* Responsive design */
                    @media (max-width: 1080px) {
                        .credit-option {
                            flex-direction: column;
                            align-items: flex-start;
                            gap: 8px;
                        }

                        .credit-option-controls {
                            align-self: flex-end;
                        }
                    }

                    /* Legacy compatibility - keep old classes but hide them */
                    .costPElement,
                    .creditsPriceStyling {
                        display: none;
                    }
                </style>

                <style>
                    /* Grid layout for options */
                    .credits-shop-content{
                        display:grid;
                        grid-template-columns:repeat(auto-fit,minmax(170px,1fr));
                        gap:12px;
                    }

                    .credit-option{
                        position:relative;
                        background:rgba(255,255,255,0.05);
                        padding:16px 10px 14px;
                        border-radius:10px;
                        border:2px solid transparent;
                        cursor:pointer;
                        display:flex;
                        flex-direction:column;
                        align-items:flex-start;
                        gap:6px;
                        transition:all .25s ease;
                    }
                    .credit-option:hover{background:rgba(255,255,255,0.08);transform:translateY(-2px);}
                    .credit-option.selected{border-color:#00ff88;box-shadow:0 0 8px rgba(0,255,136,.4);}
                    .credit-option.fast-queue-option{border-left:3px solid #fbbf24;}
                    .credit-option.disabled{opacity:.5;cursor:not-allowed;}

                    /* Hide actual checkboxes */
                    .credit-checkbox{display:none;}

                    /* Tooltip always on top */
                    .tooltiptext{z-index:99999;}
                    
                    /* FORCE HIDE ALL CHECKBOXES IN CREDIT OPTIONS */
                    .credit-checkbox,
                    .credit-option input[type="checkbox"],
                    input[type="checkbox"].credit-checkbox,
                    #removeWatermarkCheckbox,
                    #upscaleCheckbox, 
                    #doubleImagesCheckbox,
                    #removeBackgroundCheckbox {
                        display: none !important;
                        visibility: hidden !important;
                        position: absolute !important;
                        left: -9999px !important;
                        top: -9999px !important;
                        opacity: 0 !important;
                        width: 0 !important;
                        height: 0 !important;
                        margin: 0 !important;
                        padding: 0 !important;
                        border: none !important;
                        outline: none !important;
                        pointer-events: none !important;
                        z-index: -9999 !important;
                        clip: rect(0 0 0 0) !important;
                        overflow: hidden !important;
                        max-width: 0 !important;
                        max-height: 0 !important;
                    }
                </style>

                <script>
                    // Toggle card selection & hidden checkbox
                    document.querySelectorAll('.credit-option').forEach(card=>{
                        if(card.classList.contains('disabled')) return;
                        card.addEventListener('click',e=>{
                            // Ignore when clicking on internal button / checkbox or tooltip
                            if(e.target.closest('button')||e.target.classList.contains('tooltip')) return;
                            const checkboxId=card.dataset.checkbox;
                            if(!checkboxId) return;
                            const cb=document.getElementById(checkboxId);
                            cb.checked=!cb.checked;
                            card.classList.toggle('selected',cb.checked);
                            prepareData();
                        });
                        // Sync initial state
                        const cb=document.getElementById(card.dataset.checkbox);
                        if(cb && cb.checked){card.classList.add('selected');}
                    });

                    // Keep fastqueue button card highlight in sync
                    const fastqueueCardOld=document.getElementById('fastqueueCard');
                    if(fastqueueCardOld){
                        document.getElementById('fastqueueButton').addEventListener('click',()=>{
                            fastqueueCardOld.classList.toggle('selected',document.getElementById('fastqueueButton').classList.contains('active'));
                            prepareData();
                        });
                    }
                </script>

                <style>
                    /* have it be centered, text-align doesnt work */
                    .suggestFL {
                        text-align: center;
                    }

                    .suggestFL a {
                        font-size: 24px;
                        color: rgb(255, 255, 255);
                        margin-left: auto;
                        margin-right: auto;
                        /* bold: */
                        font-weight: bold;
                    }

                    /* add glow around the text: */
                    .suggestFL a {
                        text-shadow: 0 0 20px rgb(151, 236, 255);
                    }
                </style>

                <div class="suggestFL">
                    
                </div>

                <div id="imageHistoryCount"></div>

                <script>
                    let imageHistoryCount = '<%=imageHistoryCount%>';
                    
                    window.onload = function() {
                        // document.getElementById('imageHistoryCount').innerText = `You have generated ${imageHistoryCount}/15000 images!`;
                    }
                    
                </script>

                <div id="additionalInfo"></div><br>
                <div id="response"></div>
                <div id="queuePosition" style="display: none;">
                    <span style="color: gold;" id="positionNumber"></span>
                    <span class="tooltip" onclick="showTooltip(this)">❓</span>
                        <div class="tooltiptext">
                            Shows the ETA for your image to be generated, you will be notified by a sound when your image is ready<br>
                            The ETA is based on the average time it takes to generate an image with the current settings
                        </div>
                </div>

                <span id="bothQueueETA"></span>

                <label>
                    Generate Image:
                    <span class="tooltip" onclick="showTooltip(this)">❓</span>
                        <div class="tooltiptext">
                            Use this button to generate the image using the AI Image Generator<br>
                            The image will be generated based on the settings you have selected
                        </div>
                </label>
                <button form="generatorForm" type="submit" id="generateButton">Generate Image</button>
                <button style="display: none;" id="cancelButton">Cancel Request</button>

            </div>

            <style>
                /* General styling for the advertisement container */
                .booruAdvert {
                    text-align: center;
                    margin: 20px;
                    text-shadow: 0 0 20px rgb(151, 236, 255);
                    animation: bounceIn 1s ease-out;
                }

                /* Styling for the button */
                .booruButton {
                    padding: 15px 30px;
                    font-size: 18px;
                    font-weight: bold;
                    color: white;
                    background: linear-gradient(45deg, rgb(0, 191, 255), rgb(0, 123, 255));
                    border: none;
                    border-radius: 10px;
                    cursor: pointer;
                    box-shadow: 0 0 15px rgba(0, 191, 255, 0.6);
                    transition: transform 0.3s ease, box-shadow 0.3s ease, scale 0.3s ease;
                }

                /* Glow effect on hover */
                .booruButton:hover {
                    transform: scale(1.1);
                    box-shadow: 0 0 30px rgba(0, 191, 255, 0.9);
                }

                /* Bounce-in animation */
                @keyframes bounceIn {
                    0% {
                        transform: scale(0.8);
                        opacity: 0;
                    }
                    50% {
                        transform: scale(1.2);
                        opacity: 1;
                    }
                    100% {
                        transform: scale(1);
                    }
                }
            </style>

            <style>
                /* Enhanced Booru Upload Popup Styles */
                .booruPopupContent {
                    position: fixed;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    background: linear-gradient(135deg, var(--background-colour), var(--darker-background-colour));
                    padding: 0;
                    border-radius: 15px;
                    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
                    z-index: 2000;
                    max-width: 600px;
                    width: 85%;
                    max-height: 85vh;
                    overflow-y: auto;
                    display: none;
                    color: var(--text-colour);
                    border: 2px solid var(--border-colour);
                    font-family: 'Roboto', sans-serif;
                }

                .booru-upload-header {
                    background: linear-gradient(135deg, #006de2, #0084ff);
                    padding: 25px;
                    border-radius: 13px 13px 0 0;
                    text-align: center;
                    border-bottom: 2px solid var(--border-colour);
                }

                .booru-upload-header h1 {
                    margin: 0;
                    font-size: 2rem;
                    font-weight: 700;
                    color: white;
                    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
                }

                .booru-upload-header i {
                    margin-right: 10px;
                    font-size: 1.8rem;
                }

                .booru-subtitle {
                    margin: 8px 0 0 0;
                    font-size: 1.1rem;
                    color: rgba(255, 255, 255, 0.9);
                    font-weight: 300;
                }

                .booru-rules-container {
                    padding: 30px;
                }

                .booru-rules-header {
                    text-align: center;
                    margin-bottom: 30px;
                    padding-bottom: 20px;
                    border-bottom: 2px solid var(--border-colour);
                }

                .booru-rules-header h2 {
                    margin: 0 0 10px 0;
                    font-size: 1.5rem;
                    font-weight: 600;
                    color: var(--text-colour);
                }

                .booru-rules-header p {
                    margin: 0;
                    font-size: 1rem;
                    color: rgba(255, 255, 255, 0.8);
                }

                .booru-rules-sections {
                    display: grid;
                    gap: 20px;
                    margin-bottom: 30px;
                }

                .rule-section {
                    background: rgba(255, 255, 255, 0.05);
                    border-radius: 10px;
                    padding: 20px;
                    border-left: 4px solid;
                    transition: transform 0.2s ease, box-shadow 0.2s ease;
                }

                .rule-section:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
                }

                .rule-section.critical {
                    border-left-color: #ff4757;
                    background: rgba(255, 71, 87, 0.1);
                }

                .rule-section.warning {
                    border-left-color: #ffa502;
                    background: rgba(255, 165, 2, 0.1);
                }

                .rule-section.info {
                    border-left-color: #3742fa;
                    background: rgba(55, 66, 250, 0.1);
                }

                .rule-section.success {
                    border-left-color: #2ed573;
                    background: rgba(46, 213, 115, 0.1);
                }

                .rule-section h3 {
                    margin: 0 0 15px 0;
                    font-size: 1.2rem;
                    font-weight: 600;
                    display: flex;
                    align-items: center;
                    gap: 10px;
                }

                .rule-section.critical h3 {
                    color: #ff6b7a;
                }

                .rule-section.warning h3 {
                    color: #ffb142;
                }

                .rule-section.info h3 {
                    color: #5c7cfa;
                }

                .rule-section.success h3 {
                    color: #51cf66;
                }

                .rule-section ul {
                    margin: 0;
                    padding-left: 20px;
                    list-style: none;
                }

                .rule-section li {
                    margin: 12px 0;
                    padding-left: 20px;
                    position: relative;
                    line-height: 1.5;
                    font-size: 0.95rem;
                }

                .rule-section li::before {
                    content: "•";
                    position: absolute;
                    left: 0;
                    top: 0;
                    font-weight: bold;
                    font-size: 1.2rem;
                }

                .rule-section.critical li::before {
                    color: #ff6b7a;
                }

                .rule-section.warning li::before {
                    color: #ffb142;
                }

                .rule-section.info li::before {
                    color: #5c7cfa;
                }

                .rule-section.success li::before {
                    color: #51cf66;
                }

                .rule-section strong {
                    font-weight: 600;
                    color: var(--text-colour);
                }

                /* Details element styling for booru popup */
                .booruPopupContent details {
                    margin: 15px 0 !important;
                    padding: 0 !important;
                    display: block !important;
                    visibility: visible !important;
                    opacity: 1 !important;
                    background: rgba(0, 0, 0, 0.05) !important;
                    border-radius: 8px !important;
                    border: 1px solid rgba(0, 0, 0, 0.1) !important;
                }

                .booruPopupContent details summary {
                    padding: 12px 15px !important;
                    font-weight: 600 !important;
                    color: var(--primary-colour) !important;
                    cursor: pointer !important;
                    display: flex !important;
                    align-items: center !important;
                    gap: 8px !important;
                    border-radius: 8px !important;
                    transition: all 0.2s ease !important;
                }

                .booruPopupContent details summary:hover {
                    background: rgba(0, 0, 0, 0.05) !important;
                    color: var(--primary-colour-light) !important;
                }

                .booruPopupContent details[open] summary {
                    border-bottom: 1px solid rgba(0, 0, 0, 0.1) !important;
                    border-radius: 8px 8px 0 0 !important;
                }

                .booruPopupContent details ul {
                    margin: 0 !important;
                    padding: 15px 20px !important;
                    background: rgba(0, 0, 0, 0.02) !important;
                    border-radius: 0 0 8px 8px !important;
                    list-style: none !important;
                }

                .booruPopupContent details li {
                    margin: 8px 0 !important;
                    padding-left: 20px !important;
                    position: relative !important;
                    font-size: 0.9rem !important;
                    line-height: 1.4 !important;
                }

                .booruPopupContent details li::before {
                    content: "•" !important;
                    position: absolute !important;
                    left: 0 !important;
                    color: var(--primary-colour) !important;
                    font-weight: bold !important;
                }

                .booru-consequences {
                    background: rgba(255, 71, 87, 0.15);
                    border: 1px solid rgba(255, 71, 87, 0.3);
                    border-radius: 10px;
                    padding: 20px;
                    margin-bottom: 20px;
                }

                .booru-consequences h3 {
                    margin: 0 0 10px 0;
                    font-size: 1.1rem;
                    color: #ff6b7a;
                    display: flex;
                    align-items: center;
                    gap: 8px;
                }

                .booru-consequences p {
                    margin: 0;
                    font-size: 0.9rem;
                    line-height: 1.5;
                    color: rgba(255, 255, 255, 0.9);
                }

                .booru-upload-actions {
                    display: flex;
                    gap: 15px;
                    justify-content: center;
                    padding: 25px;
                    background: rgba(0, 0, 0, 0.1);
                    border-radius: 0 0 13px 13px;
                    border-top: 2px solid var(--border-colour);
                }

                .booru-cancel-btn,
                .booru-upload-btn {
                    padding: 12px 30px;
                    border: none;
                    border-radius: 8px;
                    font-size: 1rem;
                    font-weight: 600;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    display: flex;
                    align-items: center;
                    gap: 8px;
                    min-width: 140px;
                    justify-content: center;
                }

                .booru-cancel-btn {
                    background: linear-gradient(135deg, #6c757d, #5a6169);
                    color: white;
                    border: 2px solid transparent;
                }

                .booru-cancel-btn:hover {
                    background: linear-gradient(135deg, #5a6169, #495057);
                    transform: translateY(-2px);
                    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
                }

                .booru-upload-btn {
                    background: linear-gradient(135deg, #2ed573, #26d0ce);
                    color: white;
                    border: 2px solid transparent;
                }

                .booru-upload-btn:hover {
                    background: linear-gradient(135deg, #26d0ce, #2ed573);
                    transform: translateY(-2px);
                    box-shadow: 0 5px 15px rgba(46, 213, 115, 0.4);
                }

                .booru-upload-btn:active {
                    transform: translateY(0);
                }

                /* Dark mode specific adjustments */
                body.dark-mode .booruPopupContent {
                    background: linear-gradient(135deg, var(--dark-background-colour), var(--dark-darker-background-colour));
                    border-color: var(--dark-border-colour);
                    color: var(--dark-text-colour);
                }

                body.dark-mode .booruPopupContent details {
                    background: rgba(255, 255, 255, 0.05) !important;
                    border-color: rgba(255, 255, 255, 0.1) !important;
                }

                body.dark-mode .booruPopupContent details summary {
                    color: var(--dark-primary-colour) !important;
                }

                body.dark-mode .booruPopupContent details summary:hover {
                    background: rgba(255, 255, 255, 0.05) !important;
                    color: var(--dark-primary-colour-light) !important;
                }

                body.dark-mode .booruPopupContent details[open] summary {
                    border-bottom-color: rgba(255, 255, 255, 0.1) !important;
                }

                body.dark-mode .booruPopupContent details ul {
                    background: rgba(255, 255, 255, 0.02) !important;
                }

                body.dark-mode .booruPopupContent details li::before {
                    color: var(--dark-primary-colour) !important;
                }

                body.dark-mode .booru-rules-header {
                    border-bottom-color: var(--dark-border-colour);
                }

                body.dark-mode .booru-upload-actions {
                    border-top-color: var(--dark-border-colour);
                }

                .overlay {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background-color: rgba(0, 0, 0, 0.7);
                    z-index: 1999;
                    display: none;
                }

                /* Mobile responsive */
                @media (max-width: 768px) {
                    .booruPopupContent {
                        width: 92%;
                        max-width: none;
                        margin: 15px;
                        max-height: 80vh;
                    }
                    
                    .booru-upload-header {
                        padding: 15px;
                    }
                    
                    .booru-upload-header h1 {
                        font-size: 1.4rem;
                    }
                    
                    .booru-subtitle {
                        font-size: 0.95rem;
                    }
                    
                    .booru-rules-container {
                        padding: 15px;
                    }
                    
                    .booru-rules-header {
                        margin-bottom: 20px;
                        padding-bottom: 15px;
                    }
                    
                    .booru-rules-header h2 {
                        font-size: 1.2rem;
                    }
                    
                    .rule-section {
                        margin-bottom: 15px;
                        padding: 12px;
                    }
                    
                    .rule-section h3 {
                        font-size: 1rem;
                    }
                    
                    .rule-section li {
                        font-size: 0.9rem;
                        margin-bottom: 6px;
                    }
                    
                    .booru-upload-actions {
                        flex-direction: column;
                        gap: 10px;
                        padding: 15px;
                    }
                    
                    .booru-cancel-btn,
                    .booru-upload-btn {
                        width: 100%;
                        font-size: 0.9rem;
                        padding: 10px;
                    }
                }
                
                /* Tablet optimization */
                @media (min-width: 769px) and (max-width: 1024px) {
                    .booruPopupContent {
                        max-width: 550px;
                        width: 80%;
                    }
                }
                
                /* Very small screens */
                @media (max-width: 480px) {
                    .booruPopupContent {
                        width: 95%;
                        margin: 10px;
                        max-height: 85vh;
                    }
                    
                    .booru-upload-header {
                        padding: 12px;
                    }
                    
                    .booru-upload-header h1 {
                        font-size: 1.2rem;
                    }
                    
                    .booru-subtitle {
                        font-size: 0.9rem;
                    }
                    
                    .booru-rules-container {
                        padding: 12px;
                    }
                    
                    .rule-section {
                        padding: 10px;
                        margin-bottom: 12px;
                    }
                    
                    .rule-section h3 {
                        font-size: 0.95rem;
                    }
                    
                    .rule-section li {
                        font-size: 0.85rem;
                        margin-bottom: 4px;
                    }
                    
                    .booru-upload-actions {
                        padding: 12px;
                        gap: 8px;
                    }
                    
                    .booru-cancel-btn,
                    .booru-upload-btn {
                        font-size: 0.85rem;
                        padding: 8px;
                    }
                }

                /* Close button styling */
                .closeButton {
                    position: absolute;
                    top: 15px;
                    right: 15px;
                    background: rgba(255, 255, 255, 0.1);
                    border: none;
                    color: white;
                    font-size: 24px;
                    cursor: pointer;
                    border-radius: 50%;
                    width: 40px;
                    height: 40px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    z-index: 2001;
                    transition: all 0.3s ease;
                }

                .closeButton:hover {
                    background: rgba(255, 255, 255, 0.2);
                    transform: scale(1.1);
                }
            </style>

            <div class="booruAdvert">
                <button class="booruButton" onclick="window.open('https://jscammie.com/booru', '_blank')">View Other's Images on Booru!</button>
            </div>

            
            <details id="outputDetails" style="display: block;" open>
                <summary>Output(s)</summary>
                <div id="advertisement" style="display: none;">
            
                </div>
                <div id="imagesContainer" class="imagesContainer"></div>
            </details>
            <br>
            
            <!-- if the imagesContainer div is empty then hide the dropdown: -->
            <script>



                imagesContainer = document.getElementById('imagesContainer')
                outputDetails = document.getElementById('outputDetails')
                function onImagesContainerUpdate(mutation) {
                    if (imagesContainer.children.length > 0) {
                        outputDetails.open = true;
                        outputDetails.style.display = 'block';
                    }
                }

                observeChildChanges(imagesContainer, onImagesContainerUpdate, 'manualChildUpdate');

                imagesContainer.dispatchEvent(new Event('manualChildUpdate'));

            </script>

            <style>

                /* blue button, space background with css magic, purple border: */
                .fastqueueButton {
                    background-image: linear-gradient(120deg, rgb(72, 72, 72) 0%, rgb(9, 9, 9) 100%);
                    border: none;
                    color: white;
                    padding: 15px 32px;
                    text-align: center;
                    text-decoration: none;
                    display: inline-block;
                    font-size: 16px;
                    margin: 4px 2px;
                    cursor: pointer;
                    transition: transform 0.7s, background-image 0.3s; /* Adjust time as needed */
                    transform: scale(0.9) rotate(0deg); /* Default state */
                    transform-origin: center; /* Ensures the scaling happens from the center */
                }

                /* when active class is added ontop of the fastqueueButton then have it be "activeated" looking: */
                .fastqueueButton.active {
                    transition: transform 0.7s, background-image 0.3s; /* Adjust time as needed */
                    transform: scale(1); 
                    background-image: linear-gradient(120deg, rgb(156, 199, 255) 0%, rgb(255, 151, 252) 100%);
                    border: 2px solid rgb(255, 144, 144);
                }

            </style>
            
            

            <style>
                .costPElement {
                    color: rgb(205, 130, 255);
                    background-color: rgba(0, 0, 0, 0.33);
                    padding:8px;
                    border-radius:8px;
                    margin:2px;
                    font-size: large;
                    width:fit-content;
                    /* center it: */
                    margin-left: auto;
                    margin-right: auto;
                    text-align: center;
                }
                .creditsPriceStyling {
                    color: rgb(238, 212, 255) !important;
                }
                
            </style>

            <script>
                <%- scripts.calculateCreditsPrice %>
            </script>
            
            <script>

                function prepareData() {
                    
                    loraCount = 0

                    Object.entries(masterLoraData).forEach(([key, value]) => {
                        if (value.selected) {
                            loraCount += 1
                        }
                    });


                    let model = document.getElementById('model').value

                    let runningCost = 0

                    activeExtras = {
                        removeWatermark: document.getElementById('removeWatermarkCheckbox').checked,
                        upscale: document.getElementById('upscaleCheckbox').checked,
                        doubleImages: document.getElementById('doubleImagesCheckbox').checked,
                        removeBackground: document.getElementById('removeBackgroundCheckbox').checked,
                    }
                    activeBonus = {
                        removeWatermark: false,
                        upscale: false,
                        doubleImages: false,
                        removeBackground: false,
                    }

                    fastqueueCost = getFastqueuePrice(loraCount, model)
                    if (document.getElementById('fastqueueButton').classList.contains('active')) {
                        runningCost += fastqueueCost
                    }

                    // Calculate prices for all extras (for display purposes)
                    allExtrasPrices = getExtrasPrice({
                        removeWatermark: true,
                        upscale: true,
                        doubleImages: true,
                        removeBackground: true,
                    }, model)

                    // Calculate prices only for selected extras (for actual cost)
                    selectedExtrasCosts = getExtrasPrice(activeExtras, model)

                    if (activeExtras.removeWatermark) {
                        runningCost += selectedExtrasCosts.removeWatermark
                    }
                    if (activeExtras.upscale) {
                        runningCost += selectedExtrasCosts.upscale
                    }
                    if (activeExtras.doubleImages) {
                        runningCost += selectedExtrasCosts.doubleImages
                    }

                    if (activeExtras.removeBackground) {
                        runningCost += selectedExtrasCosts.removeBackground
                    }

                    // activate bonus for upscale and doubleImages IF they are both active:
                    if (activeExtras.upscale && activeExtras.doubleImages) {
                        activeBonus.upscale = true
                        activeBonus.doubleImages = true
                    } else {
                        activeBonus.upscale = false
                        activeBonus.doubleImages = false
                    }

                    // if there are any bonus, add them to the runningCost:
                    if (selectedExtrasCosts.removeWatermarkBonus > 0 && activeExtras.removeWatermark && activeBonus.removeWatermark) {
                        runningCost += selectedExtrasCosts.removeWatermarkBonus
                    }
                    if (selectedExtrasCosts.upscaleBonus > 0 && activeExtras.upscale && activeBonus.upscale) {
                        runningCost += selectedExtrasCosts.upscaleBonus
                    }
                    if (selectedExtrasCosts.doubleImagesBonus > 0 && activeExtras.doubleImages && activeBonus.doubleImages) {
                        runningCost += selectedExtrasCosts.doubleImagesBonus
                    }
                    if (selectedExtrasCosts.removeBackgroundBonus > 0 && activeExtras.removeBackground && activeBonus.removeBackground) {
                        runningCost += selectedExtrasCosts.removeBackgroundBonus
                    }

                    
                    document.getElementById('removeWatermarkCreditsPrice').innerText = allExtrasPrices.removeWatermark
                    document.getElementById('upscaleCreditsPrice').innerText = allExtrasPrices.upscale
                    document.getElementById('doubleImagesCreditsPrice').innerText = allExtrasPrices.doubleImages
                    document.getElementById('removeBackgroundCreditsPrice').innerText = allExtrasPrices.removeBackground



                    document.getElementById('fastqueueCreditsPrice').innerText = fastqueueCost


                    document.getElementById('currentCreditsPrice').innerText = runningCost

                    let generateButton = document.getElementById('generateButton')

                    if (runningCost > 0) {
                        generateButton.innerText = `Generate Image | Cost: ${runningCost} Credits`
                    } else {
                        generateButton.innerText = `Generate Image for Free`
                    }
                    
                    // Update queue ETA display to show new costs
                    if (typeof updateQueueETA === 'function') {
                        updateQueueETA();
                    }
            
                }

                document.addEventListener('DOMContentLoaded', function() {
                    prepareData()
                });



                document.getElementById('fastqueueButton').addEventListener('click', function() {
                    prepareData()
                });

                // on model change:
                document.getElementById('model').addEventListener('change', function() {
                    prepareData()
                });

                // Define the callback function to be executed when a change is detected
                function onLoraChange(mutation) {
                    prepareData();
                }

                // Select the target element by its ID
                let loraSelectionsSummary = document.getElementById('loraSelectionsSummary');

                if (loraSelectionsSummary) {
                    // Use the observeChildChanges function to monitor the element
                    observeChildChanges(loraSelectionsSummary, onLoraChange);
                } else {
                    console.warn('Element with ID "loraSelectionsSummary" does not exist.');
                }



                document.getElementById('removeWatermarkCheckbox').addEventListener('change', function() {
                    prepareData()
                });
                document.getElementById('upscaleCheckbox').addEventListener('change', function() {
                    prepareData()
                });
                document.getElementById('doubleImagesCheckbox').addEventListener('change', function() {
                    prepareData()
                });
                document.getElementById('removeBackgroundCheckbox').addEventListener('change', function() {
                    prepareData()
                });

            </script>


            
            
            <br>

        </div>

    </div>


    <div id="imageOverlay" style="display:none;">
        <img id="overlayImage" src="" alt="Enlarged view" />
    </div> 

    <!-- get partials/_footer: -->
    <%- include('../partials/_footer') %>

    <script>
        document.getElementById('img2imgCheckbox').addEventListener('change', function() {
            const isChecked = this.checked;
            const img2imgControls = document.getElementById('img2imgControls');

            if (isChecked) {
                img2imgControls.style.display = 'block';
            } else {
                img2imgControls.style.display = 'none';
            }
        });

        document.getElementById('img2imgStrength').addEventListener('input', function() {
            document.getElementById('img2imgStrengthValue').innerText = this.value + '%';
        });
        document.getElementById('img2imgStrength').dispatchEvent(new Event('input'));


        // inpainting checkbox
        document.getElementById('inpaintingCheckbox').addEventListener('change', function() {
            const isChecked = this.checked;
            const inpaintingControls = document.getElementById('inpaintingControls');

            if (isChecked) {
                inpaintingControls.style.display = 'block';
            } else {
                inpaintingControls.style.display = 'none';
            }
        });

        document.getElementById('inpaintingStrength').addEventListener('input', function() {
            document.getElementById('inpaintingStrengthValue').innerText = this.value + '%';
        });
        document.getElementById('inpaintingStrength').dispatchEvent(new Event('input'));

        // if the user presses shift and enter on their keyboard, submit the form:
        document.addEventListener('keydown', function(event) {
            if (event.shiftKey && event.key === 'Enter') {
                document.getElementById('generateButton').click();
            }
        });

    </script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Function to create a drop area
        const createDropArea = (text, side) => {
            const dropArea = document.createElement('div');
            dropArea.innerText = text;
            dropArea.backgroundImage = 'linear-gradient(120deg, rgb(72, 72, 72) 0%, rgb(9, 9, 9) 100%)';
            dropArea.style.position = 'fixed';
            dropArea.style.top = '20%';
            dropArea.style[side] = '10px';
            dropArea.style.width = '20%';
            dropArea.style.height = '60%';
            dropArea.style.border = '2px dashed white';
            dropArea.style.borderRadius = '10px';
            dropArea.style.textAlign = 'center';
            dropArea.style.paddingTop = '20%';
            dropArea.style.color = 'white';
            dropArea.style.fontSize = '20px';
            dropArea.style.display = 'none'; // Initially hidden
            document.body.appendChild(dropArea);
            return dropArea;
        };
    
        // Create drop areas and initially hide them
        const inpaintingDropArea = createDropArea('Send to Inpainting', 'left');
        const img2ImgDropArea = createDropArea('Send to Img2Img', 'right');
    
        // Function to show/hide drop areas
        const showDropAreas = (show) => {
            inpaintingDropArea.style.display = show ? 'block' : 'none';
            img2ImgDropArea.style.display = show ? 'block' : 'none';
        };
    
        // Drag events on the window to show/hide drop areas
        window.addEventListener('dragenter', (e) => {
            e.preventDefault();
            showDropAreas(true);
        });
    
        window.addEventListener('dragover', (e) => {
            e.preventDefault(); // Necessary to allow for the drop event to fire
        });
    
        window.addEventListener('dragleave', (e) => {
            e.preventDefault();
            if (e.clientX <= 0 || e.clientX >= window.innerWidth || e.clientY <= 0 || e.clientY >= window.innerHeight) {
                showDropAreas(false);
            }
        });
    
        window.addEventListener('drop', (e) => {
            e.preventDefault();
            showDropAreas(false);
        });
    
        // Function to handle file drop
        const handleFileDrop = (file, target) => {
            const checkboxId = target === 'inpainting' ? 'inpaintingCheckbox' : 'img2imgCheckbox';
            const inputId = target === 'inpainting' ? 'inpaintingImage' : 'uploadedImage';
            
            document.getElementById(checkboxId).checked = true;
            document.getElementById(checkboxId).dispatchEvent(new Event('change'));
            
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(file);
            document.getElementById(inputId).files = dataTransfer.files;
            document.getElementById(inputId).dispatchEvent(new Event('change'));
        };
    
        // Setup drop area event listeners
        const setupDropArea = (dropArea, target) => {
            dropArea.addEventListener('drop', (e) => {
                e.preventDefault();
                if (e.dataTransfer.files.length > 0) {
                    handleFileDrop(e.dataTransfer.files[0], target);
                }
                showDropAreas(false);
            });
        };
    
        setupDropArea(inpaintingDropArea, 'inpainting');
        setupDropArea(img2ImgDropArea, 'img2img');
    });

    // if inpaintingImage has a file inside it, then move the footerBar style class to be the image height downwards:
    document.getElementById('inpaintingImage').addEventListener('change', function() {
        imageHeight = document.getElementById('inpaintingImage').clientHeight;
        if (this.files.length > 0) {
            document.getElementById('footerBar').style.marginTop = `${imageHeight}px`;
        } else {
            document.getElementById('footerBar').style.marginTop = '0px';
        }
    });
    </script>
    



    <script>

        // blast everything with a change / input event to update the summary:
        // when the DOM is loaded, dispatch change events to update the summary:

        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('model').dispatchEvent(new Event('input'));
        });


        document.getElementById('imagesContainer').addEventListener('click', function(event) {
            if (event.target.tagName === 'IMG') {
                showOverlay(event.target.src);
            }
        });

        let currentImageIndex = 0;
        let imagesSrcList = [];

        function showOverlay(src) {
            const overlay = document.getElementById('imageOverlay');
            overlay.style.display = 'flex'; // Change to 'flex' to activate flexbox
            document.getElementById('overlayImage').src = src;
    
            // Disable scrolling on the body
            document.body.style.overflow = 'hidden';
            const overlayImage = document.getElementById('overlayImage');

            overlay.style.display = 'block';
            overlayImage.src = src;
            currentImageIndex = imagesSrcList.indexOf(src);

            // Add event listener for keydown
            document.addEventListener('keydown', handleArrowKeyPress);
        }

        function hideOverlay() {
            const overlay = document.getElementById('imageOverlay');
            overlay.style.display = 'none';
            
            // Enable scrolling
            document.body.style.overflow = '';

            // Remove event listener to prevent interference when overlay is not active
            document.removeEventListener('keydown', handleArrowKeyPress);
        }

        function handleArrowKeyPress(event) {
            if (!imagesSrcList.length) return; // Exit if no images are available

            if (event.key === 'ArrowRight') {
                currentImageIndex = (currentImageIndex + 1) % imagesSrcList.length;
            } else if (event.key === 'ArrowLeft') {
                currentImageIndex = (currentImageIndex - 1 + imagesSrcList.length) % imagesSrcList.length;
            } else {
                return; // Exit if not a left/right arrow key
            }
            document.getElementById('overlayImage').src = imagesSrcList[currentImageIndex];
        }

        // Function to populate imagesSrcList when images are loaded
        function populateImagesSrcList() {
            imagesSrcList = Array.from(document.querySelectorAll('#imagesContainer img')).map(img => img.src);        }

        // Add click event listener to the overlay to hide it when clicked
        document.getElementById('imageOverlay').addEventListener('click', hideOverlay);
    </script>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://code.jquery.com/ui/1.13.1/jquery-ui.min.js" defer></script>

    <script>
        let timeout = null;  // This timeout variable should be outside the updateWordCount function

        function displayWordCount(promptWordCount, negativePromptWordCount) {
            const promptWordCountElement = document.getElementById('promptWordCount');
            const negativePromptWordCountElement = document.getElementById('negativePromptWordCount');

            // promptWordCountElement.innerText = `Tokens: ${promptWordCount}`;
            // negativePromptWordCountElement.innerText = `Tokens: ${negativePromptWordCount}`;

            promptWordCountElement.innerText = ``;
            negativePromptWordCountElement.innerText = ``;

            function removeAllClasses(element) {
                element.classList.remove('wordCountGreen');
                element.classList.remove('wordCountYellow');
                element.classList.remove('wordCountRed');
            }

            function setWordCountClass(element, wordCount) {
                removeAllClasses(element);
                if (document.getElementById('model').value.startsWith('pdxl-')) {
                    if (wordCount > 90) {
                        element.classList.add('wordCountRed');
                    } else if (wordCount > 75) {
                        element.classList.add('wordCountYellow');
                    } else {
                        element.classList.add('wordCountGreen');
                    }
                } else if (document.getElementById('model').value.startsWith('flux-')) {
                    if (wordCount > 300) {
                        element.classList.add('wordCountRed');
                    } else if (wordCount > 135) {
                        element.classList.add('wordCountYellow');
                    } else {
                        element.classList.add('wordCountGreen');
                    }
                } else if (document.getElementById('model').value.startsWith('illustrious-')) {
                    if (wordCount > 90) {
                        element.classList.add('wordCountRed');
                    } else if (wordCount > 75) {
                        element.classList.add('wordCountYellow');
                    } else {
                        element.classList.add('wordCountGreen');
                    }
                } else {
                    if (wordCount > 90) {
                        element.classList.add('wordCountRed');
                    } else if (wordCount > 75) {
                        element.classList.add('wordCountYellow');
                    } else {
                        element.classList.add('wordCountGreen');
                    }
                }
            }

            setWordCountClass(promptWordCountElement, promptWordCount);
            setWordCountClass(negativePromptWordCountElement, negativePromptWordCount);
        }

        function updateWordCount() {
            if (document.getElementById('prompt').value.trim() === '' && document.getElementById('negativeprompt').value.trim() === '') {
                displayWordCount(0, 0);
                return;
            }

            const delay = 1000; // Change delay to 1000 ms for 1 request per second

            // Clear the timeout if it already exists
            if (timeout !== null) {
                clearTimeout(timeout);
            }

            // Set a new timeout
            timeout = setTimeout(() => {
                getWordCount();
            }, delay);
        }

        function getWordCount() {
            const promptTextarea = document.getElementById('prompt');
            const negativePromptInput = document.getElementById('negativeprompt');

            // Construct data payload for POST request
            const data = {
                prompt: promptTextarea.value,
                negativeprompt: negativePromptInput.value
            };

            // Send POST request to server
            fetch('/token-length', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(data => {
                displayWordCount(data.prompt, data.negative_prompt);
            })
            .catch(error => {
                console.error('Error fetching word counts:', error);
                displayWordCount('Error', 'Error'); // Display error in word count fields
            });
        }

        function checkRpCount(textarea) {
            rpCount = (textarea.value.toLowerCase().match(/<rp>/g) || []).length;

            if (rpCount >= 2) {
                if (!document.getElementById('regionalPromptCheckbox').checked) {
                    document.getElementById('regionalPromptCheckbox').checked = true;
                    document.getElementById('regionalPromptCheckbox').dispatchEvent(new Event('change'));
                }
            } else {
                if (document.getElementById('regionalPromptCheckbox').checked) {
                    document.getElementById('regionalPromptCheckbox').checked = false;
                    document.getElementById('regionalPromptCheckbox').dispatchEvent(new Event('change'));
                }
            }
        }

        document.getElementById('prompt').addEventListener('input', function() {
            checkRpCount(this);
        });

        // Add event listeners for input on both the prompt textarea and the negative prompt input
        document.getElementById('prompt').addEventListener('input', updateWordCount);
        document.getElementById('negativeprompt').addEventListener('input', updateWordCount);

        // Initial update on page load
        updateWordCount();
    </script>

    <script>

        // document.getElementById('advancedCheckbox').dispatchEvent(new Event('change'));

        function checkForNullModel () {
            if (document.getElementById('model').value === null || document.getElementById('model').value === undefined || document.getElementById('model').value === "") {
                document.getElementById('model').value = document.getElementById('model').options[1].value;
                document.getElementById('model').dispatchEvent(new Event('change'));
            }
        }

        function checkForNullAspectRatio () {
            if (document.getElementById('aspectRatio').value === null || document.getElementById('aspectRatio').value === undefined || document.getElementById('aspectRatio').value === "") {
                document.getElementById('aspectRatio').value = document.getElementById('aspectRatio').options[1].value;
                document.getElementById('aspectRatio').dispatchEvent(new Event('change'));
            }
        }

        // add event listener for the model dropdown:
        document.getElementById('model').addEventListener('change', () => {
            checkForNullModel();
        });
        document.getElementById('model').dispatchEvent(new Event('change'));

        // add event listener for the aspectRatio dropdown:
        document.getElementById('aspectRatio').addEventListener('change', () => {
            checkForNullAspectRatio();
        });
        document.getElementById('aspectRatio').dispatchEvent(new Event('change'));

        // on page load // loraContainer class style to block:
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.loraContainer').forEach(container => {
                container.style.display = 'block';
            });
        });

    </script>
    
    <script> <%- scripts.APIForm %> </script>
    <script src="https://www.jscammie.com/scripts/ai-autocomplete.js?v20"></script>

    <div class="overlay" id="overlayBooru"></div>
    <div class="booruPopupContent" id="booruPopupContent"></div>

    <!-- AI Image Generator Tour Script -->
    <script>
        <%- scripts.imageGeneratorTour %>
    </script>

    <script>
        // Handle fast queue button functionality first
        const fastqueueButton = document.getElementById('fastqueueButton');
        const fastqueueCard = document.getElementById('fastqueueCard');
        
        if (fastqueueButton && fastqueueCard) {
            fastqueueButton.addEventListener('click', function(event) {
                event.preventDefault();
                event.stopPropagation(); // Prevent card click
                
                const toggleText = this.querySelector('.toggle-text');
                if (this.classList.contains('active')) {
                    this.classList.remove('active');
                    toggleText.textContent = 'Enable Fast Queue ⚡';
                    fastqueueCard.classList.remove('selected');
                } else {
                    this.classList.add('active');
                    toggleText.textContent = 'Disable Fast Queue ⚡';
                    fastqueueCard.classList.add('selected');
                }
                // Trigger prepareData to update costs
                if (typeof prepareData === 'function') {
                    prepareData();
                }
            });
        }
    </script>

    <!-- Lora Popup Overlay -->
    <div class="lora-popup-overlay" id="loraPopupOverlay">
        <div class="lora-popup-container" id="loraPopupContent">
            <!-- Content will be dynamically inserted here -->
        </div>
    </div>

    <!-- CSS for Lora Image Buttons and Popup -->
    <style>
        /* Lora Image Buttons Container */
        .lora-buttons-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 15px;
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            padding: 20px;
            border-radius: 12px;
            border: 1px solid #333;
            margin: 10px 0;
        }

        /* Individual Lora Image Button */
        .lora-image-button {
            position: relative;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            border: 2px solid rgba(255, 255, 255, 0.1);
            cursor: pointer;
            transition: all 0.3s ease;
            overflow: hidden;
            aspect-ratio: 1;
            display: flex;
            flex-direction: column;
        }

        .lora-image-button:hover {
            transform: translateY(-2px);
            border-color: #60a5fa;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.4);
        }

        /* Image Container */
        .lora-button-image-container {
            position: relative;
            flex: 1;
            overflow: hidden;
            border-radius: 8px 8px 0 0;
        }

        .lora-button-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            object-position: center;
            transition: transform 0.3s ease;
        }

        .lora-image-button:hover .lora-button-image {
            transform: scale(1.05);
        }

        /* Overlay on image */
        .lora-button-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
            padding: 8px;
            color: white;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .lora-image-button:hover .lora-button-overlay {
            opacity: 1;
        }

        .lora-button-name {
            display: block;
            font-size: 11px;
            font-weight: bold;
            color: #e2e8f0;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .lora-button-strength {
            display: block;
            font-size: 10px;
            color: #94a3b8;
            margin-top: 2px;
        }

        /* Controls section */
        .lora-button-controls {
            padding: 8px;
            background: rgba(0, 0, 0, 0.3);
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .lora-button-checkbox {
            width: 16px;
            height: 16px;
            accent-color: #00ff88;
            cursor: pointer;
        }

        /* Popup Overlay */
        .lora-popup-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            backdrop-filter: blur(5px);
        }

        /* Popup Container */
        .lora-popup-container {
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            border-radius: 15px;
            border: 1px solid #333;
            max-width: 600px;
            max-height: 80vh;
            width: 90%;
            overflow-y: auto;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.6);
            animation: popupSlideIn 0.3s ease-out;
        }

        @keyframes popupSlideIn {
            from {
                opacity: 0;
                transform: scale(0.9) translateY(-20px);
            }
            to {
                opacity: 1;
                transform: scale(1) translateY(0);
            }
        }

        /* Popup Header */
        .lora-popup-header {
            display: flex;
            align-items: center;
            padding: 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            position: relative;
        }

        .lora-popup-image {
            width: 60px;
            height: 60px;
            border-radius: 8px;
            object-fit: cover;
            object-position: center;
            margin-right: 15px;
            border: 2px solid rgba(255, 255, 255, 0.2);
        }

        .lora-popup-title h3 {
            margin: 0;
            color: #e2e8f0;
            font-size: 18px;
            font-weight: bold;
        }

        .lora-popup-category {
            color: #94a3b8;
            font-size: 14px;
            margin-top: 4px;
        }

        .close-popup-btn {
            position: absolute;
            top: 15px;
            right: 15px;
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: #e2e8f0;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            font-size: 18px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .close-popup-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: scale(1.1);
        }

        /* Popup Body */
        .lora-popup-body {
            padding: 20px;
            color: #e2e8f0;
        }

        .lora-popup-body > div {
            margin-bottom: 20px;
        }

        .lora-popup-body > div:last-child {
            margin-bottom: 0;
        }

        /* ID Section */
        .lora-popup-id {
            background: rgba(242, 144, 255, 0.1);
            padding: 10px 15px;
            border-radius: 8px;
            border-left: 3px solid #f290ff;
        }

        .id-label, .desc-label, .strength-label, .words-label, .meta-label {
            font-weight: bold;
            color: #ffd700;
            margin-right: 10px;
        }

        .id-text {
            color: #f290ff;
            font-family: monospace;
            margin-right: 10px;
        }

        /* Description Section */
        .lora-popup-description {
            background: rgba(255, 216, 144, 0.1);
            padding: 15px;
            border-radius: 8px;
            border-left: 3px solid #ffd890;
        }

        .lora-popup-description p {
            margin: 8px 0 0 0;
            color: #ffd890;
            line-height: 1.4;
        }

        /* Strength Section */
        .lora-popup-strength {
            background: rgba(150, 255, 144, 0.1);
            padding: 15px;
            border-radius: 8px;
            border-left: 3px solid #96ff90;
        }

        .strength-controls {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 10px;
        }

        .strength-controls input[type="range"] {
            flex: 1;
            accent-color: var(--highlight-colour-hover);
        }

        .strength-value {
            color: var(--highlight-colour-hover);
            font-weight: bold;
            min-width: 40px;
            text-align: center;
        }

        .reset-strength-btn {
            background: linear-gradient(135deg, #96ff90, #7dd87a);
            color: #1a1a2e;
            border: none;
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 12px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .reset-strength-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(150, 255, 144, 0.3);
        }

        /* Words Section */
        .lora-popup-words {
            background: rgba(144, 225, 255, 0.1);
            padding: 15px;
            border-radius: 8px;
            border-left: 3px solid #90e1ff;
        }

        .lora-popup-word {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 8px 0;
            padding: 8px;
            background: rgba(144, 225, 255, 0.05);
            border-radius: 6px;
        }

        .word-label {
            font-weight: bold;
            color: #90e1ff;
            min-width: 80px;
        }

        .word-text {
            flex: 1;
            color: #90e1ff;
            font-family: monospace;
        }

        .copy-word-btn {
            background: linear-gradient(135deg, #90e1ff, #5db9ff);
            color: #1a1a2e;
            border: none;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 11px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .copy-word-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(144, 225, 255, 0.3);
        }

        /* Meta Section */
        .lora-popup-meta {
            background: rgba(255, 255, 255, 0.05);
            padding: 15px;
            border-radius: 8px;
            border-left: 3px solid #94a3b8;
        }

        .meta-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 8px 0;
            padding: 4px 0;
        }

        .meta-item:not(:last-child) {
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding-bottom: 8px;
        }

        .meta-item span:last-child,
        .meta-item a {
            color: #94a3b8;
            text-decoration: none;
        }

        .meta-item a:hover {
            color: #60a5fa;
            text-decoration: underline;
        }

        /* Responsive Design */
        @media (max-width: 1080px) {
            .lora-buttons-container {
                grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
                gap: 10px;
                padding: 15px;
            }

            .lora-popup-container {
                width: 95%;
                max-height: 90vh;
            }

            .lora-popup-header {
                padding: 15px;
            }

            .lora-popup-body {
                padding: 15px;
            }

            .strength-controls {
                flex-direction: column;
                align-items: stretch;
                gap: 8px;
            }

            .lora-popup-word {
                flex-direction: column;
                align-items: stretch;
                gap: 5px;
            }

            .word-label {
                min-width: auto;
            }

            .meta-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 4px;
            }
        }

        /* Ensure traditional layout is hidden on non-phones when image layout is active */
        @media (min-width: 1080px) {
            /* .lora-details {
                display: none;
            }
            
            .lora-buttons-container + .lora-details {
                display: none;
            } */
        }

        /* Click outside to close popup */
        .lora-popup-overlay {
            cursor: pointer;
        }

        .lora-popup-container {
            cursor: default;
        }
    </style>

    <script>
        // Close popup when clicking outside
        document.addEventListener('click', function(event) {
            const popup = document.getElementById('loraPopupOverlay');
            const popupContainer = document.getElementById('loraPopupContent');
            
            if (popup && popup.style.display === 'flex' && !popupContainer.contains(event.target)) {
                closeLoraPopup();
            }
        });

        // Close popup with Escape key
        document.addEventListener('keydown', function(event) {
            const popup = document.getElementById('loraPopupOverlay');
            
            if (event.key === 'Escape' && popup && popup.style.display === 'flex') {
                closeLoraPopup();
            }
        });

        // Function to copy text to clipboard (redefining to ensure it's available)
        function copyXWordsToClipboard(words) {
            event.preventDefault();
            event.stopPropagation();

            if (!navigator.clipboard) {
                console.error('Clipboard API not available. Please use a secure context (HTTPS).');
                return;
            }

            navigator.clipboard.writeText(words).then(
                function() {
                    // Optional: Show a brief success message
                    console.log('Copied to clipboard:', words);
                },
                function(err) {
                    console.error('Could not copy text: ', err);
                }
            );
        }
    </script>

    <!-- CSS for Lora Image Buttons and Popup -->
    <style>
        /* Floating Lora Buttons Container */
        .lora-floating-buttons-container {
            position: absolute;
            display: flex;
            flex-direction: column;
            gap: 8px;
            max-height: 300px;
            overflow-y: auto;
            z-index: 999;
            padding: 10px;
            background: linear-gradient(135deg, rgba(26, 26, 46, 0.7), rgba(22, 33, 62, 0.7));
            border-radius: 10px;
            border: 1px solid rgba(51, 51, 51, 0.7);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.4);
        }

        /* Individual Floating Lora Button */
        .lora-floating-button {
            position: relative;
            width: 60px;
            height: 60px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            border: 2px solid rgba(255, 255, 255, 0.1);
            cursor: pointer;
            transition: all 0.3s ease;
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0.3;
        }

        .lora-floating-button:hover {
            transform: scale(1.05);
            border-color: #60a5fa;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.6);
            opacity: 1;
        }

        /* Make buttons fully opaque when container is visible */
        .lora-buttons-visible .lora-floating-button {
            opacity: 1;
        }

        /* Individual button hover still applies for extra emphasis */
        .lora-buttons-visible .lora-floating-button:hover {
            transform: scale(1.1);
        }

        .lora-floating-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            object-position: center;
            border-radius: 6px;
        }

        .lora-floating-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(transparent, rgba(0, 0, 0, 0.9));
            padding: 4px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .lora-floating-button:hover .lora-floating-overlay {
            opacity: 1;
        }

        .lora-floating-name {
            display: block;
            font-size: 8px;
            font-weight: bold;
            color: #e2e8f0;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            text-align: center;
        }

        /* Popup Overlay with high z-index */
        .lora-popup-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: none;
            z-index: 9999;
            backdrop-filter: blur(5px);
            overflow-y: auto;
            padding: 20px;
            box-sizing: border-box;
        }

        /* Popup Container */
        .lora-popup-container {
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            border-radius: 15px;
            border: 1px solid #333;
            max-width: 600px;
            margin: 0 auto;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.6);
            animation: popupSlideIn 0.3s ease-out;
            position: relative;
            top: 50px;
        }

        @keyframes popupSlideIn {
            from {
                opacity: 0;
                transform: scale(0.9) translateY(-20px);
            }
            to {
                opacity: 1;
                transform: scale(1) translateY(0);
            }
        }

        /* Popup Header */
        .lora-popup-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .lora-popup-header h3 {
            margin: 0;
            color: #e2e8f0;
            font-size: 18px;
            font-weight: bold;
        }

        .close-popup-btn {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: #e2e8f0;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            font-size: 18px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .close-popup-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: scale(1.1);
        }

        /* Popup Body */
        .lora-popup-body {
            padding: 20px;
            color: #e2e8f0;
        }

        .lora-popup-body .lora-details {
            background: none;
            border: none;
            padding: 0;
            margin: 0;
        }

        /* Style the traditional lora layout within popup */
        .lora-popup-body .lora-toggle {
            margin-bottom: 15px;
        }

        .lora-popup-body .lora-info {
            padding: 0;
        }

        .lora-popup-body .lora-info > p {
            margin: 10px 0;
        }

        /* Responsive Design for floating buttons */
        @media (max-width: 1080px) {
            .lora-floating-buttons-container {
                display: none !important;
            }
        }

        /* Ensure popup is responsive */
        @media (max-width: 1080px) {
            .lora-popup-container {
                margin: 10px;
                max-width: calc(100% - 20px);
                top: 20px;
            }

            .lora-popup-header {
                padding: 15px;
            }

            .lora-popup-body {
                padding: 15px;
            }
        }

        /* Custom scrollbar for floating container */
        .lora-floating-buttons-container::-webkit-scrollbar {
            width: 6px;
        }

        .lora-floating-buttons-container::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
        }

        .lora-floating-buttons-container::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 3px;
        }

        .lora-floating-buttons-container::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.5);
        }
    </style>

    <style>
        /* Enhanced disabled styling for credit options */
        .credit-option.disabled {
            border-left-color: #64748b !important;
            position: relative;
        }
        .credit-option.disabled:hover {
            background: rgba(255,255,255,0.05) !important;
            transform: none !important;
        }
        .credit-option.disabled::after {
            content: 'Login Required';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0,0,0,0.8);
            color: #ff8844;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 10px;
            font-weight: bold;
            pointer-events: none;
            z-index: 10;
        }
    </style>

    <script>
        // Enhanced Booru Upload Functions
        function showBooruPopup(imageData) {
            const booruPopupContent = document.getElementById('booruPopupContent');
            const overlay = document.getElementById('overlayBooru');

            // Store imageData globally for use in the button click
            window.currentBooruImageData = imageData;

            // if they click off the popup, close it:
            overlay.onclick = function() {
                closeBooruPopup();
            }

            booruPopupContent.innerHTML = `
                <button class="closeButton" onclick="closeBooruPopup()">×</button>
                <div class="booru-upload-header">
                    <h1><i class="fas fa-upload"></i> Upload to Booru</h1>
                    <p class="booru-subtitle">Share your creation with the community</p>
                </div>
                
                <div class="booru-rules-container">
                    <div class="booru-rules-header">
                        <h2><i class="fas fa-exclamation-triangle"></i> Community Guidelines</h2>
                        <p>Please carefully review these rules before uploading:</p>
                    </div>
                    
                    <div class="booru-rules-sections">
                        <div class="rule-section critical">
                            <h3><i class="fas fa-ban"></i> Prohibited Content</h3>
                            <ul>
                                <li><strong>NO Child/Cub/Loli NSFW content</strong> - Zero tolerance policy</li>
                                <li><strong>NO Scat or Vore</strong> - Not allowed under any circumstances</li>
                                <li><strong>NO Inappropriate tags</strong> - Prompts containing banned keywords (e.g., "loli") will be removed even if SFW</li>
                                <li><strong>NO Low-quality spam</strong> - Avoid uploading excessive variations of the same image</li>
                            </ul>
                        </div>
                        
                        <div class="rule-section warning">
                            <h3><i class="fas fa-user-check"></i> Age-Up Guidelines</h3>
                            <ul>
                                <li>Aged-up characters must <strong>clearly appear over 18</strong> in proportions and appearance</li>
                                <li>Characters must look mature in clothing, body type, and facial features</li>
                                <li>When in doubt, don't upload - moderators will remove questionable content</li>
                            </ul>
                        </div>
                        
                        <div class="rule-section info">
                            <h3><i class="fas fa-shield-alt"></i> Moderation Process</h3>
                            <ul>
                                <li>All uploads are <strong>hidden by default</strong> until approved</li>
                                <li>Moderators assign safety ratings: SFW, Suggestive, or NSFW</li>
                                <li>Generation settings are publicly visible for transparency</li>
                            </ul>
                            <br>
                            <details>
                                <summary><i class="fas fa-info-circle"></i> Additional Notes on What Constitutes as Suggestive/Nsfw/Extreme</summary>
                                <ul>
                                    <li>Suggestive: Provocative poses, large breasts, cleavage, suggestive clothing and suggestive angles</li>
                                    <li>NSFW: Nudity, sexual content, or explicit themes, x-ray </li>
                                    <li>Extreme: Gore, excessive violence, pregnancy, egg laying, giantess/macro, hyper-proportions, tentacles, inflation, or other extreme content</li>
                                </ul>
                            </details>
                        </div>
                        
                        <div class="rule-section success">
                            <h3><i class="fas fa-star"></i> Quality Standards</h3>
                            <ul>
                                <li>Upload your <strong>best generations</strong> - quality over quantity</li>
                                <li>Ensure good composition and minimal artifacts</li>
                                <li>Unique and creative content is especially welcomed</li>
                            </ul>
                        </div>
                    </div>
                    
                    <div class="booru-consequences">
                        <h3><i class="fas fa-gavel"></i> Consequences</h3>
                        <p>Violations may result in content removal, warnings, or account restrictions on posting to the booru.</p>
                    </div>
                </div>
                
                <div class="booru-upload-actions">
                    <button class="booru-cancel-btn" onclick="closeBooruPopup()">
                        <i class="fas fa-times"></i> Cancel
                    </button>
                    <button class="booru-upload-btn" onclick="confirmBooruUpload(window.currentBooruImageData)">
                        <i class="fas fa-check"></i> I Agree - Upload to Booru
                    </button>
                </div>
            `;

            document.getElementById('overlayBooru').style.display = 'block';
            document.getElementById('booruPopupContent').style.display = 'block';

            // Listen for the ESC key to close the popup
            document.addEventListener('keydown', escCloseBooruPopup);
        }

        async function confirmBooruUpload(imageData) {
            // Hide the booru popup while showing the confirmation dialog
            document.getElementById('booruPopupContent').style.display = 'none';
            
            const options = {
                message: 'Are you sure you want to upload this image to the booru?\\n\\nBy clicking "Yes", you confirm that:\\n• Your image follows all community guidelines\\n• You understand the moderation process\\n• You accept potential consequences for violations',
                question: true,
                options: {
                    yes: function() { console.log("Upload confirmed"); },
                    no: function() { console.log("Upload cancelled"); }
                }
            };
            
            const userResponse = await globalAlert(options);
            
            if (userResponse === 'yes') {
                // Close the popup completely and proceed with upload
                closeBooruPopup();
                uploadToBooruFromAI(imageData);
            } else {
                // If 'no', show the booru popup again
                document.getElementById('booruPopupContent').style.display = 'block';
            }
        }

        async function uploadToBooruFromAI(imageData) {
            console.log('Uploading image to booru from AI page:', imageData);

            try {
                const response = await fetch('/create-booru-image', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(imageData)
                });
                
                const result = await response.json();
                
                const options = {
                    message: result.message,
                    question: false,
                };
                
                await globalAlert(options);
                
            } catch (error) {
                console.error('Error uploading to booru:', error);
                const options = {
                    message: 'Error uploading to booru. Please try again.',
                    question: false,
                };
                await globalAlert(options);
            }
        }

        function closeBooruPopup() {
            const booruPopupContent = document.getElementById('booruPopupContent');
            const overlay = document.getElementById('overlayBooru');
            
            booruPopupContent.style.display = 'none';
            overlay.style.display = 'none';
            
            // Remove event listener
            document.removeEventListener('keydown', escCloseBooruPopup);
        }

        function escCloseBooruPopup(event) {
            if (event.key === 'Escape') {
                closeBooruPopup();
            }
        }
    </script>

</body>
</html>