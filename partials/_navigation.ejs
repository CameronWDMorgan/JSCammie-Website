<link rel='stylesheet' href='/style.css?v=<%= version %>' />
<link rel='stylesheet' href='/css/dark-mode.css?v=<%= version %>' />

<!-- <script id="aclib" type="text/javascript" src="//acscdn.com/script/aclib.js"></script> -->

<div id="navigationOverlay" class="navigationOverlay frosted"></div>
<style>

    .navigationOverlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        transition: all 0.75s;
        z-index: 992;
    }
    #creditsButtonDiv {
        position: relative;
        z-index: 1200;
    }
    #creditsNav {
        z-index: 1201;
        position: relative;
    }
    #creditsDisplay {
        z-index: 1202;
        position: relative;
    }

</style>

<!-- Server state information -->
<span id="serverLoginState" style="display: none;"><%= session.loggedIn ? 'true' : 'false' %></span>

<script>
    // Set session data for JavaScript to access
    const sessionData = {
        loggedIn: <%= session.loggedIn ? 'true' : 'false' %>
    };

    function throttle(func, limit) {
        let inThrottle;
        let lastResult;
        return function(...args) {
            if (!inThrottle) {
                try {
                    lastResult = func.apply(this, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                } catch (error) {
                    console.error("Error in throttled function:", error);
                }
            }
            return lastResult;
        }
    }

    // Define userProfileNavigation as a global variable
    let userProfileNavigation = null;
    let userProfileUpdateInProgress = false;
    let oldUserProfile = {
        userProfileImg: '',
        userProfileUsername: '',
        userProfileLevel: '',
        userProfileExp: ''
    };

    const updateUserProfile = throttle(async () => {
        if (userProfileUpdateInProgress) {
            console.log("Update already in progress, skipping");
            return;
        }
        
        userProfileUpdateInProgress = true;
        console.log("Starting user profile update");
        
        try {
            // Add timeout to the fetch request to prevent hanging
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout
            
            let userProfileRaw = await fetch('/userProfile', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                },
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            if (!userProfileRaw.ok) {
                throw new Error(`HTTP error: ${userProfileRaw.status}`);
            }

            // res.send({ userProfile: userProfile}) is what the server uses to send it back to the client:
            let userProfileData = await userProfileRaw.json();
            
            // Update the global userProfile variable
            if (userProfileData?.userProfile) {
                userProfileNavigation = userProfileData.userProfile;
                console.log("User profile data updated:", userProfileNavigation);
                
                // Schedule display update after successful data fetch
                setTimeout(() => {
                    updateUserProfileDisplay();
                }, 500);
            } else {
                console.warn("Received empty or invalid user profile data");
            }
        } catch (error) {
            // Don't log AbortError as it's expected when timeout occurs
            if (error.name !== 'AbortError') {
                console.error("Error fetching user profile:", error);
            }
        } finally {
            userProfileUpdateInProgress = false;
        }
    }, 2000); // Increased throttle to 2000ms

    // Helper function to forcefully update profile elements
    function forceUpdateProfileElements() {
        if (!userProfileNavigation) {
            console.warn("Cannot update profile elements: userProfileNavigation is null");
            return;
        }
        
        // Initialize oldUserProfile if it doesn't exist
        if (!oldUserProfile) {
            oldUserProfile = {};
        }
        
        const profileImgSrc = userProfileNavigation.profileImg? userProfileNavigation.profileImg : 'http://www.jscammie.com/noimagefound.png';
        const username = userProfileNavigation.username? userProfileNavigation.username : 'User';
        const level = userProfileNavigation.level? userProfileNavigation.level : '1';
        const exp = userProfileNavigation.exp?.toString()? userProfileNavigation.exp?.toString() : '0';
        
        // Direct DOM manipulation for desktop elements only
        const elements = {
            'userProfileImg': profileImgSrc
        };
        
        const textElements = {
            'userProfileUsername': username,
            'userProfileLevel': level,
            'userProfileExp': exp
        };
        
        for (const [id, src] of Object.entries(elements)) {
            // dont update if its the same image:
            if (src == oldUserProfile[id]) {
                continue;
            }
            const element = document.getElementById(id);
            if (element) {
                element.setAttribute('src', src);
                
                // Force image reload
                element.onload = null;
                const newImg = new Image();
                newImg.onload = function() {
                    element.src = this.src;
                };
                newImg.src = src + '?t=' + new Date().getTime();
                oldUserProfile[id] = src;
            } else {
                console.warn(`Element with id ${id} not found`);
            }
        }

        for (const [id, text] of Object.entries(textElements)) {
            // dont update if its the same text:
            if (text == oldUserProfile[id]) {
                continue;
            }
            const element = document.getElementById(id);
            if (element) {
                element.textContent = text;
                oldUserProfile[id] = text;
            } else {
                console.warn(`Element with id ${id} not found`);
            }
        }
    }
    
    // Update user profile info in the dropdown and mobile view
    const updateUserProfileDisplay = () => {
        // console.log("Running updateUserProfileDisplay with userProfileNavigation:", userProfileNavigation);
        
        try {
            // Update profile elements in the dropdown menu
            forceUpdateProfileElements();
            
            // Get UI elements with null checks
            const loggedInElement = document.getElementById('loggedIn');
            const serverLoginStateElement = document.getElementById('serverLoginState');
            const creditsDisplayElement = document.getElementById('creditsDisplay');
            const btn3hr = document.getElementById('3hrCreditsButton');
            const btn12hr = document.getElementById('12hrCreditsButton');
            const btn24hr = document.getElementById('24hrCreditsButton');
            const btn168hr = document.getElementById('168hrCreditsButton');
            
            // Additional check: Are profile elements visible on the page?
            // This is another way to determine if the user is logged in
            const profileDisplayElement = document.getElementById('profileDisplay');
            const userProfileDivElement = document.getElementById('userProfileDiv');
            const hasVisibleProfileElements = !!profileDisplayElement || !!userProfileDivElement;
            
            // Check if the session indicates user is logged in
            // First check the server-provided login state, then fall back to the local state
            const serverIsLoggedIn = serverLoginStateElement ? serverLoginStateElement.textContent === 'true' : false;
            const localIsLoggedIn = loggedInElement ? loggedInElement.textContent === 'true' : false;
            const isLoggedIn = serverIsLoggedIn || localIsLoggedIn || hasVisibleProfileElements;
            
            // Update login status and credits
            if (userProfileNavigation == null || userProfileNavigation == undefined) {
                if (loggedInElement) loggedInElement.textContent = isLoggedIn ? 'true' : 'false';
                
                // Only show "Log in to claim" if user is actually not logged in
                if (!isLoggedIn) {
                    // set the creditsDisplay to 0 if not logged in
                    if (creditsDisplayElement) creditsDisplayElement.textContent = '0';
                    if (btn3hr) btn3hr.textContent = 'Log in to claim';
                    if (btn12hr) btn12hr.textContent = 'Log in to claim';
                    if (btn24hr) btn24hr.textContent = 'Log in to claim';
                    if (btn168hr) btn168hr.textContent = 'Log in to claim';
                    
                    // Stop the dailies timer when not logged in
                    stopDailiesTimer();
                    return;
                }
                
                // If logged in but profile not loaded yet, just exit without changing button texts
                if (isLoggedIn) {
                    console.log("User is logged in but profile not loaded yet");
                    // Only retry update if it's been some time since the last attempt
                    setTimeout(() => {
                        updateUserProfile();
                    }, 1000);
                    return;
                }
                
                return;
            } else {
                if (loggedInElement) loggedInElement.textContent = 'true';
            }

            // Update credits display
            let roundedCredits = Math.floor(userProfileNavigation?.credits ?? 0);
            if (creditsDisplayElement) creditsDisplayElement.textContent = roundedCredits.toString();

            // Update the dailies timers
            updateDailiesTimers();
            
            // Start the timer to continuously update the dailies display
            startDailiesTimer();
        } catch (error) {
            console.error("Error updating profile display:", error);
        }
    };
    
    // Separate function to update the dailies timers
    function updateDailiesTimers() {
        if (!userProfileNavigation) return;
        
        // update the time left on the buttons using current time and the dailies timestamps:
        const currentTime = new Date().getTime();
        
        const timestamp3hr = Number(userProfileNavigation?.dailies?.timestamp3hr ?? "0");
        const timestamp3hrDifferenceRequired = 10800000;

        const timestamp12hr = Number(userProfileNavigation?.dailies?.timestamp12hr ?? "0");
        const timestamp12hrDifferenceRequired = 43200000;

        const timestamp24hr = Number(userProfileNavigation?.dailies?.timestamp24hr ?? "0");
        const timestamp24hrDifferenceRequired = 86400000;

        const timestamp168hr = Number(userProfileNavigation?.dailies?.timestamp168hr ?? "0");
        const timestamp168hrDifferenceRequired = 604800000;

        // Get button elements with null checks
        const btn3hr = document.getElementById('3hrCreditsButton');
        const btn3hrTimeLeft = document.getElementById('3hrCreditsButtonTimeLeft');
        const btn12hr = document.getElementById('12hrCreditsButton');
        const btn12hrTimeLeft = document.getElementById('12hrCreditsButtonTimeLeft');
        const btn24hr = document.getElementById('24hrCreditsButton');
        const btn24hrTimeLeft = document.getElementById('24hrCreditsButtonTimeLeft');
        const btn168hr = document.getElementById('168hrCreditsButton');
        const btn168hrTimeLeft = document.getElementById('168hrCreditsButtonTimeLeft');
        
        // Track how many rewards are ready for animation
        let readyRewardsCount = 0;
        
        // 3hr button
        if (btn3hr && btn3hrTimeLeft) {
            if (timestamp3hr + timestamp3hrDifferenceRequired < currentTime || timestamp3hr == 0) {
                btn3hr.disabled = false;
                btn3hrTimeLeft.textContent = 'Claimable';
                readyRewardsCount++;
            } else {
                btn3hr.disabled = true;
                const timeLeft = timestamp3hr + timestamp3hrDifferenceRequired - currentTime;
                const timeLeftHours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const timeLeftMinutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                const timeLeftSeconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
                btn3hrTimeLeft.textContent = timeLeftHours + 'h ' + timeLeftMinutes + 'm ' + timeLeftSeconds + 's';
            }
        }

        // 12hr button
        if (btn12hr && btn12hrTimeLeft) {
            if (timestamp12hr + timestamp12hrDifferenceRequired < currentTime || timestamp12hr == 0) {
                btn12hr.disabled = false;
                btn12hrTimeLeft.textContent = 'Claimable';
                readyRewardsCount++;
            } else {
                btn12hr.disabled = true;
                const timeLeft = timestamp12hr + timestamp12hrDifferenceRequired - currentTime;
                const timeLeftHours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const timeLeftMinutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                const timeLeftSeconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
                btn12hrTimeLeft.textContent = timeLeftHours + 'h ' + timeLeftMinutes + 'm ' + timeLeftSeconds + 's';
            }
        }

        // 24hr button
        if (btn24hr && btn24hrTimeLeft) {
            if (timestamp24hr + timestamp24hrDifferenceRequired < currentTime || timestamp24hr == 0) {
                btn24hr.disabled = false;
                btn24hrTimeLeft.textContent = 'Claimable';
                readyRewardsCount++;
            } else {
                btn24hr.disabled = true;
                const timeLeft = timestamp24hr + timestamp24hrDifferenceRequired - currentTime;
                const timeLeftHours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const timeLeftMinutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                const timeLeftSeconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
                btn24hrTimeLeft.textContent = timeLeftHours + 'h ' + timeLeftMinutes + 'm ' + timeLeftSeconds + 's';
            }
        }

        // 168hr button
        if (btn168hr && btn168hrTimeLeft) {
            if (timestamp168hr + timestamp168hrDifferenceRequired < currentTime || timestamp168hr == 0) {
                btn168hr.disabled = false;
                btn168hrTimeLeft.textContent = 'Claimable';
                readyRewardsCount++;
            } else {
                // show it as D H M S left:
                btn168hr.disabled = true;
                const timeLeft = timestamp168hr + timestamp168hrDifferenceRequired - currentTime;
                const timeLeftDays = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
                const timeLeftHours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const timeLeftMinutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                const timeLeftSeconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
                btn168hrTimeLeft.textContent = timeLeftDays + 'd ' + timeLeftHours + 'h ' + timeLeftMinutes + 'm ' + timeLeftSeconds + 's';
            }
        }
        
        // Update credits button animation based on ready rewards
        updateCreditsButtonAnimation(readyRewardsCount);
    }
    
    // Function to update credits button animation based on ready rewards
    function updateCreditsButtonAnimation(readyCount) {
        const creditsButton = document.getElementById('creditsNav');
        if (!creditsButton) return;
        
        // Remove all animation classes first
        creditsButton.classList.remove('daily-ready', 'multiple-ready');
        
        if (readyCount > 0) {
            if (readyCount >= 2) {
                // Multiple rewards ready - more intense animation
                creditsButton.classList.add('multiple-ready');
            } else {
                // Single reward ready - basic animation
                creditsButton.classList.add('daily-ready');
            }
        }
    }

    // Set up a timer to update the dailies timers every second
    let dailiesTimerInterval = null;
    let pageVisible = !document.hidden;
    
    function startDailiesTimer() {
        // Clear any existing timer first
        if (dailiesTimerInterval) {
            clearInterval(dailiesTimerInterval);
        }
        
        // Update immediately
        updateDailiesTimers();
        
        // Set up the interval to update every second, but only when page is visible
        dailiesTimerInterval = setInterval(() => {
            // Only update if page is visible and user has profile data
            if (pageVisible && userProfileNavigation) {
                updateDailiesTimers();
            }
        }, 1000);
    }

    function stopDailiesTimer() {
        if (dailiesTimerInterval) {
            clearInterval(dailiesTimerInterval);
            dailiesTimerInterval = null;
        }
    }

    // Handle page visibility changes to optimize performance
    document.addEventListener('visibilitychange', () => {
        pageVisible = !document.hidden;
        
        if (pageVisible && userProfileNavigation && sessionData.loggedIn) {
            // Page became visible, restart timer if user is logged in
            startDailiesTimer();
        } else if (!pageVisible) {
            // Page became hidden, we can keep the timer running at reduced frequency
            // but for now, let's keep it simple and continue running
        }
    });

</script>

<style>
/* Navigation Bar */
.topNavBar {
    color: #fff;
    padding: 5px 20px;
    background-color: rgba(0, 0, 0, 0.2);
    position: relative;
    z-index: 1000;
}

.navContainer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1500px;
    margin: 0 auto;
}

/* Links Wrapper */
.navigationLinksWrapper {
    display: flex;
    align-items: center;
    gap: 8px;
}

.navigationLink {
    color: #fff;
    text-decoration: none;
    padding: 8px 12px;
    border-radius: 6px;
    transition: all 0.3s ease;
    background-color: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    font-size: 0.95em;
    white-space: nowrap;
}

.navigationLink:hover,
.navigationLink:focus {
    background-color: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.4);
    transform: translateY(-1px);
}

.navigationLinkActive {
    background-color: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.4);
    font-weight: 500;
}

/* Button Styling */
#creditsNav {
    background-color: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: #fff;
    padding: 8px 12px;
    margin-left: 10px;
    border-radius: 6px;
    cursor: pointer;
    display: flex;
    align-items: center;
    transition: all 0.3s ease;
    font-size: 0.95em;
    position: relative;
    overflow: hidden;
}

#creditsNav:hover {
    background-color: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.4);
    transform: translateY(-1px);
}

/* Credits button animations for daily rewards ready */
#creditsNav.daily-ready {
    animation: creditsButtonPulse 2s ease-in-out infinite;
    box-shadow: 0 0 15px rgba(255, 215, 0, 0.6);
    border-color: rgba(255, 215, 0, 0.8);
}

#creditsNav.daily-ready::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
        45deg,
        transparent,
        rgba(255, 215, 0, 0.3),
        transparent
    );
    transform: rotate(45deg);
    animation: shine 3s ease-in-out infinite;
}

@keyframes creditsButtonPulse {
    0%, 100% {
        transform: scale(1);
        background-color: rgba(255, 255, 255, 0.1);
    }
    50% {
        transform: scale(1.05);
        background-color: rgba(255, 215, 0, 0.2);
    }
}

@keyframes shine {
    0% {
        transform: translateX(-100%) translateY(-100%) rotate(45deg);
    }
    50% {
        transform: translateX(100%) translateY(100%) rotate(45deg);
    }
    100% {
        transform: translateX(-100%) translateY(-100%) rotate(45deg);
    }
}

/* Additional glow effect for multiple rewards ready */
#creditsNav.multiple-ready {
    animation: creditsButtonIntensePulse 1.5s ease-in-out infinite;
    box-shadow: 0 0 20px rgba(255, 215, 0, 0.8), 0 0 30px rgba(255, 165, 0, 0.4);
    border-color: rgba(255, 165, 0, 1);
}

@keyframes creditsButtonIntensePulse {
    0%, 100% {
        transform: scale(1);
        background-color: rgba(255, 215, 0, 0.1);
    }
    50% {
        transform: scale(1.08);
        background-color: rgba(255, 215, 0, 0.3);
    }
}

#creditsDisplay {
    margin-left: 5px;
    font-weight: 500;
}

/* Dark Mode Button */
#darkModeButton {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: #fff;
    font-size: 1.1em;
    cursor: pointer;
    transition: all 0.3s ease;
    padding: 8px 12px;
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
}

#darkModeButton:hover {
    background-color: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.4);
    transform: translateY(-1px);
}

#darkModeIcon {
    display: inline-block;
    transition: transform 0.3s;
}

/* Mobile Menu Button */
#mobileMenuButton {
    display: none;
    font-size: 1.5em;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: #fff;
    cursor: pointer;
    padding: 8px 12px;
    border-radius: 6px;
    transition: all 0.3s ease;
    z-index: 1001;
}

#mobileMenuButton:hover {
    background-color: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.4);
    transform: translateY(-1px);
}

#mobileMenuButton.active {
    transform: rotate(90deg);
}

/* Mobile Menu */
.mobileMenu {
    display: none;
    flex-direction: column;
    background-color: rgba(0, 0, 0, 0.95);
    border: 1px solid rgba(255, 255, 255, 0.2);
    padding: 12px;
    position: fixed;
    top: 60px;
    left: 0;
    right: 0;
    border-radius: 0 0 15px 15px;
    z-index: 999;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
}

.mobileMenu.active {
    display: grid;
}

.mobileMenu a {
    padding: 10px 12px;
    margin: 4px 0;
    color: #fff;
    text-decoration: none;
    text-align: left;
    display: block;
    border-radius: 6px;
    font-size: 0.95em;
    transition: all 0.3s ease;
    background-color: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.mobileMenu a:hover {
    background-color: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.4);
    transform: translateX(5px);
}

/* Responsive Styles */
@media (max-width: 1300px) {
    .navigationLinksWrapper {
        display: none;
    }

    #mobileMenuButton {
        display: block;
    }

    .mobileMenu {
        display: none;
    }
}

/* Grid layouts for different screen sizes */
@media screen and (max-width: 800px) {
    .mobileMenu.active {
        grid-template-columns: repeat(2, 1fr);
        gap: 8px;
        padding: 12px;
    }
}

@media screen and (max-width: 600px) {
    .mobileMenu.active {
        grid-template-columns: repeat(3, 1fr);
        gap: 6px;
        padding: 8px;
    }
}

@media screen and (max-width: 400px) {
    .mobileMenu.active {
        grid-template-columns: repeat(4, 1fr);
        gap: 4px;
        padding: 6px;
    }
}

/* Handle small heights */
@media screen and (max-height: 10000px) {
    .mobileMenu.active {
        grid-template-columns: repeat(2, 1fr);
        gap: 4px;
        padding: 6px;
    }

    .mobileMenu a {
        padding: 6px;
        margin: 1px 0;
        font-size: 13px;
        min-height: 35px;
    }
}

/* Handle very small heights */
@media screen and (max-height: 400px) {
    .mobileMenu.active {
        grid-template-columns: repeat(4, 1fr);
        gap: 3px;
        padding: 4px;
    }

    .mobileMenu a {
        padding: 4px;
        margin: 1px 0;
        font-size: 12px;
        min-height: 30px;
    }
}
</style>

<nav class="topNavBar">
    <div class="navContainer">
        <!-- Desktop Navigation Links -->
        <div class="navigationLinksWrapper">
            <a id="navigationLink-generator" class="navigationLink" href="/">AI Generator</a>
            <a id="navigationLink-booru" class="navigationLink" href="/booru/?page=1&safety=sfw&sort=trending">Booru</a>
            <a id="navigationLink-leaderboard" class="navigationLink" href="/leaderboard?type=booru">Leaderboard</a>
            <a id="navigationLink-download" class="navigationLink" href="/download">Download</a>
            <a id="navigationLink-paypalshop" class="navigationLink" href="/paypal-shop">Buy Credits</a>
            <a id="navigationLink-metadata" class="navigationLink" href="/metadata">Metadata</a> 
            <a class="navigationLink" href="https://discord.gg/AvbQuRmh7t">Discord</a>
            <a id="navigationLink-suggestions" class="navigationLink" href="/suggestions">Suggestions</a>
            <a id="navigationLink-redeem" class="navigationLink" href="/redeem-code">Redeem</a>
            <% if (!session.loggedIn) { %>
                <a class="navigationLink" href="/login">Login</a>
            <% } else { %>
                <a class="navigationLink" href="/login">Link Accounts</a>
            <% } %>
            
        </div>

        <!-- Mobile Menu Button -->
        <button id="mobileMenuButton">☰</button>

        <!-- Mobile Dropdown Menu -->
        <div class="mobileMenu frosted" id="mobileMenu">
            <a href="/">AI Generator</a>
            <a href="/projects">Projects</a>
            <a href="/booru/?page=1&safety=sfw&sort=trending">Booru</a>
            <a href="/leaderboard?type=booru">Leaderboard</a>
            <a href="https://discord.gg/AvbQuRmh7t">Discord</a>
            <a href="/download">Download</a>
            <a href="/suggestions">Suggestions</a>
            <a href="/redeem-code">Redeem</a>
            <a href="/paypal-shop">Buy Credits</a>
            <% if (session.loggedIn) { %>
                <a href="/image-history">Image History</a>
                <a href="/booru/creator-stats">Creator Stats</a>
                <a href="/profile-upgrades">Profile Upgrades</a>
                <a href="/settings/">Settings</a>
                <a href="/login">Link</a>
            <% } else { %>
                <a href="/login">Login</a>
            <% } %>
        </div>
        <div id="creditsButtonDiv">
            <button id="creditsNav">Credits: <span id="creditsDisplay">0</span></button>
        </div>
        <div id="notificationsDiv">
            <button id="notificationsNav">🔔</button>
        </div>
        

        <% if (session.loggedIn) { %>
        <!-- User Profile Display -->
        <div id="userProfileDiv" class="userProfileDiv">
            <div class="profileDisplay" id="profileDisplay">
                <img id="userProfileImg" class="userProfileImg" src="http://www.jscammie.com/noimagefound.png" alt="Profile">
                <span id="userProfileUsername" class="userProfileUsername">User</span>
            </div>
            <div class="profileDropdown" id="profileDropdown">
                <div class="profileStats">
                    <div class="profileStat">
                        <span class="statLabel">Level:</span>
                        <span id="userProfileLevel" class="statValue">1</span>
                    </div>
                    <div class="profileStat">
                        <span class="statLabel">EXP:</span>
                        <span id="userProfileExp" class="statValue">0</span>
                    </div>
                </div>
                <div class="profileLinks">
                    <a href="/profile/<%=session.accountId%>" class="profileLink">My Profile</a>
                    <a href="/image-history" class="profileLink">Image History</a>
                    <a href="/booru/creator-stats" class="profileLink">Creator Stats</a>
                    <a href="/profile-upgrades" class="profileLink">Profile Upgrades</a>
                    <a href="/settings/" class="profileLink">Settings</a>
                    <div style="border-top: 1px solid var(--border-colour); margin: 8px 0; padding-top: 8px;"></div>
                    <button id="darkModeButton" class="profileLink darkModeButton">
                        <span id="darkModeIcon" class="darkModeIcon">🌙</span>
                        <span class="darkModeText">Dark Mode</span>
                    </button>
                    <div style="border-top: 1px solid var(--border-colour); margin: 8px 0; padding-top: 8px;"></div>
                    <!-- Provider Session Status -->
                    <div style="padding: 8px 12px; border-bottom: 1px solid var(--border-colour); margin-bottom: 8px;">
                        <div style="font-size: 0.8em; color: var(--text-colour); opacity: 0.7; margin-bottom: 4px;">Active Sessions:</div>
                        <div style="display: flex; gap: 4px; flex-wrap: wrap;">
                            <% if (session.discord) { %>
                                <span style="background-color: #7289DA; color: white; padding: 2px 6px; border-radius: 4px; font-size: 0.75em;">🎮 Discord</span>
                            <% } %>
                            <% if (session.google) { %>
                                <span style="background-color: #4285F4; color: white; padding: 2px 6px; border-radius: 4px; font-size: 0.75em;">🔍 Google</span>
                            <% } %>
                            <% if (!session.discord && !session.google) { %>
                                <span style="color: var(--text-colour); opacity: 0.6; font-size: 0.75em;">None active</span>
                            <% } %>
                        </div>
                    </div>
                    
                    <% if (session.accountId == 1039574722163249233 ) { %>
                        <a href="/admin/lora-preview-moderation" class="profileLink">Lora Preview Moderation</a>
                    <% } %>
                    <a href="/logout-all" class="profileLink">🚪 Logout All</a>
                </div>
            </div>
        </div>
        <% } %>

        <!-- Dark Mode Button -->
        <% if (session.loggedIn) { %>
            <button id="darkModeButton" style="display: none;">
                <span id="darkModeIcon">🌙</span>
            </button>
        <% } %>
    </div>
</nav>

<style>

    .creditsHowToSummary {
        background-color: rgba(0, 0, 0, 0.1);
        font-size: 18px;
        color: #ff9dfc;
        border-radius: 8px;
        padding: 8px;
        transition: all 0.3s ease;
        border: 2px solid rgba(255, 255, 255, 0.2);
    }

    .creditsHowToSummary:hover {
        background-color: rgba(0,0,0,0);
        border: 2px solid #ffffff;
    }

    /* User Profile Styles */
    .userProfileDiv {
        position: relative;
        margin-left: 10px;
    }

    .profileDisplay {
        display: flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
        padding: 5px 10px;
        border-radius: 20px;
        border: 1px solid var(--border-colour);
        background-color: var(--background-colour);
        transition: all 0.3s ease;
    }

    .profileDisplay:hover {
        background-color: var(--highlight-colour);
        border-color: var(--border-colour);
        transform: translateY(-1px);
    }

    .userProfileImg {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        object-fit: cover;
    }

    .userProfileUsername {
        color: white;
        font-weight: 500;
        max-width: 100px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .profileDropdown {
        position: absolute;
        top: 100%;
        right: 0;
        background-color: var(--background-colour);
        border: 1px solid var(--border-colour);
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 12px;
        min-width: 200px;
        z-index: 1000;
        display: none;
    }

    .userProfileDiv:hover .profileDropdown {
        display: none;
    }

    .profileStats {
        display: flex;
        justify-content: space-between;
        margin-bottom: 12px;
        padding-bottom: 12px;
        border-bottom: 1px solid var(--border-colour);
    }

    .profileStat {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .statLabel {
        font-size: 0.8em;
        color: var(--text-colour);
        opacity: 0.7;
    }

    .statValue {
        font-size: 1.1em;
        font-weight: bold;
        color: var(--text-colour);
    }

    .profileLinks {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .profileLink {
        color: var(--text-colour);
        text-decoration: none;
        padding: 8px 12px;
        border-radius: 4px;
        transition: background-color 0.3s ease;
        display: flex;
        align-items: center;
    }

    .profileLink:hover {
        background-color: var(--highlight-colour);
    }

    /* Dark Mode Button Styles */
    .darkModeButton {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background: none;
        border: none;
        width: 100%;
        text-align: left;
        padding: 8px 12px;
        color: var(--text-colour);
        cursor: pointer;
        transition: background-color 0.3s ease;
        font-size: 1em;
        font-family: inherit;
    }

    .darkModeButton:hover {
        background-color: var(--highlight-colour);
    }

    .darkModeIcon {
        font-size: 1.2em;
        margin-right: 8px;
        transition: transform 0.3s ease;
    }

    .darkModeText {
        flex: 1;
    }

    .darkModeButton:hover .darkModeIcon {
        transform: rotate(15deg);
    }

    /* Show dropdown when profileDisplay is clicked */
    .profileDisplay.active + .profileDropdown {
        display: block;
    }

    /* Mobile Profile Styles - can be removed since we're not using them anymore */
    .mobileProfileSection {
        display: none;
    }

    /* Make sure user profile in navbar is visible on all screen sizes */
    @media (max-width: 1300px) {
        .userProfileDiv {
            display: flex;
            margin-left: 5px;
        }
    }

    /* Ensure profile is visible and styled correctly on mobile */
    @media (max-width: 600px) {
        .userProfileDiv {
            margin-left: 5px;
            margin-right: 5px;
        }
        
        .profileDisplay {
            padding: 5px 8px;
        }
        
        .userProfileUsername {
            max-width: 60px;
        }
    }

    /* For very small screens, hide the username and just show the profile picture */
    @media (max-width: 400px) {
        .userProfileUsername {
            display: none;
        }
        
        .profileDisplay {
            padding: 5px;
        }
    }
</style>

<script>
    // User Profile Dropdown Functionality
    let profileDisplay = document.getElementById('profileDisplay');
    let profileDropdown = document.getElementById('profileDropdown');

    if (profileDisplay && profileDropdown) {
        // Toggle dropdown on click
        profileDisplay.addEventListener('click', (e) => {
            e.stopPropagation();
            profileDisplay.classList.toggle('active');
            profileDropdown.style.display = profileDisplay.classList.contains('active') ? 'block' : 'none';
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
            if (!profileDisplay.contains(e.target) && !profileDropdown.contains(e.target)) {
                profileDisplay.classList.remove('active');
                profileDropdown.style.display = 'none';
            }
        });

        // Close dropdown when pressing Escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && profileDisplay.classList.contains('active')) {
                profileDisplay.classList.remove('active');
                profileDropdown.style.display = 'none';
            }
        });
    }

    // Instead of redefining the function, call both functions in sequence
    function updateUserProfileAndDisplay() {
        console.log("Calling updateUserProfileAndDisplay");
        
        try {
            // Call updateUserProfile which is throttled and doesn't return a Promise
            updateUserProfile();
            
            // Schedule the display update separately with longer delay
            setTimeout(() => {
                try {
                    console.log("Running display update");
                    updateUserProfileDisplay();
                } catch (error) {
                    console.error("Error in delayed display update:", error);
                }
            }, 500); // Increased to 500ms
        } catch (error) {
            console.error("Error in updateUserProfileAndDisplay:", error);
        }
    }

    // Initialize profile display immediately and as backup on DOM load
    function initializeProfileDisplay() {
        console.log("Initializing profile display");
        
        // Set initial login state from server-side data
        const loginStateElement = document.getElementById('loggedIn');
        const serverLoginStateElement = document.getElementById('serverLoginState');
        
        if (loginStateElement && serverLoginStateElement) {
            loginStateElement.textContent = serverLoginStateElement.textContent;
        }
        
        // Try immediate profile update
        updateUserProfileAndDisplay();
        
        // Start the dailies timer if user is logged in and has profile data
        if (sessionData.loggedIn && userProfileNavigation) {
            startDailiesTimer();
        }
    }

    // Execute immediately if possible, otherwise wait for DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            console.log("DOM loaded, initializing profile display");
            initializeProfileDisplay();
            
            // Backup update with small delay for elements that might load async
            setTimeout(() => {
                console.log("Running backup initialization");
                updateUserProfileAndDisplay();
            }, 200);
        });
    } else {
        // DOM is already loaded, initialize immediately
        initializeProfileDisplay();
        
        // Small backup delay for any async elements
        setTimeout(() => {
            updateUserProfileAndDisplay();
        }, 100);
    }

    // Clean up timers when the page is about to unload
    window.addEventListener('beforeunload', () => {
        stopDailiesTimer();
        // Clean up any existing intervals
        intervalIds.forEach(id => clearInterval(id));
    });
</script>

<script>
    // if the current page is one of the navigation links, then highlight it by setting it to :focus :
    let currentPath = window.location.pathname;

    if (currentPath.includes('booru')) {
        currentPath = currentPath.split('/')
        currentPath = `/${currentPath[1]}`
    } else if (currentPath.includes('leaderboard')) {
        currentPath = '/leaderboard'
    }

    let accountId = '<%=session.accountId%>'

    switch(currentPath) {
    
        case '/metadata':
            document.getElementById('navigationLink-metadata').classList.add('navigationLinkActive');
            break;

        case '/leaderboard':
            document.getElementById('navigationLink-leaderboard').classList.add('navigationLinkActive');
            break;
        
        case '/':
            document.getElementById('navigationLink-generator').classList.add('navigationLinkActive');
            break;

        case '/booru/?page=1&safety=sfw&sort=trending':
            document.getElementById('navigationLink-booru').classList.add('navigationLinkActive');
            break;

        case '/download/':
            document.getElementById('navigationLink-download').classList.add('navigationLinkActive');
            break;

        case '/suggestions':
            document.getElementById('navigationLink-suggestions').classList.add('navigationLinkActive');
            break;

        case '/redeem-code':
            document.getElementById('navigationLink-redeem').classList.add('navigationLinkActive');
            break;

        case '/paypal-shop':
            document.getElementById('navigationLink-paypalshop').classList.add('navigationLinkActive');
            break;

        case '/image-history':
            document.getElementById('navigationLink-history').classList.add('navigationLinkActive');
            break;

        case `/profile/${accountId}`:
            document.getElementById('navigationLink-profile').classList.add('navigationLinkActive');
            break;
    }

</script>

<script>
    // center the credits text every few seconds:
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // event listeners for the creditsNav button to show the navigationOverlay and the notificationsPopup:
    document.getElementById('creditsNav').addEventListener('click', () => {
        if (document.getElementById('creditsDailyPopup').style.display == 'none') {
            showHideCreditsPopup('show');
        } else {
            showHideCreditsPopup('hide');
        }
    });

</script>


<style>
    #topSiteText {
        background-color: rgba(0, 0, 0, 0.2);
        color: white;
        padding: 5px;
        text-align: center;
        font-size: 1em;
        font-weight: bold;
        margin-top: 0;
    }
</style>

<div id="topSiteText"></div>

<script>
    let topSiteTextArray = [
        {
            message: "Check out the <a id='advert-link-colour' href='https://www.jscammie.com/booru/?page=1&safety=sfw&sort=trending'>'Booru'</a> for some cool user-created images & to earn credits!",
            linkcolour: "rgba(0, 255, 38, 1)",
            active: true
        },
        {
            message: "We are currently doing a contest on the <a id='advert-link-colour' href='https://www.discord.gg/AvbQuRmh7t'>'Discord'</a> for 70,000 credits! Join now to participate!",
            linkcolour: "rgba(0, 100, 255, 1)",
            active: true
        },
        // {
        //     message: "Check out the <a id='advert-link-colour' href='https://www.discord.gg/AvbQuRmh7t'>'Discord'</a> to compete in contests for credits and more!",
        //     linkcolour: "rgba(0, 100, 255, 1)",
        //     active: false
        // },
    ]

    let topSiteText = document.getElementById('topSiteText');

    // set the topSiteText to a random element from the array:
    // topSiteText.innerHTML = topSiteTextArray[Math.floor(Math.random() * topSiteTextArray.length)];

    function randomIndex(array) {
        // remove non active arrays:
        array = array.filter(element => element.active == true);
        return Math.floor(Math.random() * array.length);
    }

    // have the topSiteText change every 25 seconds:
    let topSiteTextIndex = randomIndex(topSiteTextArray);

    function changeTopSiteText() {
        topSiteTextIndex = randomIndex(topSiteTextArray);
        topSiteText.innerHTML = topSiteTextArray[topSiteTextIndex].message;
        document.getElementById('advert-link-colour').style.color = topSiteTextArray[topSiteTextIndex].linkcolour;
    }

    setInterval(() => {
        changeTopSiteText();
    }, 25000);

    changeTopSiteText();

</script>

<script>
    // Mobile Menu Toggle with improved animation
    const mobileMenuButton = document.getElementById('mobileMenuButton');
    const mobileMenu = document.getElementById('mobileMenu');
    const navigationOverlay = document.getElementById('navigationOverlay');

    function toggleMobileMenu() {
        mobileMenuButton.classList.toggle('active');
        mobileMenu.classList.toggle('active');
        navigationOverlay.style.display = mobileMenu.classList.contains('active') ? 'block' : 'none';
        
        // Prevent body scrolling when menu is open
        document.body.style.overflow = mobileMenu.classList.contains('active') ? 'hidden' : '';
    }

    mobileMenuButton.addEventListener('click', toggleMobileMenu);

    // Close menu when clicking overlay
    navigationOverlay.addEventListener('click', () => {
        if (mobileMenu.classList.contains('active')) {
            toggleMobileMenu();
        }
    });

    // Close menu when clicking a link
    mobileMenu.querySelectorAll('a').forEach(link => {
        link.addEventListener('click', () => {
            if (mobileMenu.classList.contains('active')) {
                toggleMobileMenu();
            }
        });
    });

    // Handle orientation change
    window.addEventListener('orientationchange', () => {
        if (mobileMenu.classList.contains('active')) {
            toggleMobileMenu();
        }
    });

    // Close menu on escape key
    document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && mobileMenu.classList.contains('active')) {
            toggleMobileMenu();
        }
    });
</script>

<div id="notificationsPopup" style="display: none;">
    <div class="notification-header-section">
        <h2>🔔 Notifications</h2>
        <div class="notification-stats">
            <span id="notificationCount">0 notifications</span>
            <span id="unreadCount">0 unread</span>
        </div>
    </div>
    <div class="notificationList" id="notificationsList">
        <p>No notifications</p>
    </div>
    <div class="notification-actions">
        <button id="loadNotificationsButton">Load more</button>
        <button id="markAllReadButton">Mark all read</button>
        <button id="clearAllButton">Clear all forever</button>
    </div>
</div>

<style>

    .activeNotificationsPopup {
        display: block !important;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: var(--background-colour);
        color: white;
        padding: 8px;
        border-radius: 12px;
        border: 2px solid rgb(255, 143, 246);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        z-index: 1000;
        max-width: 600px;
        width: 75%;
    }

    .notification-header-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 12px;
        padding-bottom: 12px;
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }

    .notification-header-section h2 {
        margin: 0;
        font-size: 20px;
    }

    .notification-stats {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        font-size: 12px;
        opacity: 0.8;
    }

    .notification-stats span {
        margin: 2px 0;
    }

    .notification-actions {
        display: flex;
        gap: 8px;
        margin-top: 12px;
        padding-top: 12px;
        border-top: 1px solid rgba(255, 255, 255, 0.2);
        justify-content: space-between;
    }

    .notification-actions button {
        background-color: rgba(0, 0, 0, 0.2);
        color: white;
        padding: 8px 12px;
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 6px;
        cursor: pointer;
        font-size: 12px;
        transition: all 0.3s ease;
        flex: 1;
        margin: 0 2px;
    }

    .notification-actions button:hover {
        background-color: var(--highlight-colour-hover);
        transform: translateY(-1px);
    }

    .notification {
        display: flex;
        flex-direction: column;
        margin: 8px;
        padding: 12px;
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 8px;
        position: relative;
        transition: all 0.3s ease;
    }

    .notification:hover {
        border-color: rgba(255, 255, 255, 0.4);
        transform: translateY(-1px);
    }

    .notification-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .notification-controls {
        display: flex;
        gap: 8px;
        align-items: center;
    }

    .notification-action, .notification-dismiss {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.3);
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 12px;
        transition: all 0.2s ease;
    }

    .notification-action:hover {
        background: rgba(0, 123, 255, 0.3);
        border-color: rgba(0, 123, 255, 0.5);
    }

    .notification-dismiss:hover {
        background: rgba(255, 0, 0, 0.3);
        border-color: rgba(255, 0, 0, 0.5);
    }

    .notification-read {
        opacity: 0.7;
        border-color: rgba(255, 255, 255, 0.1);
    }

    .notification-unread {
        box-shadow: 0 0 8px rgba(255, 157, 252, 0.3);
    }

    .notification-metadata {
        margin-top: 8px;
        padding-top: 8px;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        color: rgba(255, 255, 255, 0.7);
    }

    .notificationType {
        font-size: 14px;
        color: #ffffff;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .notificationMessage {
        font-size: 16px;
        line-height: 1.4;
    }

    .notificationList {
        display: flex;
        flex-direction: column;
        height: 40vh;
        overflow-y: scroll;
    }

    .loading-more-notifications {
        text-align: center;
        padding: 10px;
        color: rgba(255, 255, 255, 0.6);
        font-style: italic;
    }

    #notificationsNav {
        transition: all 0.5s ease;
        position: relative;
    }

    .notifications-loading {
        opacity: 0.6;
    }

    .notifications-loading::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 12px;
        height: 12px;
        margin: -6px 0 0 -6px;
        border: 2px solid transparent;
        border-top: 2px solid #fff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .notification-badge {
        position: absolute;
        top: -8px;
        right: -8px;
        background: #ff4444;
        color: white;
        border-radius: 50%;
        padding: 2px 6px;
        font-size: 11px;
        font-weight: bold;
        min-width: 18px;
        height: 18px;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1001;
        animation: pulse 2s infinite;
    }

    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.1); }
        100% { transform: scale(1); }
    }




    .notification-credits {
        background-color: rgba(0, 38, 255, 0.2) !important;
    }

    .notification-credits:hover {
        background-color: rgba(0, 38, 255, 0.4) !important;
    }




    .notification-moderation {
        background-color: rgba(255, 0, 0, 0.2) !important;
    }

    .notification-moderation:hover {
        background-color: rgba(255, 0, 0, 0.4) !important;
    }



    .notification-booru {
        background-color: rgba(0, 255, 38, 0.2) !important;
    }

    .notification-booru:hover {
        background-color: rgba(0, 255, 38, 0.4) !important;
    }




    .notification-generator {
        background-color: rgba(119, 0, 255, 0.2) !important;
    }

    .notification-generator:hover {
        background-color: rgba(119, 0, 255, 0.4) !important;
    }




    .notification-dailies {
        background-color: rgba(255, 255, 0, 0.2) !important;
    }

    .notification-dailies:hover {
        background-color: rgba(255, 255, 0, 0.4) !important;
    }

</style>


<script>
    let notificationsPopup = document.getElementById('notificationsPopup');
    let notificationsList = document.getElementById('notificationsList');
    let loadNotificationsButton = document.getElementById('loadNotificationsButton');

    // send a post request to get-notifications to get the notifications:
    let notificationsReceived = []

    let notificationsArray = []
    let notificationsChecked = '<%=session.notificationsChecked%>'
    let unreadNotificationCount = 0
    let notificationSkip = 0
    let hasMoreNotifications = true
    let loadingMoreNotifications = false

    // Preload notifications from server-side rendering for instant display
    <% if (typeof preloadedNotifications !== 'undefined' && preloadedNotifications.length > 0) { %>
        let preloadedNotifications = <%- JSON.stringify(preloadedNotifications) %>;
        
        // Add preloaded notifications to the array immediately
        preloadedNotifications.forEach(notification => {
            if (!notificationsReceived.includes(notification.notificationId)) {
                notificationsReceived.push(notification.notificationId);
                notificationsArray.push(notification);
            }
        });
        
        // Use server-provided unread count for accuracy
        <% if (typeof preloadedUnreadCount !== 'undefined') { %>
            unreadNotificationCount = <%= preloadedUnreadCount %>;
        <% } else { %>
            unreadNotificationCount = preloadedNotifications.filter(n => !n.read).length;
        <% } %>
        
        // Display preloaded notifications immediately
        setTimeout(() => {
            buildNotificationsFromArray(notificationsChecked, unreadNotificationCount);
        }, 50); // Very small delay to ensure DOM elements exist
    <% } %>

    let notificationCount = 0

    function buildNotificationsFromArray(newNotificationsChecked, unreadCount = 0) {
        
        Number(notificationsChecked)

        notificationsChecked = newNotificationsChecked ?? notificationsChecked
        unreadNotificationCount = unreadCount;

        // Update the notification badge
        updateNotificationBadge();

        // Update notification counts in popup header
        updateNotificationCounts();

        if (notificationsArray.length == 0) {
            notificationsList.innerHTML = "<p>No notifications</p>";
        }

        // have the notificationsButton pulse background color if there are new notifications:
        if (notificationsArray.length > 0) {
            if (notificationsArray[0].timestamp > notificationsChecked) {
                // have a timeout to make the background color pulse, but make sure the background color is reset after the timeout:
                notificationsNav = document.getElementById('notificationsNav');
                notificationsNav.style.backgroundColor = 'rgba(255, 0, 0, 0.7)';
                setTimeout(() => {
                    notificationsNav.style.backgroundColor = 'rgba(0, 0, 0, 0.2)';
                }, 750);
            }
        }

        // if the notifications havent changed, then don't update the notificationsList
        if (notificationCount == notificationsArray.length) {
            return;
        } else {
            notificationsList.innerHTML = "";
        }

        if (notificationsArray.length > 0) {
            notificationCount = notificationsArray.length
        }

        notificationsArray.forEach(notification => {
            // Enhanced notification HTML with priority indicators and action buttons
            const priorityIcon = getPriorityIcon(notification.priority || 'normal');
            const readClass = notification.read ? 'notification-read' : 'notification-unread';
            const actionButton = notification.actionUrl ? 
                `<button class="notification-action" onclick="handleNotificationAction('${notification.notificationId}', '${notification.actionUrl}')">View</button>` : '';
            
            notificationHTML = `
                <div class="notification notification-${notification.type} ${readClass}" data-notification-id="${notification.notificationId}">
                    <div class="notification-header">
                        <div class="notificationType">
                            ${priorityIcon} ${notification.type} | ${new Date(Number(notification.timestamp)).toLocaleString()}
                        </div>
                        <div class="notification-controls">
                            ${actionButton}
                            <button class="notification-dismiss" onclick="dismissNotification('${notification.notificationId}')">✕</button>
                        </div>
                    </div>
                    <div class="notificationMessage">${notification.message}</div>
                    ${notification.metadata && notification.metadata.groupedCount ? 
                        `<div class="notification-metadata">
                            <small>Grouped: ${notification.metadata.groupedCount} notifications</small>
                        </div>` : ''}
                </div>
            `

            notificationsList.innerHTML += notificationHTML;
        });

        // Add load more indicator if there are more notifications
        if (hasMoreNotifications && !loadingMoreNotifications) {
            const loadMoreIndicator = document.createElement('div');
            loadMoreIndicator.className = 'loading-more-notifications';
            loadMoreIndicator.id = 'loadMoreIndicator';
            loadMoreIndicator.innerHTML = '• • • Scroll to load more • • •';
            notificationsList.appendChild(loadMoreIndicator);
        }

        // Add infinite scroll listener to notifications list
        setupInfiniteScroll();
    }

    function setupInfiniteScroll() {
        const notificationsList = document.getElementById('notificationsList');
        if (!notificationsList) return;

        // Remove existing listener
        notificationsList.removeEventListener('scroll', handleInfiniteScroll);
        
        // Add new listener
        notificationsList.addEventListener('scroll', handleInfiniteScroll);
    }

    function handleInfiniteScroll() {
        const notificationsList = document.getElementById('notificationsList');
        if (!notificationsList || loadingMoreNotifications || !hasMoreNotifications) return;

        const scrollTop = notificationsList.scrollTop;
        const scrollHeight = notificationsList.scrollHeight;
        const clientHeight = notificationsList.clientHeight;

        // Load more when within 100px of bottom
        if (scrollTop + clientHeight >= scrollHeight - 100) {
            loadMoreNotifications();
        }
    }

    function loadMoreNotifications() {
        if (loadingMoreNotifications || !hasMoreNotifications) return;

        const loadMoreIndicator = document.getElementById('loadMoreIndicator');
        if (loadMoreIndicator) {
            loadMoreIndicator.innerHTML = 'Loading more notifications...';
        }

        getNotifications(true);
    }

    // Helper function to get priority icon
    function getPriorityIcon(priority) {
        switch(priority) {
            case 'urgent': return '🚨';
            case 'high': return '❗';
            case 'normal': return '📢';
            case 'low': return '💬';
            default: return '📢';
        }
    }

    // Update notification badge/counter
    function updateNotificationBadge() {
        const notificationsNav = document.getElementById('notificationsNav');
        const existingBadge = document.querySelector('.notification-badge');
        
        if (existingBadge) {
            existingBadge.remove();
        }

        // Always show badge if there are unread notifications, regardless of age
        if (unreadNotificationCount > 0) {
            const badge = document.createElement('span');
            badge.className = 'notification-badge';
            badge.textContent = unreadNotificationCount > 999 ? '999+' : unreadNotificationCount;
            badge.title = `${unreadNotificationCount} unread notification${unreadNotificationCount === 1 ? '' : 's'}`;
            notificationsNav.appendChild(badge);
        }
    }

    // Update notification counts in popup header
    function updateNotificationCounts() {
        const notificationCountElement = document.getElementById('notificationCount');
        const unreadCountElement = document.getElementById('unreadCount');
        
        if (notificationCountElement) {
            const totalCount = notificationsArray.length;
            notificationCountElement.textContent = `${totalCount} notification${totalCount === 1 ? '' : 's'}`;
        }
        
        if (unreadCountElement) {
            unreadCountElement.textContent = `${unreadNotificationCount} unread`;
            unreadCountElement.style.color = unreadNotificationCount > 0 ? '#ff4444' : 'rgba(255, 255, 255, 0.6)';
        }
    }

    // Handle notification action clicks
    function handleNotificationAction(notificationId, actionUrl) {
        // Mark as read when action is clicked
        markNotificationAsRead([notificationId]);
        
        // Open the action URL
        if (actionUrl.startsWith('http')) {
            window.open(actionUrl, '_blank');
        } else {
            window.location.href = actionUrl;
        }
    }

    // Dismiss individual notification
    async function dismissNotification(notificationId) {
        try {
            const response = await fetch('/dismiss-notifications', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ notificationIds: [notificationId] })
            });

            if (response.ok) {
                // Remove from local array
                notificationsArray = notificationsArray.filter(n => n.notificationId !== notificationId);
                notificationsReceived.push(notificationId);
                
                // Rebuild the display
                buildNotificationsFromArray(notificationsChecked, unreadNotificationCount - 1);
            }
        } catch (error) {
            console.error('Error dismissing notification:', error);
        }
    }

    // Mark notifications as read
    async function markNotificationAsRead(notificationIds) {
        try {
            await fetch('/mark-notifications-read', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ notificationIds })
            });
        } catch (error) {
            console.error('Error marking notifications as read:', error);
        }
    }

    function getNotifications(loadMore = false, refreshOnly = false) {
        // Skip if not logged in or if the request is already in progress
        if (document.getElementById('loggedIn')?.textContent !== 'true' || window.notificationsRequestInProgress) {
            return Promise.resolve();
        }

        // If loading more but no more notifications available, skip
        if (loadMore && (!hasMoreNotifications || loadingMoreNotifications)) {
            return Promise.resolve();
        }
        
        window.notificationsRequestInProgress = true;
        if (loadMore) {
            loadingMoreNotifications = true;
        }
        
        // Show loading indicator only for full refreshes, not refreshOnly checks
        const notificationsNav = document.getElementById('notificationsNav');
        if (notificationsNav && !loadMore && !refreshOnly) {
            notificationsNav.classList.add('notifications-loading');
        }
        
        // Add timeout to the fetch request - shorter for faster loading
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 second timeout
        
        const currentSkip = loadMore ? notificationSkip : 0;
        
        return fetch('/get-notifications', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                notificationsReceived,
                popupOpened: document.getElementById('notificationsPopup')?.classList.contains('activeNotificationsPopup') || false,
                skip: currentSkip,
                refreshOnly: refreshOnly
            }),
            signal: controller.signal
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            // Only reset the array for full refreshes or when loading more
            // Don't reset for refreshOnly checks to prevent clearing existing notifications
            if (!loadMore && !refreshOnly) {
                console.log("Full refresh: clearing existing notifications");
                notificationsArray = [];
                notificationsReceived = [];
                notificationSkip = 0;
            } else if (refreshOnly) {
                console.log("Refresh-only mode: preserving existing notifications");
            }

            data.notifications.forEach(notification => {
                if (!notificationsReceived.includes(notification.notificationId)) {
                    notificationsReceived.push(notification.notificationId);
                    notificationsArray.push(notification);
                }
            });

            // Update pagination info
            hasMoreNotifications = data.hasMore || false;
            notificationSkip += data.notifications.length;

            // Sort by priority first, then timestamp (urgent notifications at top)
            notificationsArray.sort((a, b) => {
                const priorityOrder = { 'urgent': 4, 'high': 3, 'normal': 2, 'low': 1 };
                const aPriority = priorityOrder[a.priority] || 2;
                const bPriority = priorityOrder[b.priority] || 2;
                
                if (aPriority !== bPriority) {
                    return bPriority - aPriority;
                }
                return b.timestamp - a.timestamp;
            });

            buildNotificationsFromArray(data.notificationsChecked, data.unreadCount);
            return data;
        })
        .catch(error => {
            // Don't log AbortError as it's expected when timeout occurs
            if (error.name !== 'AbortError') {
                console.error("Error fetching notifications:", error);
            }
            return null;
        })
        .finally(() => {
            clearTimeout(timeoutId);
            window.notificationsRequestInProgress = false;
            loadingMoreNotifications = false;
            
            // Remove loading indicator
            const notificationsNav = document.getElementById('notificationsNav');
            if (notificationsNav && !loadMore && !refreshOnly) {
                notificationsNav.classList.remove('notifications-loading');
            }
        });
    }

    // add an event listener to the notifications button:
    document.getElementById('notificationsNav').addEventListener('click', () => {
        if (!notificationsPopup.classList.contains('activeNotificationsPopup')) {
            notificationsPopup.classList.add('activeNotificationsPopup');
        } else {
            notificationsPopup.classList.remove('activeNotificationsPopup');
        }
    });

    document.addEventListener('click', function (event) {
        var isClickInside = document.getElementById('notificationsPopup').contains(event.target);
        var isClickOnButton = document.getElementById('notificationsNav').contains(event.target);
        if (!isClickInside && !isClickOnButton) {
            document.getElementById('notificationsPopup').classList.remove('activeNotificationsPopup');
        }
    });

    <% if (session.loggedIn) { %>
        document.getElementById('loadNotificationsButton').addEventListener('click', () => {
            loadMoreNotifications();
        });

        // Mark ALL notifications as read (database-wide)
        document.getElementById('markAllReadButton').addEventListener('click', async () => {
            try {
                const response = await fetch('/mark-all-notifications-read', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                if (response.ok) {
                    // Mark all local notifications as read
                    notificationsArray.forEach(notification => {
                        notification.read = true;
                    });
                    unreadNotificationCount = 0;
                    buildNotificationsFromArray(notificationsChecked, 0);
                    
                    // Refresh notifications to get updated read status
                    setTimeout(() => {
                        notificationSkip = 0;
                        hasMoreNotifications = true;
                        getNotifications();
                    }, 500);
                }
            } catch (error) {
                console.error('Error marking all notifications as read:', error);
            }
        });

        // Clear ALL notifications (database-wide)
        document.getElementById('clearAllButton').addEventListener('click', async () => {
            if (confirm('Are you sure you want to clear ALL notifications? This will delete every notification you have ever received and cannot be undone.')) {
                try {
                    const response = await fetch('/clear-all-notifications', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });

                    if (response.ok) {
                        const data = await response.json();
                        
                        // Clear local arrays
                        notificationsArray = [];
                        notificationsReceived = [];
                        unreadNotificationCount = 0;
                        notificationSkip = 0;
                        hasMoreNotifications = false;
                        
                        buildNotificationsFromArray(notificationsChecked, 0);
                        
                        // Show success message
                        alert(`Successfully cleared ${data.deletedCount} notifications`);
                    }
                } catch (error) {
                    console.error('Error clearing all notifications:', error);
                }
            }
        });

        getNotifications();

        setInterval(() => {
            // Only refresh if we're at the top (don't interrupt infinite scroll)
            // Check for new notifications without clearing existing ones
            if (notificationSkip === 0 || notificationsArray.length < 15) {
                // Don't clear existing notifications, just check for new ones
                getNotifications(false, true); // Add refreshOnly parameter
            }
        }, 15000); // Slightly longer interval to not interfere with scrolling
    <% } %>

</script>

<div id="creditsDailyPopup" class="credits-popup" style="display: none;">
    <div class="credits-dailies-grid">
        <div class="credits-daily-item">
            <button id="3hrCreditsButton" class="credits-daily-btn">
                <div class="credits-daily-time">3h</div>
                <div class="credits-daily-amount">+50</div>
                <div class="credits-daily-status" id="3hrCreditsButtonTimeLeft">Loading...</div>
            </button>
        </div>
        <div class="credits-daily-item">
            <button id="12hrCreditsButton" class="credits-daily-btn">
                <div class="credits-daily-time">12h</div>
                <div class="credits-daily-amount">+100</div>
                <div class="credits-daily-status" id="12hrCreditsButtonTimeLeft">Loading...</div>
            </button>
        </div>
        <div class="credits-daily-item">
            <button id="24hrCreditsButton" class="credits-daily-btn">
                <div class="credits-daily-time">24h</div>
                <div class="credits-daily-amount">+200</div>
                <div class="credits-daily-status" id="24hrCreditsButtonTimeLeft">Loading...</div>
            </button>
        </div>
        <div class="credits-daily-item">
            <button id="168hrCreditsButton" class="credits-daily-btn">
                <div class="credits-daily-time">7d</div>
                <div class="credits-daily-amount">+500</div>
                <div class="credits-daily-status" id="168hrCreditsButtonTimeLeft">Loading...</div>
            </button>
        </div>
    </div>
    <div class="credits-popup-header">
        <div class="credits-popup-balance">
            <span class="credits-popup-balance-label">Your Credits</span>
            <span class="credits-popup-balance-count" id="creditsPopupDisplay">0</span>
        </div>
        <div class="credits-popup-actions">
            <button class="credits-popup-buy-btn" onclick="window.open('/paypal-shop', '_blank')">
                <i class="fas fa-shopping-cart"></i> Buy Credits
            </button>
            <button class="credits-popup-history-btn" onclick="window.open('/credits-history', '_blank')">View Credits History</button>
        </div>
    </div>
    <div class="credits-popup-section">
        <details class="credits-details">
            <summary class="credits-summary">How to Earn Credits</summary>
            <ul class="credits-popup-list">
                <li><b>Daily Rewards:</b> Claim free credits every 3h, 12h, 24h, and weekly from the generator page.</li>
                <li><b>Booru Engagement:</b> Earn credits by posting, upvoting, and commenting on images in the <a href="/booru/?page=1&safety=sfw&sort=trending">Booru</a>.</li>
                <li><b>Contests:</b> Participate in site or Discord contests for large credit prizes.</li>
                <li><b>Purchase:</b> Buy credits instantly in the <a href="/paypal-shop">PayPal Shop</a> (best value in bulk).</li>
            </ul>
        </details>
    </div>
    <div class="credits-popup-section">
        <details class="credits-details">
            <summary class="credits-summary">What Can Credits Buy?</summary>
            <ul class="credits-popup-list">
                <li><b>Upgrades & Extras:</b> Spend credits for upscaling, watermark removal, skipping the queue, and more.</li>
                <li><b>Expanded Image History:</b> Unlock more image history slots for your account.</li>
            </ul>
        </details>
    </div>
    <div class="credits-popup-footer">
        <span class="credits-popup-tip">Tip: The more you participate, the more you earn!</span>
    </div>
</div>

<style>

/* add a blur and darken effect to anything behind the creditsDailyPopup, also add a clean transition: */
    .credits-popup {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: linear-gradient(135deg, rgba(40,0,60,0.98) 0%, rgba(60,0,80,0.98) 100%);
        color: #fff;
        padding: 24px;
        border-radius: 18px;
        border: 2px solid #ff9dfc;
        box-shadow: 0 8px 32px rgba(0,0,0,0.45);
        z-index: 2000;
        max-width: 520px;
        width: 92vw;
        max-height: 85vh;
        overflow-y: auto;
        font-family: 'Segoe UI', 'Arial', sans-serif;
        animation: fadeInCreditsPopup 0.3s;
    }
    
    .credits-dailies-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 12px;
        margin-bottom: 24px;
    }
    
    .credits-daily-item {
        display: flex;
        flex-direction: column;
    }
    
    .credits-daily-btn {
        background: linear-gradient(135deg, rgba(255,157,252,0.15) 0%, rgba(162,0,255,0.15) 100%);
        border: 1px solid rgba(255,157,252,0.4);
        border-radius: 12px;
        padding: 12px 8px;
        color: #fff;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 4px;
        min-height: 80px;
        justify-content: center;
    }
    
    .credits-daily-btn:hover {
        background: linear-gradient(135deg, rgba(255,157,252,0.25) 0%, rgba(162,0,255,0.25) 100%);
        border-color: rgba(255,157,252,0.7);
        transform: translateY(-2px) scale(1.02);
    }
    
    .credits-daily-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none !important;
    }
    
    .credits-daily-time {
        font-size: 1.1em;
        font-weight: 600;
        color: #ff9dfc;
    }
    
    .credits-daily-amount {
        font-size: 1.3em;
        font-weight: bold;
        color: #fff;
        text-shadow: 0 1px 4px rgba(162,0,255,0.5);
    }
    
    .credits-daily-status {
        font-size: 0.75em;
        color: rgba(255,255,255,0.8);
        text-align: center;
        line-height: 1.2;
    }
    @keyframes fadeInCreditsPopup {
        from { opacity: 0; transform: translate(-50%, -60%); }
        to { opacity: 1; transform: translate(-50%, -50%); }
    }
    .credits-popup-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 20px;
        padding-bottom: 16px;
        border-bottom: 1px solid rgba(255,157,252,0.2);
    }
    .credits-popup-balance {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }
    .credits-popup-balance-label {
        font-size: 1em;
        color: #ff9dfc;
        font-weight: 500;
        margin-bottom: 2px;
    }
    .credits-popup-balance-count {
        font-size: 2em;
        font-weight: bold;
        color: #fff;
        letter-spacing: 1px;
        text-shadow: 0 2px 8px #a200ff44;
    }
    .credits-popup-history-btn {
        background: linear-gradient(90deg, #ff9dfc 0%, #a200ff 100%);
        color: #fff;
        border: none;
        border-radius: 8px;
        padding: 8px 16px;
        font-size: 0.9em;
        font-weight: 500;
        cursor: pointer;
        box-shadow: 0 2px 8px #a200ff33;
        transition: background 0.2s, transform 0.2s;
    }
    .credits-popup-history-btn:hover {
        background: linear-gradient(90deg, #a200ff 0%, #ff9dfc 100%);
        transform: translateY(-2px) scale(1.04);
    }
    .credits-popup-actions {
        display: flex;
        gap: 12px;
        align-items: center;
        justify-content: center;
        margin-top: 12px;
    }
    .credits-popup-buy-btn {
        background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
        color: #fff;
        border: none;
        border-radius: 8px;
        padding: 10px 16px;
        font-size: 1.0em;
        font-weight: 600;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(76, 175, 80, 0.3);
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 6px;
        position: relative;
    }
    .credits-popup-buy-btn:hover {
        background: linear-gradient(135deg, #45a049 0%, #4CAF50 100%);
        transform: translateY(-2px) scale(1.02);
        box-shadow: 0 4px 12px rgba(76, 175, 80, 0.4);
    }
    .credits-popup-buy-btn:active {
        transform: translateY(-1px) scale(1.0);
    }
    .credits-popup-section {
        margin-bottom: 16px;
    }
    .credits-details {
        border: 1px solid rgba(255,157,252,0.2);
        border-radius: 8px;
        background: rgba(255,157,252,0.05);
        overflow: hidden;
    }
    .credits-summary {
        color: #ff9dfc;
        font-size: 1.1em;
        font-weight: 600;
        padding: 12px 16px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: all 0.2s ease;
        background: rgba(255,157,252,0.1);
        border-bottom: 1px solid rgba(255,157,252,0.2);
    }
    .credits-summary:hover {
        background: rgba(255,157,252,0.15);
    }
    .credits-summary:before {
        content: '▶';
        font-size: 0.8em;
        transition: transform 0.2s ease;
    }
    .credits-details[open] .credits-summary:before {
        transform: rotate(90deg);
    }
    .credits-details[open] .credits-summary {
        border-bottom-color: rgba(255,157,252,0.3);
    }
    .credits-popup-section h3 {
        color: #ff9dfc;
        font-size: 1.1em;
        margin-bottom: 10px;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 8px;
    }
    .credits-popup-section h3:before {
        content: '';
        width: 4px;
        height: 16px;
        background: linear-gradient(135deg, #ff9dfc 0%, #a200ff 100%);
        border-radius: 2px;
    }
    .credits-popup-list {
        list-style: none;
        padding: 16px;
        margin: 0;
        display: grid;
        gap: 8px;
    }
    .credits-popup-list li {
        font-size: 0.95em;
        line-height: 1.4;
        color: #fff;
        border-left: 3px solid #ff9dfc;
        padding: 8px 12px;
        background: rgba(255,157,252,0.08);
        border-radius: 6px;
        transition: all 0.2s ease;
    }
    .credits-popup-list li:hover {
        background: rgba(255,157,252,0.15);
        transform: translateX(2px);
    }
    .credits-popup-list a {
        color: #a200ff;
        text-decoration: underline;
        font-weight: 500;
        transition: color 0.2s;
    }
    .credits-popup-list a:hover {
        color: #ff9dfc;
    }
    .credits-popup-footer {
        text-align: center;
        margin-top: 16px;
        padding-top: 16px;
        border-top: 1px solid rgba(255,157,252,0.2);
    }
    .credits-popup-tip {
        color: #ff9dfc;
        font-size: 0.9em;
        font-style: italic;
        opacity: 0.85;
    }
    @media (max-width: 768px) {
        .credits-popup {
            padding: 20px 16px;
            max-width: 95vw;
            max-height: 90vh;
        }
        .credits-dailies-grid {
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
        }
        .credits-daily-btn {
            padding: 10px 6px;
            min-height: 70px;
        }
        .credits-daily-time {
            font-size: 1em;
        }
        .credits-daily-amount {
            font-size: 1.1em;
        }
        .credits-popup-balance-count {
            font-size: 1.6em;
        }
        .credits-popup-header {
            flex-direction: column;
            gap: 12px;
            align-items: stretch;
        }
        .credits-popup-balance {
            align-items: center;
        }
        .credits-popup-history-btn {
            width: 100%;
            padding: 10px;
        }
        .credits-popup-actions {
            flex-direction: column;
            gap: 10px;
        }
        .credits-popup-buy-btn {
            width: 100%;
            padding: 12px 16px;
            font-size: 0.95em;
        }
    }
    @media (max-width: 480px) {
        .credits-popup {
            padding: 16px 12px;
        }
        .credits-dailies-grid {
            grid-template-columns: repeat(2, 1fr);
            gap: 8px;
        }
        .credits-daily-btn {
            padding: 8px 4px;
            min-height: 60px;
        }
        .credits-daily-time {
            font-size: 0.9em;
        }
        .credits-daily-amount {
            font-size: 1em;
        }
        .credits-daily-status {
            font-size: 0.7em;
        }
        .credits-popup-section h3 {
            font-size: 1em;
        }
        .credits-popup-list li {
            font-size: 0.9em;
            padding: 6px 10px;
        }
        .credits-popup-buy-btn {
            width: 100%;
            padding: 10px 14px;
            font-size: 0.9em;
        }
    }
</style>


<script>

    // Show/hide popup and update credits count
    document.getElementById('creditsNav').addEventListener('click', () => {
        const popup = document.getElementById('creditsDailyPopup');
        const popupDisplay = document.getElementById('creditsPopupDisplay');
        const mainDisplay = document.getElementById('creditsDisplay');
        if (popup.style.display === 'none') {
            if (popupDisplay && mainDisplay) popupDisplay.textContent = mainDisplay.textContent;
            showHideCreditsPopup('show');
            popup.style.display = 'block';
        } else {
            showHideCreditsPopup('hide');
            popup.style.display = 'none';
        }
    });

    // Also update popup credits when credits change
    let creditsDisplay = document.getElementById('creditsDisplay');
    const observer = new MutationObserver(() => {
        const popupDisplay = document.getElementById('creditsPopupDisplay');
        if (popupDisplay) popupDisplay.textContent = creditsDisplay.textContent;
    });
    if (creditsDisplay) {
        observer.observe(creditsDisplay, { childList: true });
    }
</script>

<script>
    creditsDisplay = document.getElementById('creditsDisplay');

    // Helper function to ensure credits are always rounded down when displayed
    function updateCreditsDisplay(credits) {
        const roundedCredits = Math.floor(credits);
        if (creditsDisplay) {
            creditsDisplay.textContent = roundedCredits.toString();
        }
        return roundedCredits;
    }

    // every .1 seconds, check if the creditsDisplay value is higher or lower than the previous value:
    // the credits display is updated by other scripts:
    let previousCredits = 0;
    let currentCredits = 0;
    setInterval(() => {
        currentCredits = Math.floor(parseFloat(creditsDisplay.textContent) || 0);
        if (currentCredits > previousCredits) {
            creditsDisplay.style.color = 'green';
            setTimeout(() => {
                creditsDisplay.style.color = 'white';
            }, 1000);
        } else if (currentCredits < previousCredits) {
            creditsDisplay.style.color = 'red';
            setTimeout(() => {
                creditsDisplay.style.color = 'white';
            }, 1000);
        }
        previousCredits = currentCredits;
    }, 100);
</script>

<span hidden style="display: none;" id="loggedIn"></span>

<script>

    function sendDailiesRequest(type) {

        // check if the user is logged in, if not then don't send the request:
        if (document.getElementById('loggedIn').textContent == 'false') {
            return;
        }

        // make a request to post /dailies:
        fetch('/dailies', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: type
            })
        }).then(response => response.json())
            .then(data => {
                // console.log(data);
                // Update user profile display after claiming credits
                updateUserProfileAndDisplay();
            });
    }

    document.getElementById('3hrCreditsButton').addEventListener('click', () => {
        sendDailiesRequest('3hr');
    });

    document.getElementById('12hrCreditsButton').addEventListener('click', () => {
        sendDailiesRequest('12hr');
    });

    document.getElementById('24hrCreditsButton').addEventListener('click', () => {
        sendDailiesRequest('24hr');
    });

    document.getElementById('168hrCreditsButton').addEventListener('click', () => {
        sendDailiesRequest('168hr');
    });

    updateUserProfileAndDisplay()

</script>

<style>

    .dividingLine {
        background-color: rgb(255, 255, 255);
        box-shadow: 0 4px 15px rgba(255, 255, 255, 1);
        height: 2px;
    }
    
</style>

<div class="dividingLine"></div>





<script>

    function showHideNavigationOverlay(value) {
        if (value == 'show') {
            document.getElementById('navigationOverlay').style.display = 'block';
        } else if (value == 'hide') {
            document.getElementById('navigationOverlay').style.display = 'none';
        }
    }

    function showHideCreditsPopup(show) {
        if (show == 'show') {
            document.getElementById('creditsDailyPopup').style.display = 'block';
            showHideNavigationOverlay('show');
            
            // Ensure the timer is running and update credits display when popup is shown
            if (userProfileNavigation) {
                startDailiesTimer();
                // Update the credits display in the popup
                const creditsPopupDisplay = document.getElementById('creditsPopupDisplay');
                if (creditsPopupDisplay) {
                    creditsPopupDisplay.textContent = Math.floor(userProfileNavigation?.credits ?? 0).toString();
                }
            }
        } else if (show == 'hide') {
            document.getElementById('creditsDailyPopup').style.display = 'none';
            showHideNavigationOverlay('hide');
        }
    }

    // add an event listener to the navigationOverlay to hide it when clicked:
    document.getElementById('navigationOverlay').addEventListener('click', () => {
        showHideCreditsPopup('hide');
        document.getElementById('notificationsPopup').classList.remove('activeNotificationsPopup');
        document.getElementById('creditsDailyPopup').style.display = 'none';
    });

    // event listeners for the creditsNav button to show the navigationOverlay and the notificationsPopup:
    document.getElementById('creditsNav').addEventListener('click', () => {
        if (document.getElementById('creditsDailyPopup').style.display == 'none') {
            showHideCreditsPopup('show');
        } else {
            showHideCreditsPopup('hide');
        }
    });

    // add ESC keyboard event listener to hide the navigationOverlay and any other popups if active
    document.addEventListener('keydown', function (event) {
        if (event.key === "Escape") {
            showHideNavigationOverlay('hide');
            document.getElementById('notificationsPopup').classList.remove('activeNotificationsPopup');
            document.getElementById('creditsDailyPopup').style.display = 'none';
        }
    });

</script>


<style>
    .tooltiptext {
        visibility: hidden;
        opacity: 0;
        transition: visibility 0s, opacity 0.3s;
        /* make it take up no room on the page by default: */
        position: absolute;
        padding: 10px;
        margin: 10px;
        background-color: rgba(0, 0, 0, 0.5);
        color: rgb(255, 144, 144);
        
    }

    /* have a round border around the thingy: */

    .tooltip {
        cursor: pointer;
        border-radius: 50%;
        border: 1px solid rgb(255, 255, 255);
        width: 24px;
        height: 24px;
        display: inline-block;
        text-align: center;
        line-height: 24px;
    }

    .tooltip:hover {
        /* animate it wiggling and scaling up and down: */
        animation: wiggle 0.3s ease infinite;
        transition: transform 0.2s ease;
    }

    @keyframes wiggle {
        0% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.1);
        }
        100% {
            transform: scale(1);
        }
    }

</style>

<script>
    function showTooltip(element) {
        const tooltip = element.nextElementSibling;

        // tooltip state:
        if (tooltip.style.visibility === 'visible') {
            tooltip.style.opacity = '0';
            // wait 0.3 seconds then hide the tooltip:
            setTimeout(() => {
                tooltip.style.visibility = 'hidden';
                tooltip.style.position = 'absolute';
            }, 300)
            return;
        } else {
            tooltip.style.position = 'relative';
            tooltip.style.visibility = 'visible';
            tooltip.style.opacity = '1';
            // wait 5 seconds then hide the tooltip, but if they toggle the tooltip on and off reset the timeout:
            setTimeout(() => {
                tooltip.style.opacity = '0';
                setTimeout(() => {
                    tooltip.style.visibility = 'hidden';
                    tooltip.style.position = 'absolute';
                }, 300)
            }, 15000)
        }
    }
</script>


<style>

    /* have the alert be centered and ontop of everything: */
    .globalAlert {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        padding: 8px;
        border-radius: 12px;
        z-index: 90000;
        max-width: 600px;
        width: 75%;
        text-align: center;
        font-size: 24px;
    }

    .globalAlertButtons {
        display: flex;
        justify-content: center;
        gap: 10px;
    }

    .globalAlertButton {
        background-color: rgba(0, 0, 0, 0.2);
        color: white;
        padding: 8px;
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

</style>

<div id="globalAlert" class="globalAlert" style="display: none;">
    <p id="globalAlertText"></p>
</div>

<script>
    async function globalAlert(options) {
        let message = options.message || 'No message provided';
        let question = options.question || false;
        let optionFunctions = options.options || { yes: () => { }, no: () => { } };

        console.log("globalAlert function called with message: " + message);

        // Show the navigation overlay (assuming this function exists)
        showHideNavigationOverlay('show');

        // Return a Promise so you can await it
        return new Promise((resolve, reject) => {
            // If there is a question, show a custom confirm dialog:
            if (question) {
                // Show the globalAlert div:
                document.getElementById('globalAlert').style.display = 'block';
                document.getElementById('globalAlertText').textContent = message;

                // Create the buttons:
                let buttons = document.createElement('div');
                buttons.classList.add('globalAlertButtons');
                
                Object.keys(optionFunctions).forEach(key => {
                    let button = document.createElement('button');
                    // Capitalize the first letter of the key:
                    button.textContent = key.charAt(0).toUpperCase() + key.slice(1);
                    button.classList.add('globalAlertButton');
                    button.addEventListener('click', () => {
                        // Hide the globalAlert div and call the corresponding function:
                        document.getElementById('globalAlert').style.display = 'none';
                        // Hide the navigationOverlay:
                        showHideNavigationOverlay('hide');
                        optionFunctions[key]();
                        // Resolve the promise when a button is clicked
                        if (document.getElementsByClassName('globalAlertButtons').length > 0) {
                            document.getElementsByClassName('globalAlertButtons')[0].remove();
                        }
                        resolve(key);  // Resolve with the clicked option (yes/no)
                    });
                    buttons.appendChild(button);
                });

                // add the ability to use arrow keys and enter key to select the buttons:
                let buttonIndex = 0;
                document.addEventListener('keydown', (event) => {
                    if (event.key === 'ArrowRight' || event.key === 'ArrowDown') {
                        buttonIndex++;
                        if (buttonIndex >= buttons.children.length) {
                            buttonIndex = 0;
                        }
                    } else if (event.key === 'ArrowLeft' || event.key === 'ArrowUp') {
                        buttonIndex--;
                        if (buttonIndex < 0) {
                            buttonIndex = buttons.children.length - 1;
                        }
                    } else if (event.key === 'Enter') {
                        buttons.children[buttonIndex].click();
                    }
                    Array.from(buttons.children).forEach((button, index) => {
                        if (index === buttonIndex) {
                            button.style.backgroundColor = 'rgba(255, 255, 255, 0.2)';
                        } else {
                            button.style.backgroundColor = 'rgba(0, 0, 0, 0.2)';
                        }
                    });
                });

                // Append the buttons div to the globalAlert div:
                document.getElementById('globalAlert').appendChild(buttons);

            } else {
                // If there's no question, just show the alert and auto-hide after 5 seconds:
                document.getElementById('globalAlert').style.display = 'block';
                document.getElementById('globalAlertText').textContent = message;

                // Hide the globalAlert div after 5 seconds:
                setTimeout(() => {
                    document.getElementById('globalAlert').style.display = 'none';
                    // Hide the navigationOverlay:
                    showHideNavigationOverlay('hide');
                    // Resolve the promise immediately (no question)
                    resolve('no');  // Could resolve as 'no' since no button is clicked
                    // remove the buttons if they exist:
                    if (document.getElementsByClassName('globalAlertButtons').length > 0) {
                        document.getElementsByClassName('globalAlertButtons')[0].remove();
                    }
                }, 5000);
            }
        });
    }

    let intervalIds = [];
    let notificationsLoaded = false;
    let profileLoaded = false;

    // Immediate notification loading function
    function loadNotificationsImmediate() {
        if (!notificationsLoaded && document.getElementById('loggedIn')?.textContent === 'true') {
            notificationsLoaded = true;
            // Only load from server if we don't have preloaded notifications or need updates
            <% if (typeof preloadedNotifications !== 'undefined' && preloadedNotifications.length > 0) { %>
                // We have preloaded notifications, just do a quick refresh without clearing
                setTimeout(() => getNotifications(false, true), 1000);
            <% } else { %>
                getNotifications();
            <% } %>
        }
    }

    // Immediate profile loading function
    function loadProfileImmediate() {
        if (!profileLoaded) {
            profileLoaded = true;
            updateUserProfileAndDisplay();
        }
    }

    <% if (session.loggedIn) { %> 
        // Load notifications and profile immediately - don't wait for DOM
        (function() {
            // Try immediate load
            loadNotificationsImmediate();
            loadProfileImmediate();

            // Backup load after small delay if DOM isn't ready
            setTimeout(() => {
                loadNotificationsImmediate();
                loadProfileImmediate();
            }, 100);

            // Final backup load - use refreshOnly to avoid clearing preloaded notifications
            setTimeout(() => {
                getNotifications(false, true); // Use refreshOnly for backup loads
                updateUserProfileAndDisplay();
            }, 500);
        })();

        // Set up intervals once DOM is ready or immediately if already ready
        function setupIntervals() {
            // Prevent duplicate interval setup
            if (window.notificationIntervalsSetup) {
                return;
            }
            window.notificationIntervalsSetup = true;
            
            // More frequent initial loading for better UX - use refreshOnly to avoid clearing
            let notificationsInterval = setInterval(() => getNotifications(false, true), 8000); // 8 seconds
            let profileUpdateInterval = setInterval(updateUserProfileAndDisplay, 15000); // 15 seconds

            // After 30 seconds, reduce frequency
            setTimeout(() => {
                clearInterval(notificationsInterval);
                clearInterval(profileUpdateInterval);
                
                // Slower intervals for background updates - use refreshOnly
                let slowNotificationsInterval = setInterval(() => getNotifications(false, true), 30000); // 30 seconds
                let slowProfileUpdateInterval = setInterval(updateUserProfileAndDisplay, 60000); // 60 seconds
                
                intervalIds.push(slowNotificationsInterval, slowProfileUpdateInterval);
            }, 30000);

            intervalIds.push(notificationsInterval, profileUpdateInterval);
        }

        // Setup intervals immediately if DOM is ready, otherwise wait
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', setupIntervals);
        } else {
            setupIntervals();
        }
    <% } %>

    // Add cleanup function to be called when page unloads
    function cleanupIntervals() {
        intervalIds.forEach(clearInterval);
    }

    window.addEventListener('beforeunload', cleanupIntervals);

</script>


<script src="https://www.paypal.com/sdk/js?client-id=AfyjfgbZdN8UH9dTHx2Fn47vKkEt4kJRFo_86DT4Bk_J3uSfXOJtIFamEyRE06V_U0DFRRrPcAgR5mDD"></script>

<script src="/scripts/darkmode.js?v=<%= version %>"></script>
