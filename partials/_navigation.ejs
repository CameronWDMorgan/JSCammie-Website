<link rel='stylesheet' href='/style.css' />

<!-- <script id="aclib" type="text/javascript" src="//acscdn.com/script/aclib.js"></script> -->

<div id="navigationOverlay" class="navigationOverlay frosted"></div>
<style>

    .navigationOverlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        transition: all 0.75s;
        z-index: 992;
    }

</style>

<!-- Server state information -->
<span id="serverLoginState" style="display: none;"><%= session.loggedIn ? 'true' : 'false' %></span>

<script>
    // Set session data for JavaScript to access
    const sessionData = {
        loggedIn: <%= session.loggedIn ? 'true' : 'false' %>
    };

    function throttle(func, limit) {
        let inThrottle;
        let lastResult;
        return function(...args) {
            if (!inThrottle) {
                try {
                    lastResult = func.apply(this, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                } catch (error) {
                    console.error("Error in throttled function:", error);
                }
            }
            return lastResult;
        }
    }

    // Define userProfileNavigation as a global variable
    let userProfileNavigation = null;
    let userProfileUpdateInProgress = false;
    let oldUserProfile = {
        userProfileImg: '',
        userProfileUsername: '',
        userProfileLevel: '',
        userProfileExp: ''
    };

    const updateUserProfile = throttle(async () => {
        if (userProfileUpdateInProgress) {
            console.log("Update already in progress, skipping");
            return;
        }
        
        userProfileUpdateInProgress = true;
        console.log("Starting user profile update");
        
        try {
            // Add timeout to the fetch request to prevent hanging
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout
            
            let userProfileRaw = await fetch('/userProfile', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                },
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            if (!userProfileRaw.ok) {
                throw new Error(`HTTP error: ${userProfileRaw.status}`);
            }

            // res.send({ userProfile: userProfile}) is what the server uses to send it back to the client:
            let userProfileData = await userProfileRaw.json();
            
            // Update the global userProfile variable
            if (userProfileData?.userProfile) {
                userProfileNavigation = userProfileData.userProfile;
                console.log("User profile data updated:", userProfileNavigation);
                
                // Schedule display update after successful data fetch
                setTimeout(() => {
                    updateUserProfileDisplay();
                }, 500);
            } else {
                console.warn("Received empty or invalid user profile data");
            }
        } catch (error) {
            // Don't log AbortError as it's expected when timeout occurs
            if (error.name !== 'AbortError') {
                console.error("Error fetching user profile:", error);
            }
        } finally {
            userProfileUpdateInProgress = false;
        }
    }, 2000); // Increased throttle to 2000ms

    // Helper function to forcefully update profile elements
    function forceUpdateProfileElements() {
        if (!userProfileNavigation) {
            console.warn("Cannot update profile elements: userProfileNavigation is null");
            return;
        }
        
        // Initialize oldUserProfile if it doesn't exist
        if (!oldUserProfile) {
            oldUserProfile = {};
        }
        
        const profileImgSrc = userProfileNavigation.profileImg? userProfileNavigation.profileImg : 'http://www.jscammie.com/noimagefound.png';
        const username = userProfileNavigation.username? userProfileNavigation.username : 'User';
        const level = userProfileNavigation.level? userProfileNavigation.level : '1';
        const exp = userProfileNavigation.exp?.toString()? userProfileNavigation.exp?.toString() : '0';
        
        // Direct DOM manipulation for desktop elements only
        const elements = {
            'userProfileImg': profileImgSrc
        };
        
        const textElements = {
            'userProfileUsername': username,
            'userProfileLevel': level,
            'userProfileExp': exp
        };
        
        for (const [id, src] of Object.entries(elements)) {
            // dont update if its the same image:
            if (src == oldUserProfile[id]) {
                continue;
            }
            const element = document.getElementById(id);
            if (element) {
                element.setAttribute('src', src);
                
                // Force image reload
                element.onload = null;
                const newImg = new Image();
                newImg.onload = function() {
                    element.src = this.src;
                };
                newImg.src = src + '?t=' + new Date().getTime();
                oldUserProfile[id] = src;
            } else {
                console.warn(`Element with id ${id} not found`);
            }
        }

        for (const [id, text] of Object.entries(textElements)) {
            // dont update if its the same text:
            if (text == oldUserProfile[id]) {
                continue;
            }
            const element = document.getElementById(id);
            if (element) {
                element.textContent = text;
                oldUserProfile[id] = text;
            } else {
                console.warn(`Element with id ${id} not found`);
            }
        }
    }
    
    // Update user profile info in the dropdown and mobile view
    const updateUserProfileDisplay = () => {
        // console.log("Running updateUserProfileDisplay with userProfileNavigation:", userProfileNavigation);
        
        try {
            // Update profile elements in the dropdown menu
            forceUpdateProfileElements();
            
            // Get UI elements with null checks
            const loggedInElement = document.getElementById('loggedIn');
            const serverLoginStateElement = document.getElementById('serverLoginState');
            const creditsDisplayElement = document.getElementById('creditsDisplay');
            const btn3hr = document.getElementById('3hrCreditsButton');
            const btn12hr = document.getElementById('12hrCreditsButton');
            const btn24hr = document.getElementById('24hrCreditsButton');
            const btn168hr = document.getElementById('168hrCreditsButton');
            
            // Additional check: Are profile elements visible on the page?
            // This is another way to determine if the user is logged in
            const profileDisplayElement = document.getElementById('profileDisplay');
            const userProfileDivElement = document.getElementById('userProfileDiv');
            const hasVisibleProfileElements = !!profileDisplayElement || !!userProfileDivElement;
            
            // Check if the session indicates user is logged in
            // First check the server-provided login state, then fall back to the local state
            const serverIsLoggedIn = serverLoginStateElement ? serverLoginStateElement.textContent === 'true' : false;
            const localIsLoggedIn = loggedInElement ? loggedInElement.textContent === 'true' : false;
            const isLoggedIn = serverIsLoggedIn || localIsLoggedIn || hasVisibleProfileElements;
            
            // Update login status and credits
            if (userProfileNavigation == null || userProfileNavigation == undefined) {
                if (loggedInElement) loggedInElement.textContent = isLoggedIn ? 'true' : 'false';
                
                // Only show "Log in to claim" if user is actually not logged in
                if (!isLoggedIn) {
                    // set the creditsDisplay to 0 if not logged in
                    if (creditsDisplayElement) creditsDisplayElement.textContent = '0';
                    if (btn3hr) btn3hr.textContent = 'Log in to claim';
                    if (btn12hr) btn12hr.textContent = 'Log in to claim';
                    if (btn24hr) btn24hr.textContent = 'Log in to claim';
                    if (btn168hr) btn168hr.textContent = 'Log in to claim';
                    return;
                }
                
                // If logged in but profile not loaded yet, just exit without changing button texts
                if (isLoggedIn) {
                    console.log("User is logged in but profile not loaded yet");
                    // Only retry update if it's been some time since the last attempt
                    setTimeout(() => {
                        updateUserProfile();
                    }, 1000);
                    return;
                }
                
                return;
            } else {
                if (loggedInElement) loggedInElement.textContent = 'true';
            }

            // Update credits display
            let roundedCredits = Math.floor(userProfileNavigation?.credits ?? 0);
            if (creditsDisplayElement) creditsDisplayElement.textContent = roundedCredits.toString();

            // Update the dailies timers
            updateDailiesTimers();
        } catch (error) {
            console.error("Error updating profile display:", error);
        }
    };
    
    // Separate function to update the dailies timers
    function updateDailiesTimers() {
        if (!userProfileNavigation) return;
        
        // update the time left on the buttons using current time and the dailies timestamps:
        const currentTime = new Date().getTime();
        
        const timestamp3hr = Number(userProfileNavigation?.dailies?.timestamp3hr ?? "0");
        const timestamp3hrDifferenceRequired = 10800000;

        const timestamp12hr = Number(userProfileNavigation?.dailies?.timestamp12hr ?? "0");
        const timestamp12hrDifferenceRequired = 43200000;

        const timestamp24hr = Number(userProfileNavigation?.dailies?.timestamp24hr ?? "0");
        const timestamp24hrDifferenceRequired = 86400000;

        const timestamp168hr = Number(userProfileNavigation?.dailies?.timestamp168hr ?? "0");
        const timestamp168hrDifferenceRequired = 604800000;

        // Get button elements with null checks
        const btn3hr = document.getElementById('3hrCreditsButton');
        const btn3hrTimeLeft = document.getElementById('3hrCreditsButtonTimeLeft');
        const btn12hr = document.getElementById('12hrCreditsButton');
        const btn12hrTimeLeft = document.getElementById('12hrCreditsButtonTimeLeft');
        const btn24hr = document.getElementById('24hrCreditsButton');
        const btn24hrTimeLeft = document.getElementById('24hrCreditsButtonTimeLeft');
        const btn168hr = document.getElementById('168hrCreditsButton');
        const btn168hrTimeLeft = document.getElementById('168hrCreditsButtonTimeLeft');
        
        // 3hr button
        if (btn3hr && btn3hrTimeLeft) {
            if (timestamp3hr + timestamp3hrDifferenceRequired < currentTime || timestamp3hr == 0) {
                btn3hr.disabled = false;
                btn3hrTimeLeft.textContent = 'Claimable';
            } else {
                btn3hr.disabled = true;
                const timeLeft = timestamp3hr + timestamp3hrDifferenceRequired - currentTime;
                const timeLeftHours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const timeLeftMinutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                const timeLeftSeconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
                btn3hrTimeLeft.textContent = timeLeftHours + 'h ' + timeLeftMinutes + 'm ' + timeLeftSeconds + 's';
            }
        }

        // 12hr button
        if (btn12hr && btn12hrTimeLeft) {
            if (timestamp12hr + timestamp12hrDifferenceRequired < currentTime || timestamp12hr == 0) {
                btn12hr.disabled = false;
                btn12hrTimeLeft.textContent = 'Claimable';
            } else {
                btn12hr.disabled = true;
                const timeLeft = timestamp12hr + timestamp12hrDifferenceRequired - currentTime;
                const timeLeftHours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const timeLeftMinutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                const timeLeftSeconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
                btn12hrTimeLeft.textContent = timeLeftHours + 'h ' + timeLeftMinutes + 'm ' + timeLeftSeconds + 's';
            }
        }

        // 24hr button
        if (btn24hr && btn24hrTimeLeft) {
            if (timestamp24hr + timestamp24hrDifferenceRequired < currentTime || timestamp24hr == 0) {
                btn24hr.disabled = false;
                btn24hrTimeLeft.textContent = 'Claimable';
            } else {
                btn24hr.disabled = true;
                const timeLeft = timestamp24hr + timestamp24hrDifferenceRequired - currentTime;
                const timeLeftHours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const timeLeftMinutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                const timeLeftSeconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
                btn24hrTimeLeft.textContent = timeLeftHours + 'h ' + timeLeftMinutes + 'm ' + timeLeftSeconds + 's';
            }
        }

        // 168hr button
        if (btn168hr && btn168hrTimeLeft) {
            if (timestamp168hr + timestamp168hrDifferenceRequired < currentTime || timestamp168hr == 0) {
                btn168hr.disabled = false;
                btn168hrTimeLeft.textContent = 'Claimable';
            } else {
                // show it as D H M S left:
                btn168hr.disabled = true;
                const timeLeft = timestamp168hr + timestamp168hrDifferenceRequired - currentTime;
                const timeLeftDays = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
                const timeLeftHours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const timeLeftMinutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                const timeLeftSeconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
                btn168hrTimeLeft.textContent = timeLeftDays + 'd ' + timeLeftHours + 'h ' + timeLeftMinutes + 'm ' + timeLeftSeconds + 's';
            }
        }
    }

</script>

<style>
/* Navigation Bar */
.topNavBar {
    color: #fff;
    padding: 5px 20px;
    background-color: rgba(0, 0, 0, 0.2);
    position: relative;
    z-index: 1000;
}

.navContainer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1500px;
    margin: 0 auto;
}

/* Links Wrapper */
.navigationLinksWrapper {
    display: flex;
    align-items: center;
    gap: 8px;
}

.navigationLink {
    color: #fff;
    text-decoration: none;
    padding: 8px 12px;
    border-radius: 6px;
    transition: all 0.3s ease;
    background-color: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    font-size: 0.95em;
    white-space: nowrap;
}

.navigationLink:hover,
.navigationLink:focus {
    background-color: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.4);
    transform: translateY(-1px);
}

.navigationLinkActive {
    background-color: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.4);
    font-weight: 500;
}

/* Button Styling */
#creditsNav {
    background-color: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: #fff;
    padding: 8px 12px;
    margin-left: 10px;
    border-radius: 6px;
    cursor: pointer;
    display: flex;
    align-items: center;
    transition: all 0.3s ease;
    font-size: 0.95em;
}

#creditsNav:hover {
    background-color: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.4);
    transform: translateY(-1px);
}

#creditsDisplay {
    margin-left: 5px;
    font-weight: 500;
}

/* Dark Mode Button */
#darkModeButton {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: #fff;
    font-size: 1.1em;
    cursor: pointer;
    transition: all 0.3s ease;
    padding: 8px 12px;
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
}

#darkModeButton:hover {
    background-color: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.4);
    transform: translateY(-1px);
}

#darkModeIcon {
    display: inline-block;
    transition: transform 0.3s;
}

/* Mobile Menu Button */
#mobileMenuButton {
    display: none;
    font-size: 1.5em;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: #fff;
    cursor: pointer;
    padding: 8px 12px;
    border-radius: 6px;
    transition: all 0.3s ease;
    z-index: 1001;
}

#mobileMenuButton:hover {
    background-color: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.4);
    transform: translateY(-1px);
}

#mobileMenuButton.active {
    transform: rotate(90deg);
}

/* Mobile Menu */
.mobileMenu {
    display: none;
    flex-direction: column;
    background-color: rgba(0, 0, 0, 0.95);
    border: 1px solid rgba(255, 255, 255, 0.2);
    padding: 12px;
    position: fixed;
    top: 60px;
    left: 0;
    right: 0;
    border-radius: 0 0 15px 15px;
    z-index: 999;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
}

.mobileMenu.active {
    display: grid;
}

.mobileMenu a {
    padding: 10px 12px;
    margin: 4px 0;
    color: #fff;
    text-decoration: none;
    text-align: left;
    display: block;
    border-radius: 6px;
    font-size: 0.95em;
    transition: all 0.3s ease;
    background-color: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.mobileMenu a:hover {
    background-color: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.4);
    transform: translateX(5px);
}

/* Responsive Styles */
@media (max-width: 1300px) {
    .navigationLinksWrapper {
        display: none;
    }

    #mobileMenuButton {
        display: block;
    }

    .mobileMenu {
        display: none;
    }
}

/* Grid layouts for different screen sizes */
@media screen and (max-width: 800px) {
    .mobileMenu.active {
        grid-template-columns: repeat(2, 1fr);
        gap: 8px;
        padding: 12px;
    }
}

@media screen and (max-width: 600px) {
    .mobileMenu.active {
        grid-template-columns: repeat(3, 1fr);
        gap: 6px;
        padding: 8px;
    }
}

@media screen and (max-width: 400px) {
    .mobileMenu.active {
        grid-template-columns: repeat(4, 1fr);
        gap: 4px;
        padding: 6px;
    }
}

/* Handle small heights */
@media screen and (max-height: 10000px) {
    .mobileMenu.active {
        grid-template-columns: repeat(2, 1fr);
        gap: 4px;
        padding: 6px;
    }

    .mobileMenu a {
        padding: 6px;
        margin: 1px 0;
        font-size: 13px;
        min-height: 35px;
    }
}

/* Handle very small heights */
@media screen and (max-height: 400px) {
    .mobileMenu.active {
        grid-template-columns: repeat(4, 1fr);
        gap: 3px;
        padding: 4px;
    }

    .mobileMenu a {
        padding: 4px;
        margin: 1px 0;
        font-size: 12px;
        min-height: 30px;
    }
}
</style>

<nav class="topNavBar">
    <div class="navContainer">
        <!-- Desktop Navigation Links -->
        <div class="navigationLinksWrapper">
            <a id="navigationLink-generator" class="navigationLink" href="/">AI Generator</a>
            <a id="navigationLink-booru" class="navigationLink" href="/booru">Booru</a>
            <a id="navigationLink-leaderboard" class="navigationLink" href="/leaderboard?type=booru">Leaderboard</a>
            <a id="navigationLink-download" class="navigationLink" href="/download">Download</a>
            <a id="navigationLink-paypalshop" class="navigationLink" href="/paypal-shop">Buy Credits</a>
            <a id="navigationLink-metadata" class="navigationLink" href="/metadata">Metadata</a> 
            <a class="navigationLink" href="https://discord.gg/AvbQuRmh7t">Discord</a>
            <a id="navigationLink-suggestions" class="navigationLink" href="/suggestions">Suggestions</a>
            <a id="navigationLink-redeem" class="navigationLink" href="/redeem-code">Redeem</a>
            <% if (!session.loggedIn) { %>
                <a class="navigationLink" href="/login">Login</a>
            <% } %>
            
        </div>

        <!-- Mobile Menu Button -->
        <button id="mobileMenuButton">☰</button>

        <!-- Mobile Dropdown Menu -->
        <div class="mobileMenu frosted" id="mobileMenu">
            <a href="/">AI Generator</a>
            <a href="/projects">Projects</a>
            <a href="/booru">Booru</a>
            <a href="/leaderboard?type=booru">Leaderboard</a>
            <a href="https://discord.gg/AvbQuRmh7t">Discord</a>
            <a href="/download">Download</a>
            <a href="/suggestions">Suggestions</a>
            <a href="/redeem-code">Redeem</a>
            <a href="/paypal-shop">Buy Credits</a>
            <% if (session.loggedIn) { %>
                <a href="/image-history">Image History</a>
                <a href="/booru/creator-stats">Creator Stats</a>
                <a href="/profile-upgrades">Profile Upgrades</a>
                <a href="/settings/">Settings</a>
            <% } else { %>
                <a href="/login">Login</a>
            <% } %>
        </div>
        <div id="creditsButtonDiv">
            <button id="creditsNav">Credits: <span id="creditsDisplay">0</span></button>
        </div>
        <div id="notificationsDiv">
            <button id="notificationsNav">🔔</button>
        </div>
        

        <% if (session.loggedIn) { %>
        <!-- User Profile Display -->
        <div id="userProfileDiv" class="userProfileDiv">
            <div class="profileDisplay" id="profileDisplay">
                <img id="userProfileImg" class="userProfileImg" src="http://www.jscammie.com/noimagefound.png" alt="Profile">
                <span id="userProfileUsername" class="userProfileUsername">User</span>
            </div>
            <div class="profileDropdown" id="profileDropdown">
                <div class="profileStats">
                    <div class="profileStat">
                        <span class="statLabel">Level:</span>
                        <span id="userProfileLevel" class="statValue">1</span>
                    </div>
                    <div class="profileStat">
                        <span class="statLabel">EXP:</span>
                        <span id="userProfileExp" class="statValue">0</span>
                    </div>
                </div>
                <div class="profileLinks">
                    <a href="/profile/<%=session.accountId%>" class="profileLink">My Profile</a>
                    <a href="/image-history" class="profileLink">Image History</a>
                    <a href="/booru/creator-stats" class="profileLink">Creator Stats</a>
                    <a href="/profile-upgrades" class="profileLink">Profile Upgrades</a>
                    <a href="/settings/" class="profileLink">Settings</a>
                    <button id="darkModeButton" class="profileLink darkModeButton">
                        <span id="darkModeIcon" class="darkModeIcon">🌙</span>
                        <span class="darkModeText">Dark Mode</span>
                    </button>
                    <a href="/logout" class="profileLink">Logout</a>
                </div>
            </div>
        </div>
        <% } %>

        <!-- Dark Mode Button -->
        <% if (session.loggedIn) { %>
            <button id="darkModeButton" style="display: none;">
                <span id="darkModeIcon">🌙</span>
            </button>
        <% } %>
    </div>
</nav>

<style>

    .creditsHowToSummary {
        background-color: rgba(0, 0, 0, 0.1);
        font-size: 18px;
        color: #ff9dfc;
        border-radius: 8px;
        padding: 8px;
        transition: all 0.3s ease;
        border: 2px solid rgba(255, 255, 255, 0.2);
    }

    .creditsHowToSummary:hover {
        background-color: rgba(0,0,0,0);
        border: 2px solid #ffffff;
    }

    /* User Profile Styles */
    .userProfileDiv {
        position: relative;
        margin-left: 10px;
    }

    .profileDisplay {
        display: flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
        padding: 5px 10px;
        border-radius: 20px;
        border: 1px solid var(--border-colour);
        background-color: var(--background-colour);
        transition: all 0.3s ease;
    }

    .profileDisplay:hover {
        background-color: var(--highlight-colour);
        border-color: var(--border-colour);
        transform: translateY(-1px);
    }

    .userProfileImg {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        object-fit: cover;
    }

    .userProfileUsername {
        color: white;
        font-weight: 500;
        max-width: 100px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .profileDropdown {
        position: absolute;
        top: 100%;
        right: 0;
        background-color: var(--background-colour);
        border: 1px solid var(--border-colour);
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 12px;
        min-width: 200px;
        z-index: 1000;
        display: none;
    }

    .userProfileDiv:hover .profileDropdown {
        display: none;
    }

    .profileStats {
        display: flex;
        justify-content: space-between;
        margin-bottom: 12px;
        padding-bottom: 12px;
        border-bottom: 1px solid var(--border-colour);
    }

    .profileStat {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .statLabel {
        font-size: 0.8em;
        color: var(--text-colour);
        opacity: 0.7;
    }

    .statValue {
        font-size: 1.1em;
        font-weight: bold;
        color: var(--text-colour);
    }

    .profileLinks {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .profileLink {
        color: var(--text-colour);
        text-decoration: none;
        padding: 8px 12px;
        border-radius: 4px;
        transition: background-color 0.3s ease;
        display: flex;
        align-items: center;
    }

    .profileLink:hover {
        background-color: var(--highlight-colour);
    }

    /* Dark Mode Button Styles */
    .darkModeButton {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background: none;
        border: none;
        width: 100%;
        text-align: left;
        padding: 8px 12px;
        color: var(--text-colour);
        cursor: pointer;
        transition: background-color 0.3s ease;
        font-size: 1em;
        font-family: inherit;
    }

    .darkModeButton:hover {
        background-color: var(--highlight-colour);
    }

    .darkModeIcon {
        font-size: 1.2em;
        margin-right: 8px;
        transition: transform 0.3s ease;
    }

    .darkModeText {
        flex: 1;
    }

    .darkModeButton:hover .darkModeIcon {
        transform: rotate(15deg);
    }

    /* Dark Mode Styles */
    .dark-mode {
        --background-colour: #1a1a1a;
        --text-colour: #ffffff;
        --border-colour: #333333;
        --highlight-colour: #2a2a2a;
    }

    /* Show dropdown when profileDisplay is clicked */
    .profileDisplay.active + .profileDropdown {
        display: block;
    }

    /* Mobile Profile Styles - can be removed since we're not using them anymore */
    .mobileProfileSection {
        display: none;
    }

    /* Make sure user profile in navbar is visible on all screen sizes */
    @media (max-width: 1300px) {
        .userProfileDiv {
            display: flex;
            margin-left: 5px;
        }
    }

    /* Ensure profile is visible and styled correctly on mobile */
    @media (max-width: 600px) {
        .userProfileDiv {
            margin-left: 5px;
            margin-right: 5px;
        }
        
        .profileDisplay {
            padding: 5px 8px;
        }
        
        .userProfileUsername {
            max-width: 60px;
        }
    }

    /* For very small screens, hide the username and just show the profile picture */
    @media (max-width: 400px) {
        .userProfileUsername {
            display: none;
        }
        
        .profileDisplay {
            padding: 5px;
        }
    }
</style>

<script>
    // User Profile Dropdown Functionality
    let profileDisplay = document.getElementById('profileDisplay');
    let profileDropdown = document.getElementById('profileDropdown');

    if (profileDisplay && profileDropdown) {
        // Toggle dropdown on click
        profileDisplay.addEventListener('click', (e) => {
            e.stopPropagation();
            profileDisplay.classList.toggle('active');
            profileDropdown.style.display = profileDisplay.classList.contains('active') ? 'block' : 'none';
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
            if (!profileDisplay.contains(e.target) && !profileDropdown.contains(e.target)) {
                profileDisplay.classList.remove('active');
                profileDropdown.style.display = 'none';
            }
        });

        // Close dropdown when pressing Escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && profileDisplay.classList.contains('active')) {
                profileDisplay.classList.remove('active');
                profileDropdown.style.display = 'none';
            }
        });
    }

    // Instead of redefining the function, call both functions in sequence
    function updateUserProfileAndDisplay() {
        console.log("Calling updateUserProfileAndDisplay");
        
        try {
            // Call updateUserProfile which is throttled and doesn't return a Promise
            updateUserProfile();
            
            // Schedule the display update separately with longer delay
            setTimeout(() => {
                try {
                    console.log("Running display update");
                    updateUserProfileDisplay();
                } catch (error) {
                    console.error("Error in delayed display update:", error);
                }
            }, 500); // Increased to 500ms
        } catch (error) {
            console.error("Error in updateUserProfileAndDisplay:", error);
        }
    }

    // Execute profile display update once the DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
        console.log("DOM loaded, initializing profile display");
        
        // Set initial login state from server-side data
        const loginStateElement = document.getElementById('loggedIn');
        const serverLoginStateElement = document.getElementById('serverLoginState');
        
        if (loginStateElement && serverLoginStateElement) {
            loginStateElement.textContent = serverLoginStateElement.textContent;
        }
        
        // Allow a small delay for all elements to be created and rendered
        setTimeout(() => {
            console.log("Running delayed initialization");
            updateUserProfileAndDisplay();
            
            // Only do one additional update attempt with longer delay
            setTimeout(() => {
                console.log("Running second delayed initialization");
                updateUserProfileAndDisplay();
            }, 3000); // Increased to 3000ms
        }, 500); // Increased to 500ms
    });
</script>

<script>
    // if the current page is one of the navigation links, then highlight it by setting it to :focus :
    let currentPath = window.location.pathname;

    if (currentPath.includes('booru')) {
        currentPath = currentPath.split('/')
        currentPath = `/${currentPath[1]}`
    } else if (currentPath.includes('leaderboard')) {
        currentPath = '/leaderboard'
    }

    let accountId = '<%=session.accountId%>'

    switch(currentPath) {
    
        case '/metadata':
            document.getElementById('navigationLink-metadata').classList.add('navigationLinkActive');
            break;

        case '/leaderboard':
            document.getElementById('navigationLink-leaderboard').classList.add('navigationLinkActive');
            break;
        
        case '/':
            document.getElementById('navigationLink-generator').classList.add('navigationLinkActive');
            break;

        case '/booru':
            document.getElementById('navigationLink-booru').classList.add('navigationLinkActive');
            break;

        case '/download/':
            document.getElementById('navigationLink-download').classList.add('navigationLinkActive');
            break;

        case '/suggestions':
            document.getElementById('navigationLink-suggestions').classList.add('navigationLinkActive');
            break;

        case '/redeem-code':
            document.getElementById('navigationLink-redeem').classList.add('navigationLinkActive');
            break;

        case '/paypal-shop':
            document.getElementById('navigationLink-paypalshop').classList.add('navigationLinkActive');
            break;

        case '/image-history':
            document.getElementById('navigationLink-history').classList.add('navigationLinkActive');
            break;

        case `/profile/${accountId}`:
            document.getElementById('navigationLink-profile').classList.add('navigationLinkActive');
            break;
    }

</script>

<script>
    // center the credits text every few seconds:
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // event listeners for the creditsNav button to show the navigationOverlay and the notificationsPopup:
    document.getElementById('creditsNav').addEventListener('click', () => {
        if (document.getElementById('creditsDailyPopup').style.display == 'none') {
            showHideCreditsPopup('show');
        } else {
            showHideCreditsPopup('hide');
        }
    });

</script>


<style>
    #topSiteText {
        background-color: rgba(0, 0, 0, 0.2);
        color: white;
        padding: 5px;
        text-align: center;
        font-size: 1em;
        font-weight: bold;
        margin-top: 0;
    }
</style>

<div id="topSiteText"></div>

<script>
    let topSiteTextArray = [
        {
            message: "Check out the <a id='advert-link-colour' href='https://www.jscammie.com/booru'>'Booru'</a> for some cool user-created images & to earn credits!",
            linkcolour: "rgba(0, 255, 38, 1)",
            active: true
        },
        // {
        //     message: "We are currently doing a contest on the <a id='advert-link-colour' href='https://www.discord.gg/AvbQuRmh7t'>'Discord'</a> for 70,000 credits! Join now to participate!",
        //     linkcolour: "rgba(0, 100, 255, 1)",
        //     active: true
        // },
        {
            message: "Check out the <a id='advert-link-colour' href='https://www.discord.gg/AvbQuRmh7t'>'Discord'</a> to compete in contests for credits and more!",
            linkcolour: "rgba(0, 100, 255, 1)",
            active: false
        },
    ]

    let topSiteText = document.getElementById('topSiteText');

    // set the topSiteText to a random element from the array:
    // topSiteText.innerHTML = topSiteTextArray[Math.floor(Math.random() * topSiteTextArray.length)];

    function randomIndex(array) {
        // remove non active arrays:
        array = array.filter(element => element.active == true);
        return Math.floor(Math.random() * array.length);
    }

    // have the topSiteText change every 25 seconds:
    let topSiteTextIndex = randomIndex(topSiteTextArray);

    function changeTopSiteText() {
        topSiteTextIndex = randomIndex(topSiteTextArray);
        topSiteText.innerHTML = topSiteTextArray[topSiteTextIndex].message;
        document.getElementById('advert-link-colour').style.color = topSiteTextArray[topSiteTextIndex].linkcolour;
    }

    setInterval(() => {
        changeTopSiteText();
    }, 25000);

    changeTopSiteText();

</script>

<script>
    // Mobile Menu Toggle with improved animation
    const mobileMenuButton = document.getElementById('mobileMenuButton');
    const mobileMenu = document.getElementById('mobileMenu');
    const navigationOverlay = document.getElementById('navigationOverlay');

    function toggleMobileMenu() {
        mobileMenuButton.classList.toggle('active');
        mobileMenu.classList.toggle('active');
        navigationOverlay.style.display = mobileMenu.classList.contains('active') ? 'block' : 'none';
        
        // Prevent body scrolling when menu is open
        document.body.style.overflow = mobileMenu.classList.contains('active') ? 'hidden' : '';
    }

    mobileMenuButton.addEventListener('click', toggleMobileMenu);

    // Close menu when clicking overlay
    navigationOverlay.addEventListener('click', () => {
        if (mobileMenu.classList.contains('active')) {
            toggleMobileMenu();
        }
    });

    // Close menu when clicking a link
    mobileMenu.querySelectorAll('a').forEach(link => {
        link.addEventListener('click', () => {
            if (mobileMenu.classList.contains('active')) {
                toggleMobileMenu();
            }
        });
    });

    // Handle orientation change
    window.addEventListener('orientationchange', () => {
        if (mobileMenu.classList.contains('active')) {
            toggleMobileMenu();
        }
    });

    // Close menu on escape key
    document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && mobileMenu.classList.contains('active')) {
            toggleMobileMenu();
        }
    });
</script>

<div id="notificationsPopup" style="display: none;">
    <h2> - Notifications:</h2>
    <div class="notificationList" id="notificationsList">
        <p>No notifications</p>
    </div>
    <button id="loadNotificationsButton">Load more</button>
</div>

<style>

    .activeNotificationsPopup {
        display: block !important;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: var(--background-colour);
        color: white;
        padding: 8px;
        border-radius: 12px;
        border: 2px solid rgb(255, 143, 246);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        z-index: 1000;
        max-width: 600px;
        width: 75%;
    }

    .notification {
        display: flex;
        flex-direction: column;
        margin: 8px;
        padding: 8px;
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 8px;
    }

    .notificationType {
        font-size: 18px;
        color: #ffffff;
    }

    .notificationMessage {
        font-size: 16px;
    }

    .notificationList {
        display: flex;
        flex-direction: column;
        height: 40vh;
        overflow-y: scroll;
    }

    #notificationsNav {
        transition: all 0.5s ease;
    }




    .notification-credits {
        background-color: rgba(0, 38, 255, 0.2) !important;
    }

    .notification-credits:hover {
        background-color: rgba(0, 38, 255, 0.4) !important;
    }




    .notification-moderation {
        background-color: rgba(255, 0, 0, 0.2) !important;
    }

    .notification-moderation:hover {
        background-color: rgba(255, 0, 0, 0.4) !important;
    }



    .notification-booru {
        background-color: rgba(0, 255, 38, 0.2) !important;
    }

    .notification-booru:hover {
        background-color: rgba(0, 255, 38, 0.4) !important;
    }




    .notification-generator {
        background-color: rgba(119, 0, 255, 0.2) !important;
    }

    .notification-generator:hover {
        background-color: rgba(119, 0, 255, 0.4) !important;
    }




    .notification-dailies {
        background-color: rgba(255, 255, 0, 0.2) !important;
    }

    .notification-dailies:hover {
        background-color: rgba(255, 255, 0, 0.4) !important;
    }

</style>


<script>
    let notificationsPopup = document.getElementById('notificationsPopup');
    let notificationsList = document.getElementById('notificationsList');
    let loadNotificationsButton = document.getElementById('loadNotificationsButton');

    // send a post request to get-notifications to get the notifications:
    let notificationsReceived = []

    let notificationsArray = []
    let notificationsChecked = '<%=session.notificationsChecked%>'

    let notificationCount = 0

    function buildNotificationsFromArray(newNotificationsChecked) {
        
        Number(notificationsChecked)

        notificationsChecked = newNotificationsChecked ?? notificationsChecked

        if (notificationsArray.length == 0) {
            notificationsList.innerHTML = "<p>No notifications</p>";
        }

        // have the notificationsButton pulse background color if there are new notifications:
        if (notificationsArray.length > 0) {
            if (notificationsArray[0].timestamp > notificationsChecked) {
                // have a timeout to make the background color pulse, but make sure the background color is reset after the timeout:
                notificationsNav = document.getElementById('notificationsNav');
                notificationsNav.style.backgroundColor = 'rgba(255, 0, 0, 0.7)';
                setTimeout(() => {
                    notificationsNav.style.backgroundColor = 'rgba(0, 0, 0, 0.2)';
                }, 750);
            }
        }


        // if the notifications havent changed, then don't update the notificationsList

        if (notificationCount == notificationsArray.length) {
            return;
        } else {
            notificationsList.innerHTML = "";
        }

        if (notificationsArray.length > 0) {
            notificationCount = notificationsArray.length
        }

        notificationsArray.forEach(notification => {
            notificationHTML = `
                <div class="notification notification-${notification.type}">
                    <div class="notificationType"> ${notification.type} | ${new Date(Number(notification.timestamp)).toLocaleString()} </div>
                    <div class="notificationMessage"> ${notification.message} </div>
                </div>
            `

            notificationsList.innerHTML += notificationHTML;
        });
    }

    const MAX_NOTIFICATIONS = 50;

    function getNotifications() {
        // Skip if not logged in or if the request is already in progress
        if (document.getElementById('loggedIn')?.textContent !== 'true' || window.notificationsRequestInProgress) {
            return;
        }
        
        window.notificationsRequestInProgress = true;
        
        // Add timeout to the fetch request
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout
        
        fetch('/get-notifications', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                notificationsReceived,
                popupOpened: document.getElementById('notificationsPopup').classList.contains('activeNotificationsPopup')
            }),
            signal: controller.signal
        })
        .then(response => response.json())
        .then(data => {
            data.notifications.forEach(notification => {
                if (!notificationsReceived.includes(notification.notificationId)) {
                    notificationsReceived.push(notification.notificationId);
                    notificationsArray.push(notification);
                }
            });

            notificationsArray.sort((a, b) => {
                return b.timestamp - a.timestamp;
            });

            // Trim notifications to prevent memory buildup
            if (notificationsArray.length > MAX_NOTIFICATIONS) {
                notificationsArray = notificationsArray.slice(0, MAX_NOTIFICATIONS);
            }

            buildNotificationsFromArray(data.notificationsChecked);
        })
        .catch(error => {
            // Don't log AbortError as it's expected when timeout occurs
            if (error.name !== 'AbortError') {
                console.error("Error fetching notifications:", error);
            }
        })
        .finally(() => {
            clearTimeout(timeoutId);
            window.notificationsRequestInProgress = false;
        });
    }

    // add an event listener to the notifications button:
    document.getElementById('notificationsNav').addEventListener('click', () => {
        if (!notificationsPopup.classList.contains('activeNotificationsPopup')) {
            notificationsPopup.classList.add('activeNotificationsPopup');
        } else {
            notificationsPopup.classList.remove('activeNotificationsPopup');
        }
    });

    document.addEventListener('click', function (event) {
        var isClickInside = document.getElementById('notificationsPopup').contains(event.target);
        var isClickOnButton = document.getElementById('notificationsNav').contains(event.target);
        if (!isClickInside && !isClickOnButton) {
            document.getElementById('notificationsPopup').classList.remove('activeNotificationsPopup');
        }
    });

    <% if (session.loggedIn) { %>
        document.getElementById('loadNotificationsButton').addEventListener('click', () => {
            getNotifications();
        });

        getNotifications();

        setInterval(() => {
            getNotifications();
        }, 10000);
    <% } %>

</script>

<div id="creditsDailyPopup" style="display: none;">
    <div class="dailiesDivGrid">
        <div class="dailiesDivSideBySide">
            <p class="topTextCreditsButton">3 Hours Rewards (50 Credits)</p>
            <button id="3hrCreditsButton" class="creditsButton"><span id="3hrCreditsButtonTimeLeft"></span> / 3 Hours</button>
        </div>
        <div class="dailiesDivSideBySide">
            <p class="topTextCreditsButton">12 Hours Rewards (100 Credits)</p>
            <button id="12hrCreditsButton" class="creditsButton"><span id="12hrCreditsButtonTimeLeft"></span> / 12 Hours</button>
        </div>
        <div class="dailiesDivSideBySide">
            <p class="topTextCreditsButton">24 Hours Rewards (200 Credits)</p>
            <button id="24hrCreditsButton" class="creditsButton"><span id="24hrCreditsButtonTimeLeft"></span> / 24 Hours</button>
        </div>
        <div class="dailiesDivSideBySide">
            <p class="topTextCreditsButton">7 Days Rewards (500 Credits)</p>
            <button id="168hrCreditsButton" class="creditsButton"><span id="168hrCreditsButtonTimeLeft"></span> / 7 Days</button>
        </div>
    </div>

    <div class="dailiesDivSideBySide">
        <p class="topTextCreditsButton">Credits History</p>
        <!-- <a href="/credits-history" target="_blank" class="creditsButton">View</a> -->
        <button class="creditsButton" onclick="window.open('/credits-history', '_blank')">View Credits History</button>
    </div>

     <div class="dailiesDivSideBySide">
        <p class="topTextCreditsButton">Buy Credits!</p>
        <button class="creditsButton" onclick="window.open('/paypal-shop', '_blank')">Buy Credits</button>
    </div>

    <div class="howToGainCredits">
    
        <details>

            <summary class="creditsHowToSummary">How to gain credits:</summary>

            <!-- <li>
                <p>Every 3 hours, 12 hours, 24 hours, and 7 days you can claim free credits! The amount of credits you can claim increases the longer you wait between claims.</p>
                <p>Posting on the <a href="https://www.jscammie.com/booru">Booru</a> can also earn you credits when the image gets approved! (rated SFW/SUGGESTIVE/NSFW/EXTREME, by default they will be rated as NA and wont be visible to others)</p>
                <p>Voting on posts on the <a href="https://www.jscammie.com/booru">Booru</a> can also earn you credits!</p>
                <p>Getting 1st, 2nd, or 3rd place in the discord contests can earn you credits!</p>
            </li> -->

            <!-- make the above a list: -->
            <ul>
                <li>Every 3 hours, 12 hours, 24 hours, and 7 days you can claim free credits! The amount of credits you can claim increases the longer you wait between claims.</li>
                <br>
                <li>Posting on the <a href="https://www.jscammie.com/booru">Booru</a> can also earn you credits when the image gets approved! (rated SFW / SUGGESTIVE / NSFW / EXTREME, by default they will be rated as NA and wont be visible to others)</li>
                <br>
                <li>Voting on posts on the <a href="https://www.jscammie.com/booru">Booru</a> can also earn you credits!</li>
                <br>
                <li>Competing in the discord contests can earn you credits!</li>
                <br>
                <li>Logging in gives you 500 credits as a starting bonus!</li>
                <br>
                <li>You can pay for credits by clicking the "Buy" button above!</li>
            </ul>

        </details>
  
    
    </div>

</div>

<style>

/* add a blur and darken effect to anything behind the creditsDailyPopup, also add a clean transition: */
    #creditsDailyPopup {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: var(--background-colour);
        color: white;
        padding: 8px;
        border-radius: 12px;
        border: 2px solid rgb(255, 143, 246);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        z-index: 1000;
        max-width: 700px;
        width: 75%;
    }

    .dailiesDivGrid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 10px;
    }

    .dailiesDivSideBySide {
        display: flex;
        flex-direction: column;
        text-align: center;
    }
    
    .topTextCreditsButton {
        font-size: 18px;
        margin-bottom: 2px;
        color: #ff9dfc;
    }

    .howToGainCredits {
        margin-top: 10px;
        border-radius: 8px;
        padding: 8px;
        background-color: rgba(0, 0, 0, 0.2);
    }

    .creditsButton {
        background-color: rgba(0, 0, 0, 0.2);
        color: white;
        padding: 12px;
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        /* center: */
        margin: 0 auto;
        width: 100%;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .creditsButton:hover {
        background-color: var(--highlight-colour-hover);
        transform: translateY(-2px);
    }

    .creditsButton:active {
        background-color: var(--highlight-colour-active);
        transform: translateY(0);
    }

    .creditsButton:disabled {
        background-color: rgba(0, 0, 0, 0.2);
        cursor: not-allowed;
        opacity: 0.6;
    }

    .creditsButton span {
        font-weight: bold;
    }
</style>


<script>

    // when the creditsNav button is clicked, show the creditsDailyPopup:
    document.getElementById('creditsNav').addEventListener('click', () => {
        if (document.getElementById('creditsDailyPopup').style.display == 'none') {
            showHideCreditsPopup('show');
        } else {
            showHideCreditsPopup('hide');
        }
    });

</script>

<script>
    const creditsDisplay = document.getElementById('creditsDisplay');

    // every .1 seconds, check if the creditsDisplay value is higher or lower than the previous value:
    // the credits display is updated by other scripts:
    let previousCredits = 0;
    let currentCredits = 0;
    setInterval(() => {
        currentCredits = parseInt(creditsDisplay.textContent);
        if (currentCredits > previousCredits) {
            creditsDisplay.style.color = 'green';
            setTimeout(() => {
                creditsDisplay.style.color = 'white';
            }, 1000);
        } else if (currentCredits < previousCredits) {
            creditsDisplay.style.color = 'red';
            setTimeout(() => {
                creditsDisplay.style.color = 'white';
            }, 1000);
        }
        previousCredits = currentCredits;
    }, 100);
</script>

<span hidden style="display: none;" id="loggedIn"></span>

<script>

    function sendDailiesRequest(type) {

        // check if the user is logged in, if not then don't send the request:
        if (document.getElementById('loggedIn').textContent == 'false') {
            return;
        }

        // make a request to post /dailies:
        fetch('/dailies', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: type
            })
        }).then(response => response.json())
            .then(data => {
                // console.log(data);
                // Update user profile display after claiming credits
                updateUserProfileAndDisplay();
            });
    }

    document.getElementById('3hrCreditsButton').addEventListener('click', () => {
        sendDailiesRequest('3hr');
    });

    document.getElementById('12hrCreditsButton').addEventListener('click', () => {
        sendDailiesRequest('12hr');
    });

    document.getElementById('24hrCreditsButton').addEventListener('click', () => {
        sendDailiesRequest('24hr');
    });

    document.getElementById('168hrCreditsButton').addEventListener('click', () => {
        sendDailiesRequest('168hr');
    });

    updateUserProfileAndDisplay()

</script>

<style>

    .dividingLine {
        background-color: rgb(255, 255, 255);
        box-shadow: 0 4px 15px rgba(255, 255, 255, 1);
        height: 2px;
    }
    
</style>

<div class="dividingLine"></div>



<!-- script to enable darkmode, change how a button looks with emoji on the navigation -->
<script>
    const darkModeButton = document.getElementById('darkModeButton');
    const darkModeIcon = document.getElementById('darkModeIcon');
    const docuBody = document.body;
    const savedDarkMode = localStorage.getItem('darkMode') === 'true';

    // Apply saved dark mode preference
    if (savedDarkMode) {
        docuBody.classList.add('dark-mode');
        darkModeIcon.textContent = '☀️';
    }

    // Toggle dark mode
    darkModeButton.addEventListener('click', () => {
        docuBody.classList.toggle('dark-mode');
        const isDarkMode = docuBody.classList.contains('dark-mode');
        localStorage.setItem('darkMode', isDarkMode);
        darkModeIcon.textContent = isDarkMode ? '☀️' : '🌙';

        // send a request to the server to update the dark mode:
        fetch('/toggle-darkmode', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                isDarkMode: isDarkMode.toString() // Convert boolean to string
            })
        })
        .then(response => response.json())
        .then(data => {
            console.log('Dark mode updated:', data.darkmode);
        })
        .catch(error => {
            console.error('Error updating dark mode:', error);
        });
    });
    
    // Function to toggle dark mode based on a boolean value
    function toggleDarkMode(isDarkMode) {
        if (isDarkMode === 'true') {
            docuBody.classList.add('dark-mode');
            if (darkModeIcon) darkModeIcon.textContent = '☀️';
        } else {
            docuBody.classList.remove('dark-mode');
            if (darkModeIcon) darkModeIcon.textContent = '🌙';
        }
    }
</script>

<span hidden id="isDarkMode"><%= session.darkmode ? 'true' : 'false' %></span>

<script>
    document.addEventListener('DOMContentLoaded', (event) => {
        // Temporarily disable transitions
        document.body.classList.add('no-transition');
        document.getElementsByClassName('topNavBar')[0].classList.add('no-transition');

        const isDarkMode = document.getElementById('isDarkMode').textContent;
        toggleDarkMode(isDarkMode);

        // Use setTimeout to delay the removal of 'no-transition'
        setTimeout(() => {
            document.body.classList.remove('no-transition');
            document.getElementsByClassName('topNavBar')[0].classList.remove('no-transition');
        }, 50);
    });
</script>


<script>

    function showHideNavigationOverlay(value) {
        if (value == 'show') {
            document.getElementById('navigationOverlay').style.display = 'block';
        } else if (value == 'hide') {
            document.getElementById('navigationOverlay').style.display = 'none';
        }
    }

    function showHideCreditsPopup(show) {
        if (show == 'show') {
            document.getElementById('creditsDailyPopup').style.display = 'block';
            showHideNavigationOverlay('show');
        } else if (show == 'hide') {
            document.getElementById('creditsDailyPopup').style.display = 'none';
            showHideNavigationOverlay('hide');
        }
    }

    // add an event listener to the navigationOverlay to hide it when clicked:
    document.getElementById('navigationOverlay').addEventListener('click', () => {
        showHideCreditsPopup('hide');
        document.getElementById('notificationsPopup').classList.remove('activeNotificationsPopup');
        document.getElementById('creditsDailyPopup').style.display = 'none';
    });

    // event listeners for the creditsNav button to show the navigationOverlay and the notificationsPopup:
    document.getElementById('creditsNav').addEventListener('click', () => {
        if (document.getElementById('creditsDailyPopup').style.display == 'none') {
            showHideCreditsPopup('show');
        } else {
            showHideCreditsPopup('hide');
        }
    });

    // add ESC keyboard event listener to hide the navigationOverlay and any other popups if active
    document.addEventListener('keydown', function (event) {
        if (event.key === "Escape") {
            showHideNavigationOverlay('hide');
            document.getElementById('notificationsPopup').classList.remove('activeNotificationsPopup');
            document.getElementById('creditsDailyPopup').style.display = 'none';
        }
    });

</script>


<style>
    .tooltiptext {
        visibility: hidden;
        opacity: 0;
        transition: visibility 0s, opacity 0.3s;
        /* make it take up no room on the page by default: */
        position: absolute;
        padding: 10px;
        margin: 10px;
        background-color: rgba(0, 0, 0, 0.5);
        color: rgb(255, 144, 144);
        
    }

    /* have a round border around the thingy: */

    .tooltip {
        cursor: pointer;
        border-radius: 50%;
        border: 1px solid rgb(255, 255, 255);
        width: 24px;
        height: 24px;
        display: inline-block;
        text-align: center;
        line-height: 24px;
    }

    .tooltip:hover {
        /* animate it wiggling and scaling up and down: */
        animation: wiggle 0.3s ease infinite;
        transition: transform 0.2s ease;
    }

    @keyframes wiggle {
        0% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.1);
        }
        100% {
            transform: scale(1);
        }
    }

</style>

<script>
    function showTooltip(element) {
        const tooltip = element.nextElementSibling;

        // tooltip state:
        if (tooltip.style.visibility === 'visible') {
            tooltip.style.opacity = '0';
            // wait 0.3 seconds then hide the tooltip:
            setTimeout(() => {
                tooltip.style.visibility = 'hidden';
                tooltip.style.position = 'absolute';
            }, 300)
            return;
        } else {
            tooltip.style.position = 'relative';
            tooltip.style.visibility = 'visible';
            tooltip.style.opacity = '1';
            // wait 5 seconds then hide the tooltip, but if they toggle the tooltip on and off reset the timeout:
            setTimeout(() => {
                tooltip.style.opacity = '0';
                setTimeout(() => {
                    tooltip.style.visibility = 'hidden';
                    tooltip.style.position = 'absolute';
                }, 300)
            }, 15000)
        }
    }
</script>


<style>

    /* have the alert be centered and ontop of everything: */
    .globalAlert {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        padding: 8px;
        border-radius: 12px;
        z-index: 90000;
        max-width: 600px;
        width: 75%;
        text-align: center;
        font-size: 24px;
    }

    .globalAlertButtons {
        display: flex;
        justify-content: center;
        gap: 10px;
    }

    .globalAlertButton {
        background-color: rgba(0, 0, 0, 0.2);
        color: white;
        padding: 8px;
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

</style>

<div id="globalAlert" class="globalAlert" style="display: none;">
    <p id="globalAlertText"></p>
</div>

<script>
    async function globalAlert(options) {
        let message = options.message || 'No message provided';
        let question = options.question || false;
        let optionFunctions = options.options || { yes: () => { }, no: () => { } };

        console.log("globalAlert function called with message: " + message);

        // Show the navigation overlay (assuming this function exists)
        showHideNavigationOverlay('show');

        // Return a Promise so you can await it
        return new Promise((resolve, reject) => {
            // If there is a question, show a custom confirm dialog:
            if (question) {
                // Show the globalAlert div:
                document.getElementById('globalAlert').style.display = 'block';
                document.getElementById('globalAlertText').textContent = message;

                // Create the buttons:
                let buttons = document.createElement('div');
                buttons.classList.add('globalAlertButtons');
                
                Object.keys(optionFunctions).forEach(key => {
                    let button = document.createElement('button');
                    // Capitalize the first letter of the key:
                    button.textContent = key.charAt(0).toUpperCase() + key.slice(1);
                    button.classList.add('globalAlertButton');
                    button.addEventListener('click', () => {
                        // Hide the globalAlert div and call the corresponding function:
                        document.getElementById('globalAlert').style.display = 'none';
                        // Hide the navigationOverlay:
                        showHideNavigationOverlay('hide');
                        optionFunctions[key]();
                        // Resolve the promise when a button is clicked
                        if (document.getElementsByClassName('globalAlertButtons').length > 0) {
                            document.getElementsByClassName('globalAlertButtons')[0].remove();
                        }
                        resolve(key);  // Resolve with the clicked option (yes/no)
                    });
                    buttons.appendChild(button);
                });

                // add the ability to use arrow keys and enter key to select the buttons:
                let buttonIndex = 0;
                document.addEventListener('keydown', (event) => {
                    if (event.key === 'ArrowRight' || event.key === 'ArrowDown') {
                        buttonIndex++;
                        if (buttonIndex >= buttons.children.length) {
                            buttonIndex = 0;
                        }
                    } else if (event.key === 'ArrowLeft' || event.key === 'ArrowUp') {
                        buttonIndex--;
                        if (buttonIndex < 0) {
                            buttonIndex = buttons.children.length - 1;
                        }
                    } else if (event.key === 'Enter') {
                        buttons.children[buttonIndex].click();
                    }
                    buttons.children.forEach((button, index) => {
                        if (index === buttonIndex) {
                            button.style.backgroundColor = 'rgba(255, 255, 255, 0.2)';
                        } else {
                            button.style.backgroundColor = 'rgba(0, 0, 0, 0.2)';
                        }
                    });
                });

                // Append the buttons div to the globalAlert div:
                document.getElementById('globalAlert').appendChild(buttons);

            } else {
                // If there's no question, just show the alert and auto-hide after 5 seconds:
                document.getElementById('globalAlert').style.display = 'block';
                document.getElementById('globalAlertText').textContent = message;

                // Hide the globalAlert div after 5 seconds:
                setTimeout(() => {
                    document.getElementById('globalAlert').style.display = 'none';
                    // Hide the navigationOverlay:
                    showHideNavigationOverlay('hide');
                    // Resolve the promise immediately (no question)
                    resolve('no');  // Could resolve as 'no' since no button is clicked
                    // remove the buttons if they exist:
                    if (document.getElementsByClassName('globalAlertButtons').length > 0) {
                        document.getElementsByClassName('globalAlertButtons')[0].remove();
                    }
                }, 5000);
            }
        });
    }

    let intervalIds = [];
    <% if (session.loggedIn) { %> 
        // Initial load - just once to get started
        getNotifications();
        updateUserProfileAndDisplay();

        // once everything else has loaded:
        document.addEventListener('DOMContentLoaded', () => {
            // Use less aggressive intervals
            let notificationsInterval = setInterval(getNotifications, 10000); // 10 seconds
            let profileUpdateInterval = setInterval(updateUserProfileAndDisplay, 30000); // 30 seconds

            setTimeout(() => {
                clearInterval(profileUpdateInterval);
                let infrequentProfileUpdate = setInterval(updateUserProfileAndDisplay, 2000);
                intervalIds.push(infrequentProfileUpdate);
            }, 2000);

            intervalIds.push(notificationsInterval, profileUpdateInterval);
        });
    <% } %>

    // Add cleanup function to be called when page unloads
    function cleanupIntervals() {
        intervalIds.forEach(clearInterval);
    }

    window.addEventListener('beforeunload', cleanupIntervals);

</script>


<script src="https://www.paypal.com/sdk/js?client-id=AfyjfgbZdN8UH9dTHx2Fn47vKkEt4kJRFo_86DT4Bk_J3uSfXOJtIFamEyRE06V_U0DFRRrPcAgR5mDD"></script>
