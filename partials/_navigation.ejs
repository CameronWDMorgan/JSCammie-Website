<link rel='stylesheet' href='/style.css' />

<!-- <script id="aclib" type="text/javascript" src="//acscdn.com/script/aclib.js"></script> -->

<div id="navigationOverlay" class="navigationOverlay frosted"></div>
<style>

    .navigationOverlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        transition: all 0.75s;
        z-index: 992;
    }

</style>

<script>

    function throttle(func, limit) {
        let inThrottle;
        return function(...args) {
            if (!inThrottle) {
                func.apply(this, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        }
    }

    const updateUserProfile = throttle(async () => {
        let userProfileRaw = await fetch('/userProfile', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })

        // console.log(userProfileRaw)

        // res.send({ userProfile: userProfile}) is what the server uses to send it back to the client:
        let userProfile = await userProfileRaw.json();
        userProfile = userProfile?.userProfile;

        if (userProfile == null || userProfile == undefined) {
            document.getElementById('loggedIn').textContent = 'false';
            // set the creditsDisplay to 0 if the userProfile is null AND the CreditsButtons to be "Log in to claim", hide the topTextCreditsButton:
            document.getElementById('creditsDisplay').textContent = 0;
            document.getElementById('3hrCreditsButton').textContent = 'Log in to claim';
            document.getElementById('12hrCreditsButton').textContent = 'Log in to claim';
            document.getElementById('24hrCreditsButton').textContent = 'Log in to claim';
            document.getElementById('168hrCreditsButton').textContent = 'Log in to claim';
            return;
        } else {
            document.getElementById('loggedIn').textContent = 'true';
        }
        
        document.getElementById('creditsDisplay').textContent = userProfile?.credits ?? 0;

        // update the time left on the buttons using current time and the dailies timestamps, convert it from ms to hours mins seconds left, if it's over 3 hours then show it as claimable:

        timestamp3hr = userProfile?.dailies?.timestamp3hr ?? "0";
        timestamp3hr = Number(timestamp3hr)
        timestamp3hrDifferenceRequired = 10800000

        timestamp12hr = userProfile?.dailies?.timestamp12hr ?? "0";
        timestamp12hr = Number(timestamp12hr)
        timestamp12hrDifferenceRequired = 43200000

        timestamp24hr = userProfile?.dailies?.timestamp24hr ?? "0";
        timestamp24hr = Number(timestamp24hr)
        timestamp24hrDifferenceRequired = 86400000

        timestamp168hr = userProfile?.dailies?.timestamp168hr ?? "0";
        timestamp168hr = Number(timestamp168hr)
        timestamp168hrDifferenceRequired = 604800000

        currentTime = new Date().getTime();

        if (timestamp3hr + timestamp3hrDifferenceRequired < currentTime || timestamp3hr == 0) {
            document.getElementById('3hrCreditsButton').disabled = false;
            document.getElementById('3hrCreditsButtonTimeLeft').textContent = 'Claimable';
        } else {
            document.getElementById('3hrCreditsButton').disabled = true;
            timeLeft = timestamp3hr + timestamp3hrDifferenceRequired - currentTime;
            timeLeftHours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            timeLeftMinutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            timeLeftSeconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
            document.getElementById('3hrCreditsButtonTimeLeft').textContent = timeLeftHours + 'h ' + timeLeftMinutes + 'm ' + timeLeftSeconds + 's';
        }

        if (timestamp12hr + timestamp12hrDifferenceRequired < currentTime || timestamp12hr == 0) {
            document.getElementById('12hrCreditsButton').disabled = false;
            document.getElementById('12hrCreditsButtonTimeLeft').textContent = 'Claimable';
        } else {
            document.getElementById('12hrCreditsButton').disabled = true;
            timeLeft = timestamp12hr + timestamp12hrDifferenceRequired - currentTime;
            timeLeftHours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            timeLeftMinutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            timeLeftSeconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
            document.getElementById('12hrCreditsButtonTimeLeft').textContent = timeLeftHours + 'h ' + timeLeftMinutes + 'm ' + timeLeftSeconds + 's';
        }

        if (timestamp24hr + timestamp24hrDifferenceRequired < currentTime || timestamp24hr == 0) {
            document.getElementById('24hrCreditsButton').disabled = false;
            document.getElementById('24hrCreditsButtonTimeLeft').textContent = 'Claimable';
        } else {
            document.getElementById('24hrCreditsButton').disabled = true;
            timeLeft = timestamp24hr + timestamp24hrDifferenceRequired - currentTime;
            timeLeftHours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            timeLeftMinutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            timeLeftSeconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
            document.getElementById('24hrCreditsButtonTimeLeft').textContent = timeLeftHours + 'h ' + timeLeftMinutes + 'm ' + timeLeftSeconds + 's';
        }

        if (timestamp168hr + timestamp168hrDifferenceRequired < currentTime || timestamp168hr == 0) {
            document.getElementById('168hrCreditsButton').disabled = false;
            document.getElementById('168hrCreditsButtonTimeLeft').textContent = 'Claimable';
        } else {
            // show it as D H M S left:
            document.getElementById('168hrCreditsButton').disabled = true;
            timeLeft = timestamp168hr + timestamp168hrDifferenceRequired - currentTime;
            timeLeftDays = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
            timeLeftHours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            timeLeftMinutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            timeLeftSeconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
            document.getElementById('168hrCreditsButtonTimeLeft').textContent = timeLeftDays + 'd ' + timeLeftHours + 'h ' + timeLeftMinutes + 'm ' + timeLeftSeconds + 's';
        }

        // if none of the buttons are claimable, then change the creditsText to "No rewards available":
        if (document.getElementById('3hrCreditsButton').disabled == true && document.getElementById('12hrCreditsButton').disabled == true && document.getElementById('24hrCreditsButton').disabled == true && document.getElementById('168hrCreditsButton').disabled == true) {
            // console.log("NO REWARDS AVAILABLE")
            document.getElementsByClassName('creditsText')[0].textContent = "No rewards available";
        }
    }, 1000);

</script>

<style>
/* Navigation Bar */
.topNavBar {
    color: #fff;
    padding: 10px 20px;
    background-color: rgba(0, 0, 0, 0.2);
}

.navContainer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1500px;
    margin: 0 auto;
}

/* Links Wrapper */
.navigationLinksWrapper {
    display: flex;
    align-items: center;
}

.navigationLink {
    color: #fff;
    text-decoration: none;
    padding: 7px 10px;
    margin: 0 2px;
    border-radius: 5px;
    transition: background-color 0.3s, color 0.3s;
    border: 2px solid rgba(0, 140, 255, 0.2)
}

.navigationLink:hover,
.navigationLink:focus {
    background-color: var(--highlight-colour);
    border: 2px solid rgb(146, 206, 255);
}

.navigationLinkActive {
    background-color: var(--highlight-colour);
    border: 2px solid rgb(146, 206, 255);
}

/* Button Styling */
#creditsNav {
    background-color: var(--highlight-colour);
    border: none;
    color: #fff;
    padding: 10px 15px;
    margin-left: 10px;
    border-radius: 5px;
    cursor: pointer;
    display: flex;
    align-items: center;
    transition: background-color 0.3s;
}

#creditsNav:hover {
    background-color: rgba(9, 255, 0, 0.199)
}

#creditsDisplay {
    margin-left: 5px;
    font-weight: bold;
}

/* Dark Mode Button */
#darkModeButton {
    background: none;
    border: 2px solid #fff;
    color: #fff;
    font-size: 1.25em;
    cursor: pointer;
    transition: color 0.3s;
}

#darkModeButton:hover {
    color: #ddd;
}

#darkModeIcon {
    display: inline-block;
    transition: transform 0.3s;
}

/* Dropdown Menu for Mobile */
.mobileMenu {
    display: none;
    flex-direction: column;
    background-color: rgba(0, 0, 0, 0.7) !important;
    border: 2px solid #fff;
    padding: 10px;
    position: absolute;
    top: 60px; /* Adjust according to your header height */
    left: 20px;
    border-radius: 5px;
    z-index: 1000;
}

.mobileMenu a {
    padding: 10px;
    margin: 5px 0;
    color: #fff;
    text-decoration: none;
    text-align: left;
    display: block;
}

.mobileMenu a:hover {
    background-color: var(--highlight-colour);
}

/* Mobile Menu Button */
#mobileMenuButton {
    display: none;
    font-size: 2em;
    background: none;
    border: none;
    color: #fff;
    cursor: pointer;
    transition: transform 0.3s;
}

/* animation for the mobile navigation button wobbling */

/* keyframes: */

@keyframes wobble {
    0% {
        transform: rotate(0deg);
    }

    15% {
        transform: rotate(-5deg);
    }

    30% {
        transform: rotate(3deg);
    }

    45% {
        transform: rotate(-3deg);
    }

    60% {
        transform: rotate(2deg);
    }

    75% {
        transform: rotate(-1deg);
    }

    100% {
        transform: rotate(0deg);
    }
}

/* apply the keyframes to the mobileMenuButton: */
#mobileMenuButton {
    animation: wobble 1s infinite;
}

/* Responsive Styles */
@media (max-width: 1300px) {
    .navigationLinksWrapper {
        display: none;
    }

    #mobileMenuButton {
        display: block;
    }

    .mobileMenu {
        display: flex;
        display: none;
    }
}
</style>

<nav class="topNavBar">
    <div class="navContainer">
        <!-- Desktop Navigation Links -->
        <div class="navigationLinksWrapper">
            <a id="navigationLink-generator" class="navigationLink" href="/">AI Generator</a>
            <a id="navigationLink-booru" class="navigationLink" href="/booru">Booru</a>
            <a id="navigationLink-leaderboard" class="navigationLink" href="/leaderboard?type=booru">Leaderboard</a>
            <a id="navigationLink-download" class="navigationLink" href="/download">Download</a>
            <a id="navigationLink-paypalshop" class="navigationLink" href="/paypal-shop">Buy Credits</a>
            <a id="navigationLink-metadata" class="navigationLink" href="/metadata">Metadata</a> 
            <a class="navigationLink" href="https://discord.gg/AvbQuRmh7t">Discord</a>
            <a id="navigationLink-suggestions" class="navigationLink" href="/suggestions">Suggestions</a>
            <a id="navigationLink-redeem" class="navigationLink" href="/redeem-code">Redeem</a>
            <% if (session.loggedIn) { %>
                <a id="navigationLink-history" class="navigationLink" href="/image-history">History</a>
                <a class="navigationLink" href="/logout">Logout</a>
                <a id="navigationLink-profile" class="navigationLink" href="/profile/<%=session.accountId%>">My Profile</a>
            <% } else { %>
                <a class="navigationLink" href="/login">Login</a>
            <% } %>
            
        </div>

        <!-- Mobile Menu Button -->
        <button id="mobileMenuButton">☰</button>

        <!-- Mobile Dropdown Menu -->
        <div class="mobileMenu frosted" id="mobileMenu">
            <a href="/">AI Generator</a>
            <a href="/projects">Projects</a>
            <a href="/booru">Booru</a>
            <a href="/leaderboard?type=booru">Leaderboard</a>
            <a href="https://discord.gg/AvbQuRmh7t">Discord</a>
            <a href="/download">Download</a>
            <a href="/suggestions">Suggestions</a>
            <a href="/redeem-code">Redeem</a>
            <a href="/paypal-shop">Buy Credits</a>
            <% if (session.loggedIn) { %>
                <a href="/image-history">History</a>
                <a href="/logout">Logout</a>
                <a href="/profile/<%=session.accountId%>">My Profile</a>
            <% } else { %>
                <a href="/login">Login</a>
            <% } %>
        </div>
        <div id="creditsButtonDiv">
            <button id="creditsNav">Credits: <span id="creditsDisplay">0</span></button>
        </div>
        <div id="notificationsDiv">
            <button id="notificationsNav">🔔</button>
        </div>
        
        <!-- settings button that opens jscammie.com/settings: -->
        <div id="settingsDiv">
            <button id="settingsNav" onclick='window.open("/settings/")'>⚙️</button>
        </div>
        

        <!-- Dark Mode Button -->
        <button id="darkModeButton">
            <span id="darkModeIcon">🌙</span>
        </button>
    </div>
</nav>

<style>
    /* make it so the credits text is below the credits button and centered: */
    .creditsText {
        position: absolute;
        text-align: center;
        font-size: 1em;
        font-weight: bold;
        color: white;
        margin-top: -5px;
        cursor: pointer;
        background-color: rgba(0, 0, 0, 0.5);
        padding: 5px;
        border-radius: 5px;
        transition: background-color 0.3s ease, transform 0.2s ease;
        z-index: 1000;
    }

    .creditsHowToSummary {
        background-color: rgba(0, 0, 0, 0.1);
        font-size: 18px;
        color: #ff9dfc;
        border-radius: 8px;
        padding: 8px;
        transition: all 0.3s ease;
        border: 2px solid rgba(255, 255, 255, 0.2);
    }

    .creditsHowToSummary:hover {
        background-color: rgba(0,0,0,0);
        border: 2px solid #ffffff;
    }
</style>

<script>

    // if the current page is one of the navigation links, then highlight it by setting it to :focus :
    let currentPath = window.location.pathname;

    if (currentPath.includes('booru')) {
        currentPath = currentPath.split('/')
        currentPath = `/${currentPath[1]}`
    } else if (currentPath.includes('leaderboard')) {
        currentPath = '/leaderboard'
    }

    let accountId = '<%=session.accountId%>'

    switch(currentPath) {
    
        case '/metadata':
            document.getElementById('navigationLink-metadata').classList.add('navigationLinkActive');
            break;

        case '/leaderboard':
            document.getElementById('navigationLink-leaderboard').classList.add('navigationLinkActive');
            break;
        
        case '/':
            document.getElementById('navigationLink-generator').classList.add('navigationLinkActive');
            break;

        case '/booru':
            document.getElementById('navigationLink-booru').classList.add('navigationLinkActive');
            break;

        case '/download/':
            document.getElementById('navigationLink-download').classList.add('navigationLinkActive');
            break;

        case '/suggestions':
            document.getElementById('navigationLink-suggestions').classList.add('navigationLinkActive');
            break;

        case '/redeem-code':
            document.getElementById('navigationLink-redeem').classList.add('navigationLinkActive');
            break;

        case '/paypal-shop':
            document.getElementById('navigationLink-paypalshop').classList.add('navigationLinkActive');
            break;

        case '/image-history':
            document.getElementById('navigationLink-history').classList.add('navigationLinkActive');
            break;

        case `/profile/${accountId}`:
            document.getElementById('navigationLink-profile').classList.add('navigationLinkActive');
            break;
    }

</script>

<script>
    creditsButtonDiv = document.getElementById('creditsButtonDiv');
    // make the credits div say "Claim free credits!" underneath the "creditsNav" ID'd button:
    creditsButtonDiv.innerHTML += '<p class="creditsText">Click to claim credits!</p>';

    // center the credits text every few seconds:
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    const centerCreditsText = debounce(() => {
        document.getElementsByClassName('creditsText')[0].style.left = 
            (document.getElementById('creditsNav').offsetLeft + 
            document.getElementById('creditsNav').offsetWidth / 2 - 
            document.getElementsByClassName('creditsText')[0].offsetWidth / 2) + 'px';
    }, 250);

    // setInterval(() => {
    //     centerCreditsText();
    // }, 100);

    // use requestAnimationFrame to center the credits text:
    function animateCreditsText() {
        requestAnimationFrame(() => {
            centerCreditsText();
            animateCreditsText();
        });
    }

    animateCreditsText();

    // event listener for the credits text to trigger the button click:
    document.getElementsByClassName('creditsText')[0].addEventListener('click', () => {
        document.getElementById('creditsNav').click();
    });

    // have the creditsText background pulsate:
    setInterval(() => {
        document.getElementsByClassName('creditsText')[0].style.backgroundColor = 'rgba(0, 0, 0, 0.2)';
        setTimeout(() => {
            document.getElementsByClassName('creditsText')[0].style.backgroundColor = 'rgba(0, 0, 0, 0.4)';
        }, 500);
    }, 1000);

</script>


<style>
    #topSiteText {
        background-color: rgba(0, 0, 0, 0.2);
        color: white;
        padding: 10px;
        text-align: center;
        font-size: 1em;
        font-weight: bold;
    }
</style>

<div id="topSiteText"></div>

<script>
    let topSiteTextArray = [
        // "Low on credits? Check out the <a href='https://www.jscammie.com/paypal-shop'>'Credits Shop'</a> to buy more!",
        "Check out the <a href='https://www.jscammie.com/booru'>'Booru'</a> for some cool user-created images & to earn credits!",
        // "Check out the <a href='https://www.discord.gg/AvbQuRmh7t'>'Discord'</a> to compete in contests for credits and more!",
    ]

    let topSiteText = document.getElementById('topSiteText');

    // set the topSiteText to a random element from the array:
    topSiteText.innerHTML = topSiteTextArray[Math.floor(Math.random() * topSiteTextArray.length)];

</script>

<script>
    // Mobile Menu Toggle
    document.getElementById('mobileMenuButton').addEventListener('click', function () {
        const mobileMenu = document.getElementById('mobileMenu');
        mobileMenu.style.display = mobileMenu.style.display === 'none' || mobileMenu.style.display === '' ? 'block' : 'none';
    });
</script>

<div id="notificationsPopup" style="display: none;">
    <h2> - Notifications:</h2>
    <div class="notificationList" id="notificationsList">
        <p>No notifications</p>
    </div>
    <button id="loadNotificationsButton">Load more</button>
</div>

<style>

    .activeNotificationsPopup {
        display: block !important;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: var(--background-colour);
        color: white;
        padding: 8px;
        border-radius: 12px;
        border: 2px solid rgb(255, 143, 246);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        z-index: 1000;
        max-width: 600px;
        width: 75%;
    }

    .notification {
        display: flex;
        flex-direction: column;
        margin: 8px;
        padding: 8px;
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 8px;
    }

    .notificationType {
        font-size: 18px;
        color: #ffffff;
    }

    .notificationMessage {
        font-size: 16px;
    }

    .notificationList {
        display: flex;
        flex-direction: column;
        height: 40vh;
        overflow-y: scroll;
    }

    #notificationsNav {
        transition: all 0.5s ease;
    }




    .notification-credits {
        background-color: rgba(0, 38, 255, 0.2) !important;
    }

    .notification-credits:hover {
        background-color: rgba(0, 38, 255, 0.4) !important;
    }




    .notification-moderation {
        background-color: rgba(255, 0, 0, 0.2) !important;
    }

    .notification-moderation:hover {
        background-color: rgba(255, 0, 0, 0.4) !important;
    }



    .notification-booru {
        background-color: rgba(0, 255, 38, 0.2) !important;
    }

    .notification-booru:hover {
        background-color: rgba(0, 255, 38, 0.4) !important;
    }




    .notification-generator {
        background-color: rgba(119, 0, 255, 0.2) !important;
    }

    .notification-generator:hover {
        background-color: rgba(119, 0, 255, 0.4) !important;
    }




    .notification-dailies {
        background-color: rgba(255, 255, 0, 0.2) !important;
    }

    .notification-dailies:hover {
        background-color: rgba(255, 255, 0, 0.4) !important;
    }

</style>


<script>
    let notificationsPopup = document.getElementById('notificationsPopup');
    let notificationsList = document.getElementById('notificationsList');
    let loadNotificationsButton = document.getElementById('loadNotificationsButton');

    // send a post request to get-notifications to get the notifications:
    let notificationsReceived = []

    let notificationsArray = []
    let notificationsChecked = '<%=session.notificationsChecked%>'

    let notificationCount = 0

    function buildNotificationsFromArray(newNotificationsChecked) {
        
        Number(notificationsChecked)

        notificationsChecked = newNotificationsChecked ?? notificationsChecked

        if (notificationsArray.length == 0) {
            notificationsList.innerHTML = "<p>No notifications</p>";
        }

        // have the notificationsButton pulse background color if there are new notifications:
        if (notificationsArray.length > 0) {
            if (notificationsArray[0].timestamp > notificationsChecked) {
                // have a timeout to make the background color pulse, but make sure the background color is reset after the timeout:
                notificationsNav = document.getElementById('notificationsNav');
                notificationsNav.style.backgroundColor = 'rgba(255, 0, 0, 0.7)';
                setTimeout(() => {
                    notificationsNav.style.backgroundColor = 'rgba(0, 0, 0, 0.2)';
                }, 750);
            }
        }


        // if the notifications havent changed, then don't update the notificationsList

        if (notificationCount == notificationsArray.length) {
            return;
        } else {
            notificationsList.innerHTML = "";
        }

        if (notificationsArray.length > 0) {
            notificationCount = notificationsArray.length
        }

        notificationsArray.forEach(notification => {
            notificationHTML = `
                <div class="notification notification-${notification.type}">
                    <div class="notificationType"> ${notification.type} | ${new Date(Number(notification.timestamp)).toLocaleString()} </div>
                    <div class="notificationMessage"> ${notification.message} </div>
                </div>
            `

            notificationsList.innerHTML += notificationHTML;
        });
    }

    const MAX_NOTIFICATIONS = 50;

    function getNotifications() {
        // if the user is not logged in, then don't get notifications:
        
        fetch('/get-notifications', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                notificationsReceived,
                popupOpened: document.getElementById('notificationsPopup').classList.contains('activeNotificationsPopup')
            })
        })
        .then(response => response.json())
        .then(data => {
            data.notifications.forEach(notification => {
                if (!notificationsReceived.includes(notification.notificationId)) {
                    notificationsReceived.push(notification.notificationId);
                    notificationsArray.push(notification);
                }
            });

            notificationsArray.sort((a, b) => {
                return b.timestamp - a.timestamp;
            });

            // Trim notifications to prevent memory buildup
            if (notificationsArray.length > MAX_NOTIFICATIONS) {
                notificationsArray = notificationsArray.slice(0, MAX_NOTIFICATIONS);
            }

            buildNotificationsFromArray(data.notificationsChecked);
        });
    }

    // add an event listener to the notifications button:
    document.getElementById('notificationsNav').addEventListener('click', () => {
        if (!notificationsPopup.classList.contains('activeNotificationsPopup')) {
            notificationsPopup.classList.add('activeNotificationsPopup');
        } else {
            notificationsPopup.classList.remove('activeNotificationsPopup');
        }
    });

    document.addEventListener('click', function (event) {
        var isClickInside = document.getElementById('notificationsPopup').contains(event.target);
        var isClickOnButton = document.getElementById('notificationsNav').contains(event.target);
        if (!isClickInside && !isClickOnButton) {
            document.getElementById('notificationsPopup').classList.remove('activeNotificationsPopup');
        }
    });

    <% if (session.loggedIn) { %>
        document.getElementById('loadNotificationsButton').addEventListener('click', () => {
            getNotifications();
        });

        getNotifications();

        setInterval(() => {
            getNotifications();
        }, 10000);
    <% } %>

</script>

<div id="creditsDailyPopup" style="display: none;">
    <div class="dailiesDivGrid">
        <div class="dailiesDivSideBySide">
            <p class="topTextCreditsButton">3 Hours Rewards (50 Credits)</p>
            <button id="3hrCreditsButton" class="creditsButton"><span id="3hrCreditsButtonTimeLeft"></span> / 3 Hours</button>
        </div>
        <div class="dailiesDivSideBySide">
            <p class="topTextCreditsButton">12 Hours Rewards (100 Credits)</p>
            <button id="12hrCreditsButton" class="creditsButton"><span id="12hrCreditsButtonTimeLeft"></span> / 12 Hours</button>
        </div>
        <div class="dailiesDivSideBySide">
            <p class="topTextCreditsButton">24 Hours Rewards (200 Credits)</p>
            <button id="24hrCreditsButton" class="creditsButton"><span id="24hrCreditsButtonTimeLeft"></span> / 24 Hours</button>
        </div>
        <div class="dailiesDivSideBySide">
            <p class="topTextCreditsButton">7 Days Rewards (500 Credits)</p>
            <button id="168hrCreditsButton" class="creditsButton"><span id="168hrCreditsButtonTimeLeft"></span> / 7 Days</button>
        </div>
    </div>

    <div class="dailiesDivSideBySide">
        <p class="topTextCreditsButton">Credits History</p>
        <!-- <a href="/credits-history" target="_blank" class="creditsButton">View</a> -->
        <button class="creditsButton" onclick="window.open('/credits-history', '_blank')">View Credits History</button>
    </div>

     <div class="dailiesDivSideBySide">
        <p class="topTextCreditsButton">Buy Credits!</p>
        <button class="creditsButton" onclick="window.open('/paypal-shop', '_blank')">Buy Credits</button>
    </div>

    <div class="howToGainCredits">
    
        <details>

            <summary class="creditsHowToSummary">How to gain credits:</summary>

            <!-- <li>
                <p>Every 3 hours, 12 hours, 24 hours, and 7 days you can claim free credits! The amount of credits you can claim increases the longer you wait between claims.</p>
                <p>Posting on the <a href="https://www.jscammie.com/booru">Booru</a> can also earn you credits when the image gets approved! (rated SFW/SUGGESTIVE/NSFW/EXTREME, by default they will be rated as NA and wont be visible to others)</p>
                <p>Voting on posts on the <a href="https://www.jscammie.com/booru">Booru</a> can also earn you credits!</p>
                <p>Getting 1st, 2nd, or 3rd place in the discord contests can earn you credits!</p>
            </li> -->

            <!-- make the above a list: -->
            <ul>
                <li>Every 3 hours, 12 hours, 24 hours, and 7 days you can claim free credits! The amount of credits you can claim increases the longer you wait between claims.</li>
                <br>
                <li>Posting on the <a href="https://www.jscammie.com/booru">Booru</a> can also earn you credits when the image gets approved! (rated SFW / SUGGESTIVE / NSFW / EXTREME, by default they will be rated as NA and wont be visible to others)</li>
                <br>
                <li>Voting on posts on the <a href="https://www.jscammie.com/booru">Booru</a> can also earn you credits!</li>
                <br>
                <li>Competing in the discord contests can earn you credits!</li>
                <br>
                <li>Logging in gives you 500 credits as a starting bonus!</li>
                <br>
                <li>You can pay for credits by clicking the "Buy" button above!</li>
            </ul>

        </details>
  
    
    </div>

</div>

<style>

/* add a blur and darken effect to anything behind the creditsDailyPopup, also add a clean transition: */
    #creditsDailyPopup {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: var(--background-colour);
        color: white;
        padding: 8px;
        border-radius: 12px;
        border: 2px solid rgb(255, 143, 246);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        z-index: 1000;
        max-width: 700px;
        width: 75%;
    }

    .dailiesDivGrid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 10px;
    }

    .dailiesDivSideBySide {
        display: flex;
        flex-direction: column;
        text-align: center;
    }
    
    .topTextCreditsButton {
        font-size: 18px;
        margin-bottom: 2px;
        color: #ff9dfc;
    }

    .howToGainCredits {
        margin-top: 10px;
        border-radius: 8px;
        padding: 8px;
        background-color: rgba(0, 0, 0, 0.2);
    }

    .creditsButton {
        background-color: rgba(0, 0, 0, 0.2);
        color: white;
        padding: 12px;
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        /* center: */
        margin: 0 auto;
        width: 100%;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .creditsButton:hover {
        background-color: var(--highlight-colour-hover);
        transform: translateY(-2px);
    }

    .creditsButton:active {
        background-color: var(--highlight-colour-active);
        transform: translateY(0);
    }

    .creditsButton:disabled {
        background-color: rgba(0, 0, 0, 0.2);
        cursor: not-allowed;
        opacity: 0.6;
    }

    .creditsButton span {
        font-weight: bold;
    }
</style>


<script>

    // when the creditsNav button is clicked, show the creditsDailyPopup: on the center of the screen:
    document.getElementById('creditsNav').addEventListener('click', () => {
        if (document.getElementById('creditsDailyPopup').style.display == 'none') {
            // make it side by side the divs inside it:
            document.getElementById('creditsDailyPopup').style.display = 'inline-block';
        } else {
            document.getElementById('creditsDailyPopup').style.display = 'none';
        }
    });

    document.getElementById('creditsText').addEventListener('click', () => {
        if (document.getElementById('creditsDailyPopup').style.display == 'none') {
            // make it side by side the divs inside it:
            document.getElementById('creditsDailyPopup').style.display = 'inline-block';
        } else {
            document.getElementById('creditsDailyPopup').style.display = 'none';
        }
    });

</script>

<script>
    const creditsDisplay = document.getElementById('creditsDisplay');

    // every .1 seconds, check if the creditsDisplay value is higher or lower than the previous value:
    // the credits display is updated by other scripts:
    let previousCredits = 0;
    let currentCredits = 0;
    setInterval(() => {
        currentCredits = parseInt(creditsDisplay.textContent);
        if (currentCredits > previousCredits) {
            creditsDisplay.style.color = 'green';
            setTimeout(() => {
                creditsDisplay.style.color = 'white';
            }, 1000);
        } else if (currentCredits < previousCredits) {
            creditsDisplay.style.color = 'red';
            setTimeout(() => {
                creditsDisplay.style.color = 'white';
            }, 1000);
        }
        previousCredits = currentCredits;
    }, 100);
</script>

<span hidden style="display: none;" id="loggedIn"></span>

<script>

    function sendDailiesRequest(type) {

        // check if the user is logged in, if not then don't send the request:
        if (document.getElementById('loggedIn').textContent == 'false') {
            return;
        }

        // make a request to post /dailies:
        fetch('/dailies', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: type
            })
        }).then(response => response.json())
            .then(data => {
                // console.log(data);
            });
    }

    document.getElementById('3hrCreditsButton').addEventListener('click', () => {
        sendDailiesRequest('3hr');
    });

    document.getElementById('12hrCreditsButton').addEventListener('click', () => {
        sendDailiesRequest('12hr');
    });

    document.getElementById('24hrCreditsButton').addEventListener('click', () => {
        sendDailiesRequest('24hr');
    });

    document.getElementById('168hrCreditsButton').addEventListener('click', () => {
        sendDailiesRequest('168hr');
    });

    updateUserProfile()

</script>

<style>

    .dividingLine {
        background-color: rgb(255, 255, 255);
        box-shadow: 0 4px 15px rgba(255, 255, 255, 1);
        height: 2px;
    }
    
</style>

<div class="dividingLine"></div>



<!-- script to enable darkmode, change how a button looks with emoji on the navigation -->
<script>
    const darkModeButton = document.getElementById('darkModeButton');
    const darkModeIcon = document.getElementById('darkModeIcon');

    function toggleDarkMode(darkmodeStatus) {
        // console.log(darkmodeStatus + " darkmodeStatus")
        if (darkmodeStatus == "false") {
            document.body.classList.remove('dark');
            document.getElementsByClassName('topNavBar')[0].classList.remove('dark');
            darkModeIcon.textContent = '☀️';
        } if (darkmodeStatus == "true") {
            document.body.classList.add('dark');
            document.getElementsByClassName('topNavBar')[0].classList.add('dark');
            darkModeIcon.textContent = '🌙';
        }
    }



    darkModeButton.addEventListener('click', () => {
        fetch('/toggle-darkmode', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    darkmode: true
                })
            });
        if (document.body.classList.contains('dark')) {
            toggleDarkMode("false")
        } else {
            toggleDarkMode("true")
        }
    });

</script>

<% if (session.darkmode == true) { %>
    <span hidden id="isDarkMode">true</span>
<% } if (session.darkmode == false) { %>
    <span hidden id="isDarkMode">false</span>
<% } %>

<script>
    
    document.addEventListener('DOMContentLoaded', (event) => {
        // Temporarily disable transitions
        document.body.classList.add('no-transition');
        document.getElementsByClassName('topNavBar')[0].classList.add('no-transition');

        const isDarkMode = document.getElementById('isDarkMode').textContent
        toggleDarkMode(isDarkMode); // Assuming toggleDarkMode is a function that correctly toggles the dark mode.

        // Use setTimeout to delay the removal of 'no-transition', allowing changes to apply without transition
        setTimeout(() => {
            document.body.classList.remove('no-transition');
            document.getElementsByClassName('topNavBar')[0].classList.remove('no-transition');
        }, 50); // 50 milliseconds is usually enough, but this can be adjusted as needed
    });

</script>


<script>

    function showHideNavigationOverlay(value) {
        if (value == 'show') {
            document.getElementById('navigationOverlay').style.display = 'block';
        } else if (value == 'hide') {
            document.getElementById('navigationOverlay').style.display = 'none';
        }
    }

    // add an event listener to the navigationOverlay to hide it when clicked:
    document.getElementById('navigationOverlay').addEventListener('click', () => {
        showHideNavigationOverlay('hide');
        document.getElementById('creditsDailyPopup').style.display = 'none';
        document.getElementById('notificationsPopup').classList.remove('activeNotificationsPopup');
    });

    // event listeners for the creditsNav button to show the navigationOverlay and the notificationsPopup:
    document.getElementById('creditsNav').addEventListener('click', () => {
        showHideNavigationOverlay('show');
    });

    document.getElementById('notificationsNav').addEventListener('click', () => {
        showHideNavigationOverlay('show');
    });

    // add ESC keyboard event listener to hide the navigationOverlay and any other popups if active
    document.addEventListener('keydown', function (event) {
        if (event.key === "Escape") {
            showHideNavigationOverlay('hide');
            document.getElementById('notificationsPopup').classList.remove('activeNotificationsPopup');
            document.getElementById('creditsDailyPopup').style.display = 'none';
        }
    });

</script>


<style>
    .tooltiptext {
        visibility: hidden;
        opacity: 0;
        transition: visibility 0s, opacity 0.3s;
        /* make it take up no room on the page by default: */
        position: absolute;
        padding: 10px;
        margin: 10px;
        background-color: rgba(0, 0, 0, 0.5);
        color: rgb(255, 144, 144);
        
    }

    /* have a round border around the thingy: */

    .tooltip {
        cursor: pointer;
        border-radius: 50%;
        border: 1px solid rgb(255, 255, 255);
        width: 24px;
        height: 24px;
        display: inline-block;
        text-align: center;
        line-height: 24px;
    }

    .tooltip:hover {
        /* animate it wiggling and scaling up and down: */
        animation: wiggle 0.3s ease infinite;
        transition: transform 0.2s ease;
    }

    @keyframes wiggle {
        0% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.1);
        }
        100% {
            transform: scale(1);
        }
    }

</style>

<script>
    function showTooltip(element) {
        const tooltip = element.nextElementSibling;

        // tooltip state:
        if (tooltip.style.visibility === 'visible') {
            tooltip.style.opacity = '0';
            // wait 0.3 seconds then hide the tooltip:
            setTimeout(() => {
                tooltip.style.visibility = 'hidden';
                tooltip.style.position = 'absolute';
            }, 300)
            return;
        } else {
            tooltip.style.position = 'relative';
            tooltip.style.visibility = 'visible';
            tooltip.style.opacity = '1';
            // wait 5 seconds then hide the tooltip, but if they toggle the tooltip on and off reset the timeout:
            setTimeout(() => {
                tooltip.style.opacity = '0';
                setTimeout(() => {
                    tooltip.style.visibility = 'hidden';
                    tooltip.style.position = 'absolute';
                }, 300)
            }, 15000)
        }
    }
</script>


<style>

    /* have the alert be centered and ontop of everything: */
    .globalAlert {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        padding: 8px;
        border-radius: 12px;
        z-index: 90000;
        max-width: 600px;
        width: 75%;
        text-align: center;
        font-size: 24px;
    }

    .globalAlertButtons {
        display: flex;
        justify-content: center;
        gap: 10px;
    }

    .globalAlertButton {
        background-color: rgba(0, 0, 0, 0.2);
        color: white;
        padding: 8px;
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

</style>

<div id="globalAlert" class="globalAlert" style="display: none;">
    <p id="globalAlertText"></p>
</div>

<script>
    async function globalAlert(options) {
        let message = options.message || 'No message provided';
        let question = options.question || false;
        let optionFunctions = options.options || { yes: () => { }, no: () => { } };

        console.log("globalAlert function called with message: " + message);

        // Show the navigation overlay (assuming this function exists)
        showHideNavigationOverlay('show');

        // Return a Promise so you can await it
        return new Promise((resolve, reject) => {
            // If there is a question, show a custom confirm dialog:
            if (question) {
                // Show the globalAlert div:
                document.getElementById('globalAlert').style.display = 'block';
                document.getElementById('globalAlertText').textContent = message;

                // Create the buttons:
                let buttons = document.createElement('div');
                buttons.classList.add('globalAlertButtons');
                
                Object.keys(optionFunctions).forEach(key => {
                    let button = document.createElement('button');
                    // Capitalize the first letter of the key:
                    button.textContent = key.charAt(0).toUpperCase() + key.slice(1);
                    button.classList.add('globalAlertButton');
                    button.addEventListener('click', () => {
                        // Hide the globalAlert div and call the corresponding function:
                        document.getElementById('globalAlert').style.display = 'none';
                        // Hide the navigationOverlay:
                        showHideNavigationOverlay('hide');
                        optionFunctions[key]();
                        // Resolve the promise when a button is clicked
                        if (document.getElementsByClassName('globalAlertButtons').length > 0) {
                            document.getElementsByClassName('globalAlertButtons')[0].remove();
                        }
                        resolve(key);  // Resolve with the clicked option (yes/no)
                    });
                    buttons.appendChild(button);
                });

                // add the ability to use arrow keys and enter key to select the buttons:
                let buttonIndex = 0;
                document.addEventListener('keydown', (event) => {
                    if (event.key === 'ArrowRight' || event.key === 'ArrowDown') {
                        buttonIndex++;
                        if (buttonIndex >= buttons.children.length) {
                            buttonIndex = 0;
                        }
                    } else if (event.key === 'ArrowLeft' || event.key === 'ArrowUp') {
                        buttonIndex--;
                        if (buttonIndex < 0) {
                            buttonIndex = buttons.children.length - 1;
                        }
                    } else if (event.key === 'Enter') {
                        buttons.children[buttonIndex].click();
                    }
                    buttons.children.forEach((button, index) => {
                        if (index === buttonIndex) {
                            button.style.backgroundColor = 'rgba(255, 255, 255, 0.2)';
                        } else {
                            button.style.backgroundColor = 'rgba(0, 0, 0, 0.2)';
                        }
                    });
                });

                // Append the buttons div to the globalAlert div:
                document.getElementById('globalAlert').appendChild(buttons);

            } else {
                // If there's no question, just show the alert and auto-hide after 5 seconds:
                document.getElementById('globalAlert').style.display = 'block';
                document.getElementById('globalAlertText').textContent = message;

                // Hide the globalAlert div after 5 seconds:
                setTimeout(() => {
                    document.getElementById('globalAlert').style.display = 'none';
                    // Hide the navigationOverlay:
                    showHideNavigationOverlay('hide');
                    // Resolve the promise immediately (no question)
                    resolve('no');  // Could resolve as 'no' since no button is clicked
                    // remove the buttons if they exist:
                    if (document.getElementsByClassName('globalAlertButtons').length > 0) {
                        document.getElementsByClassName('globalAlertButtons')[0].remove();
                    }
                }, 5000);
            }
        });
    }

    let intervalIds = [];
    <% if (session.loggedIn) { %> 
        // Check for new notifications and update the user profile every 2 seconds
        let notificationsInterval = setInterval(getNotifications, 2000);
        let profileUpdateInterval = setInterval(updateUserProfile, 1000);

        intervalIds.push(notificationsInterval, profileUpdateInterval);
    <% } %>

    // Add cleanup function to be called when page unloads
    function cleanupIntervals() {
        intervalIds.forEach(clearInterval);
    }

    window.addEventListener('beforeunload', cleanupIntervals);

</script>


<script src="https://www.paypal.com/sdk/js?client-id=AfyjfgbZdN8UH9dTHx2Fn47vKkEt4kJRFo_86DT4Bk_J3uSfXOJtIFamEyRE06V_U0DFRRrPcAgR5mDD"></script>