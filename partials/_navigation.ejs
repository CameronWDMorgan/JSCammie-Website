<link rel='stylesheet' href='/style.css' />

<script id="aclib" type="text/javascript" src="//acscdn.com/script/aclib.js"></script>

<style>
/* Navigation Bar */
.topNavBar {
    color: #fff;
    padding: 10px 20px;
    background-color: rgba(0, 0, 0, 0.2);
}

.navContainer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1200px;
    margin: 0 auto;
}

/* Links Wrapper */
.navLinksWrapper {
    display: flex;
    align-items: center;
}

.navLink {
    color: #fff;
    text-decoration: none;
    padding: 10px 15px;
    margin: 0 5px;
    border-radius: 5px;
    transition: background-color 0.3s, color 0.3s;
}

.navLink:hover,
.navLink:focus {
    background-color: var(--highlight-colour);
}

/* Button Styling */
#creditsNav {
    background-color: var(--highlight-colour);
    border: none;
    color: #fff;
    padding: 10px 15px;
    margin-left: 10px;
    border-radius: 5px;
    cursor: pointer;
    display: flex;
    align-items: center;
    transition: background-color 0.3s;
}

#creditsNav:hover {
    background-color: rgba(9, 255, 0, 0.199)
}

#creditsDisplay {
    margin-left: 5px;
    font-weight: bold;
}

/* Dark Mode Button */
#darkModeButton {
    background: none;
    border: 2px solid #fff;
    color: #fff;
    font-size: 1.25em;
    cursor: pointer;
    transition: color 0.3s;
}

#darkModeButton:hover {
    color: #ddd;
}

#darkModeIcon {
    display: inline-block;
    transition: transform 0.3s;
}

/* Dropdown Menu for Mobile */
.mobileMenu {
    display: none;
    flex-direction: column;
    background-color: rgba(0, 0, 0, 0.7) !important;
    border: 2px solid #fff;
    border-radius: 5px;
    padding: 10px;
    position: absolute;
    top: 60px; /* Adjust according to your header height */
    left: 20px;
    border-radius: 5px;
    z-index: 1000;
}

.mobileMenu a {
    padding: 10px;
    margin: 5px 0;
    color: #fff;
    text-decoration: none;
    text-align: left;
    display: block;
}

.mobileMenu a:hover {
    background-color: var(--highlight-colour);
}

/* Mobile Menu Button */
#mobileMenuButton {
    display: none;
    font-size: 1.5em;
    background: none;
    border: none;
    color: #fff;
    cursor: pointer;
}

/* Responsive Styles */
@media (max-width: 768px) {
    .navLinksWrapper {
        display: none;
    }

    #mobileMenuButton {
        display: block;
    }

    .mobileMenu {
        display: flex;
        display: none;
    }
}
</style>

<nav class="topNavBar">
    <div class="navContainer">
        <!-- Desktop Navigation Links -->
        <div class="navLinksWrapper">
            <a class="navlink" href="/home">üè† Home</a>
            <a class="navlink" href="/">üñ•Ô∏è AI Generator</a>
            <a class="navlink" href="/booru">üñºÔ∏è Booru</a>
            <a class="navlink" href="https://ko-fi.com/jscammie">ü•∫ Donate</a>
            <% if (session.loggedIn) { %>
                <a class="navlink" href="/logout">‚ùåLogout</a>
                <a class="navlink" href="/profile/<%=session.accountId%>">‚≠ê My Profile</a>
            <% } else { %>
                <a class="navlink" href="/login">Login</a>
            <% } %>
            <a class="navlink" href="https://discord.gg/AvbQuRmh7t">üí¨ Discord</a>
            
        </div>

        <!-- Mobile Menu Button -->
        <button id="mobileMenuButton">‚ò∞</button>

        <!-- Mobile Dropdown Menu -->
        <div class="mobileMenu frosted" id="mobileMenu">
            <a href="/home">üè† Home</a>
            <a href="/">üñ•Ô∏è AI Generator</a>
            <a href="/booru">üñºÔ∏è Booru</a>
            <a href="https://ko-fi.com/jscammie">ü•∫ Donate</a>
            <% if (session.loggedIn) { %>
                <a href="/logout">‚ùåLogout</a>
                <a href="/profile/<%=session.accountId%>">‚≠ê My Profile</a>
            <% } else { %>
                <a href="/login">Login</a>
            <% } %>
            <a href="https://discord.gg/AvbQuRmh7t">üí¨ Discord</a>
        </div>

        <button id="creditsNav">Credits: <span id="creditsDisplay">0</span></button>

        <!-- Dark Mode Button -->
        <button id="darkModeButton">
            <span id="darkModeIcon">üåô</span>
        </button>
    </div>
</nav>

<style>
    #topSiteText {
        background-color: rgba(0, 0, 0, 0.5);
        color: white;
        padding: 10px;
        text-align: center;
        font-size: 1em;
        font-weight: bold;
    }
</style>

<div id="topSiteText"></div>

<script>
    let topSiteTextArray = [
        "Consider answering the Survey by clicking/tapping <a href='https://forms.gle/dbRsyWEA5RSZL3qb6'>'Here'</a> to help make the site better!",
        "Consider donating by clicking/tapping <a href='https://ko-fi.com/jscammie'>'Here'</a> to help keep the site running! ü•∫",
        "Check out the <a href='https://www.jscammie.com/booru'>'Booru'</a> for some cool user-created images!",
    ]

    let topSiteText = document.getElementById('topSiteText');

    // set the topSiteText to a random element from the array:
    topSiteText.innerHTML = topSiteTextArray[Math.floor(Math.random() * topSiteTextArray.length)];

</script>

<script>
    // Mobile Menu Toggle
    document.getElementById('mobileMenuButton').addEventListener('click', function () {
        const mobileMenu = document.getElementById('mobileMenu');
        mobileMenu.style.display = mobileMenu.style.display === 'none' || mobileMenu.style.display === '' ? 'block' : 'none';
    });
</script>



<div id="creditsDailyPopup" style="display: none;">
    <div class="dailiesDivSideBySide">
        <p class="topTextCreditsButton">3 Hours Rewards (50 Credits)</p>
        <button id="3hrCreditsButton" class="creditsButton"><span id="3hrCreditsButtonTimeLeft"></span> / 3 Hours</button>
    </div>
    <div class="dailiesDivSideBySide">
        <p class="topTextCreditsButton">12 Hours Rewards (100 Credits)</p>
        <button id="12hrCreditsButton" class="creditsButton"><span id="12hrCreditsButtonTimeLeft"></span> / 12 Hours</button>
    </div>
    <div class="dailiesDivSideBySide">
        <p class="topTextCreditsButton">24 Hours Rewards (200 Credits)</p>
        <button id="24hrCreditsButton" class="creditsButton"><span id="24hrCreditsButtonTimeLeft"></span> / 24 Hours</button>
    </div>
    <div class="dailiesDivSideBySide">
        <p class="topTextCreditsButton">7 Days Rewards (500 Credits)</p>
        <button id="168hrCreditsButton" class="creditsButton"><span id="168hrCreditsButtonTimeLeft"></span> / 7 Days</button>
    </div>

    <div class="dailiesDivSideBySide">
        <p class="topTextCreditsButton">Credits History</p>
        <a href="/credits-history" target="_blank" class="creditsButton">View</a>
    </div>

</div>

<style>

/* add a blur and darken effect to anything behind the creditsDailyPopup, also add a clean transition: */
    #creditsDailyPopup {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: var(--background-colour);
        color: white;
        padding: 8px;
        border-radius: 12px;
        border: 2px solid rgb(255, 143, 246);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        z-index: 1000;
        max-width: 400px;
        width: 90%;
    }

    .dailiesDivSideBySide {
        display: flex;
        flex-direction: column;
        text-align: center;
    }
    
    .topTextCreditsButton {
        font-size: 18px;
        margin-bottom: 2px;
        color: #ff9dfc;
    }

    .creditsButton {
        background-color: rgba(0, 0, 0, 0.2);
        color: white;
        padding: 12px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        /* center: */
        margin: 0 auto;
        width: 100%;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .creditsButton:hover {
        background-color: var(--highlight-colour-hover);
        transform: translateY(-2px);
    }

    .creditsButton:active {
        background-color: var(--highlight-colour-active);
        transform: translateY(0);
    }

    .creditsButton:disabled {
        background-color: var(--highlight-colour-disabled);
        cursor: not-allowed;
        opacity: 0.6;
    }

    .creditsButton span {
        font-weight: bold;
    }
</style>


<script>

    // when the creditsNav button is clicked, show the creditsDailyPopup: on the center of the screen:
    document.getElementById('creditsNav').addEventListener('click', () => {
        if (document.getElementById('creditsDailyPopup').style.display == 'none') {
            // make it side by side the divs inside it:
            document.getElementById('creditsDailyPopup').style.display = 'inline-block';
        } else {
            document.getElementById('creditsDailyPopup').style.display = 'none';
        }
    });

    // when the user clicks outside of the creditsDailyPopup, hide it:
    document.addEventListener('click', function (event) {
        var isClickInside = document.getElementById('creditsDailyPopup').contains(event.target);
        var isClickOnButton = document.getElementById('creditsNav').contains(event.target);
        if (!isClickInside && !isClickOnButton) {
            document.getElementById('creditsDailyPopup').style.display = 'none';
        }
    });

    // when the user presses the escape key, hide the creditsDailyPopup:
    document.addEventListener('keydown', function (event) {
        if (event.key === "Escape") {
            document.getElementById('creditsDailyPopup').style.display = 'none';
        }
    });

</script>

<script>
    const creditsDisplay = document.getElementById('creditsDisplay');

    // every .1 seconds, check if the creditsDisplay value is higher or lower than the previous value:
    // the credits display is updated by other scripts:
    let previousCredits = 0;
    let currentCredits = 0;
    setInterval(() => {
        currentCredits = parseInt(creditsDisplay.textContent);
        if (currentCredits > previousCredits) {
            creditsDisplay.style.color = 'green';
            setTimeout(() => {
                creditsDisplay.style.color = 'white';
            }, 1000);
        } else if (currentCredits < previousCredits) {
            creditsDisplay.style.color = 'red';
            setTimeout(() => {
                creditsDisplay.style.color = 'white';
            }, 1000);
        }
        previousCredits = currentCredits;
    }, 100);
</script>

<span hidden style="display: none;" id="loggedIn"></span>

<script>

    function sendDailiesRequest(type) {

        // check if the user is logged in, if not then don't send the request:
        if (document.getElementById('loggedIn').textContent == 'false') {
            return;
        }

        // make a request to post /dailies:
        fetch('/dailies', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: type
            })
        }).then(response => response.json())
            .then(data => {
                // console.log(data);
            });
        updateUserProfile()
    }

    document.getElementById('3hrCreditsButton').addEventListener('click', () => {
        sendDailiesRequest('3hr');
    });

    document.getElementById('12hrCreditsButton').addEventListener('click', () => {
        sendDailiesRequest('12hr');
    });

    document.getElementById('24hrCreditsButton').addEventListener('click', () => {
        sendDailiesRequest('24hr');
    });

    document.getElementById('168hrCreditsButton').addEventListener('click', () => {
        sendDailiesRequest('168hr');
    });


    async function updateUserProfile() {
        let userProfileRaw = await fetch('/userProfile', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })

        // console.log(userProfileRaw)

        // res.send({ userProfile: userProfile}) is what the server uses to send it back to the client:
        let userProfile = await userProfileRaw.json();
        userProfile = userProfile?.userProfile;

        if (userProfile == null || userProfile == undefined) {
            document.getElementById('loggedIn').textContent = 'false';
            // set the creditsDisplay to 0 if the userProfile is null AND the CreditsButtons to be "Log in to claim", hide the topTextCreditsButton:
            document.getElementById('creditsDisplay').textContent = 0;
            document.getElementById('3hrCreditsButton').textContent = 'Log in to claim';
            document.getElementById('12hrCreditsButton').textContent = 'Log in to claim';
            document.getElementById('24hrCreditsButton').textContent = 'Log in to claim';
            document.getElementById('168hrCreditsButton').textContent = 'Log in to claim';
            return;
        } else {
            document.getElementById('loggedIn').textContent = 'true';
        }
        
        document.getElementById('creditsDisplay').textContent = userProfile?.credits ?? 0;

        // update the time left on the buttons using current time and the dailies timestamps, convert it from ms to hours mins seconds left, if it's over 3 hours then show it as claimable:

        timestamp3hr = userProfile?.dailies?.timestamp3hr ?? "0";
        timestamp3hr = Number(timestamp3hr)
        timestamp3hrDifferenceRequired = 10800000

        timestamp12hr = userProfile?.dailies?.timestamp12hr ?? "0";
        timestamp12hr = Number(timestamp12hr)
        timestamp12hrDifferenceRequired = 43200000

        timestamp24hr = userProfile?.dailies?.timestamp24hr ?? "0";
        timestamp24hr = Number(timestamp24hr)
        timestamp24hrDifferenceRequired = 86400000

        timestamp168hr = userProfile?.dailies?.timestamp168hr ?? "0";
        timestamp168hr = Number(timestamp168hr)
        timestamp168hrDifferenceRequired = 604800000

        currentTime = new Date().getTime();

        if (timestamp3hr + timestamp3hrDifferenceRequired < currentTime || timestamp3hr == 0) {
            document.getElementById('3hrCreditsButton').disabled = false;
            document.getElementById('3hrCreditsButtonTimeLeft').textContent = 'Claimable';
        } else {
            document.getElementById('3hrCreditsButton').disabled = true;
            timeLeft = timestamp3hr + timestamp3hrDifferenceRequired - currentTime;
            timeLeftHours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            timeLeftMinutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            timeLeftSeconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
            document.getElementById('3hrCreditsButtonTimeLeft').textContent = timeLeftHours + 'h ' + timeLeftMinutes + 'm ' + timeLeftSeconds + 's';
        }

        if (timestamp12hr + timestamp12hrDifferenceRequired < currentTime || timestamp12hr == 0) {
            document.getElementById('12hrCreditsButton').disabled = false;
            document.getElementById('12hrCreditsButtonTimeLeft').textContent = 'Claimable';
        } else {
            document.getElementById('12hrCreditsButton').disabled = true;
            timeLeft = timestamp12hr + timestamp12hrDifferenceRequired - currentTime;
            timeLeftHours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            timeLeftMinutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            timeLeftSeconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
            document.getElementById('12hrCreditsButtonTimeLeft').textContent = timeLeftHours + 'h ' + timeLeftMinutes + 'm ' + timeLeftSeconds + 's';
        }

        if (timestamp24hr + timestamp24hrDifferenceRequired < currentTime || timestamp24hr == 0) {
            document.getElementById('24hrCreditsButton').disabled = false;
            document.getElementById('24hrCreditsButtonTimeLeft').textContent = 'Claimable';
        } else {
            document.getElementById('24hrCreditsButton').disabled = true;
            timeLeft = timestamp24hr + timestamp24hrDifferenceRequired - currentTime;
            timeLeftHours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            timeLeftMinutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            timeLeftSeconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
            document.getElementById('24hrCreditsButtonTimeLeft').textContent = timeLeftHours + 'h ' + timeLeftMinutes + 'm ' + timeLeftSeconds + 's';
        }

        if (timestamp168hr + timestamp168hrDifferenceRequired < currentTime || timestamp168hr == 0) {
            document.getElementById('168hrCreditsButton').disabled = false;
            document.getElementById('168hrCreditsButtonTimeLeft').textContent = 'Claimable';
        } else {
            // show it as D H M S left:
            document.getElementById('168hrCreditsButton').disabled = true;
            timeLeft = timestamp168hr + timestamp168hrDifferenceRequired - currentTime;
            timeLeftDays = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
            timeLeftHours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            timeLeftMinutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            timeLeftSeconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
            document.getElementById('168hrCreditsButtonTimeLeft').textContent = timeLeftDays + 'd ' + timeLeftHours + 'h ' + timeLeftMinutes + 'm ' + timeLeftSeconds + 's';
        }
    }

    updateUserProfile()
    setInterval(() => {
        updateUserProfile()
    }, 750);
</script>

<!-- <div class="center-fully-no-flex round-frosted" style="padding: 4px; border: none !important; border-radius: 0px !important;">
    <p>Donate</p> 
</div> -->

<!-- create a shadow only going down: -->

<style>

    .dividingLine {
        background-color: rgb(255, 255, 255);
        box-shadow: 0 4px 15px rgba(255, 255, 255, 1);
        height: 2px;
    }
    
</style>

<div class="dividingLine"></div>



<!-- script to enable darkmode, change how a button looks with emoji on the navigation -->
<script>
    const darkModeButton = document.getElementById('darkModeButton');
    const darkModeIcon = document.getElementById('darkModeIcon');

    function toggleDarkMode(darkmodeStatus) {
        // console.log(darkmodeStatus + " darkmodeStatus")
        if (darkmodeStatus == "false") {
            document.body.classList.remove('dark');
            document.getElementsByClassName('topNavBar')[0].classList.remove('dark');
            darkModeIcon.textContent = '‚òÄÔ∏è';
        } if (darkmodeStatus == "true") {
            document.body.classList.add('dark');
            document.getElementsByClassName('topNavBar')[0].classList.add('dark');
            darkModeIcon.textContent = 'üåô';
        }
    }



    darkModeButton.addEventListener('click', () => {
        fetch('/toggle-darkmode', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    darkmode: true
                })
            });
        if (document.body.classList.contains('dark')) {
            toggleDarkMode("false")
        } else {
            toggleDarkMode("true")
        }
    });

</script>

<% if (session.darkmode == true) { %>
    <span hidden id="isDarkMode">true</span>
<% } if (session.darkmode == false) { %>
    <span hidden id="isDarkMode">false</span>
<% } %>

<script>
    
    document.addEventListener('DOMContentLoaded', (event) => {
        // Temporarily disable transitions
        document.body.classList.add('no-transition');
        document.getElementsByClassName('topNavBar')[0].classList.add('no-transition');

        const isDarkMode = document.getElementById('isDarkMode').textContent
        toggleDarkMode(isDarkMode); // Assuming toggleDarkMode is a function that correctly toggles the dark mode.

        // Use setTimeout to delay the removal of 'no-transition', allowing changes to apply without transition
        setTimeout(() => {
            document.body.classList.remove('no-transition');
            document.getElementsByClassName('topNavBar')[0].classList.remove('no-transition');
        }, 50); // 50 milliseconds is usually enough, but this can be adjusted as needed
    });

</script>


<style>
    .tooltiptext {
        visibility: hidden;
        opacity: 0;
        transition: visibility 0s, opacity 0.3s;
        /* make it take up no room on the page by default: */
        position: absolute;
        padding: 10px;
        margin: 10px;
        background-color: rgba(0, 0, 0, 0.5);
        color: rgb(255, 144, 144);
        
    }

    /* have a round border around the thingy: */

    .tooltip {
        cursor: pointer;
        border-radius: 50%;
        border: 1px solid rgb(255, 255, 255);
        width: 20px;
        height: 20px;
        display: inline-block;
        text-align: center;
        line-height: 20px;
    }

</style>

<script>
    function showTooltip(element) {
        const tooltip = element.nextElementSibling;

        // tooltip state:
        if (tooltip.style.visibility === 'visible') {
            tooltip.style.opacity = '0';
            // wait 0.3 seconds then hide the tooltip:
            setTimeout(() => {
                tooltip.style.visibility = 'hidden';
                tooltip.style.position = 'absolute';
            }, 300)
            return;
        } else {
            tooltip.style.position = 'relative';
            tooltip.style.visibility = 'visible';
            tooltip.style.opacity = '1';
            // wait 5 seconds then hide the tooltip, but if they toggle the tooltip on and off reset the timeout:
            setTimeout(() => {
                tooltip.style.opacity = '0';
                setTimeout(() => {
                    tooltip.style.visibility = 'hidden';
                    tooltip.style.position = 'absolute';
                }, 300)
            }, 15000)
        }
    }
</script>